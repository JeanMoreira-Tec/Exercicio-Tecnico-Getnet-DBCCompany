!SESSION 2022-08-07 15:22:03.434 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=17.0.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.oomph.p2.core 2 0 2022-08-07 15:22:09.751
!MESSAGE Failed to register the thread safe credentials providers: 'java.util.Map org.eclipse.core.internal.runtime.AdapterManager.getFactories()'

!ENTRY org.eclipse.jface 2 0 2022-08-07 15:23:42.635
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-08-07 15:23:42.635
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@113a89c5,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@55da6bf,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.ui.navigator 2 0 2022-08-07 15:23:52.863
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-08-07 15:23:52.903
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-08-07 15:23:52.912
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Jean Moreira'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:25:44.031
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:25:44.043
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.ui.ide 4 4 2022-08-07 15:31:00.510
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:683)
	at org.eclipse.jface.resource.URLImageDescriptor.createImage(URLImageDescriptor.java:274)
	at org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:287)
	at org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:265)
	at org.eclipse.mylyn.internal.tasks.ui.views.TaskListFilteredTree.createAdditionalControls(TaskListFilteredTree.java:619)
	at org.eclipse.mylyn.commons.workbench.AbstractFilteredTree.createFilterControls(AbstractFilteredTree.java:189)
	at org.eclipse.ui.dialogs.FilteredTree.createControl(FilteredTree.java:362)
	at org.eclipse.mylyn.commons.workbench.EnhancedFilteredTree.createControl(EnhancedFilteredTree.java:61)
	at org.eclipse.mylyn.commons.workbench.AbstractFilteredTree.createControl(AbstractFilteredTree.java:91)
	at org.eclipse.ui.dialogs.FilteredTree.init(FilteredTree.java:331)
	at org.eclipse.ui.dialogs.FilteredTree.<init>(FilteredTree.java:289)
	at org.eclipse.mylyn.commons.workbench.EnhancedFilteredTree.<init>(EnhancedFilteredTree.java:48)
	at org.eclipse.mylyn.commons.workbench.AbstractFilteredTree.<init>(AbstractFilteredTree.java:71)
	at org.eclipse.mylyn.internal.tasks.ui.views.TaskListFilteredTree.<init>(TaskListFilteredTree.java:134)
	at org.eclipse.mylyn.internal.tasks.ui.views.TaskListView.createPartControl(TaskListView.java:590)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.createPartControl(CompatibilityPart.java:158)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityView.createPartControl(CompatibilityView.java:155)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:365)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:995)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:960)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalInject(InjectorImpl.java:140)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:403)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:330)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:202)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:91)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:60)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:42)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:132)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:994)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$1.run(PartRenderingEngine.java:543)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:527)
	at org.eclipse.e4.ui.workbench.renderers.swt.ElementReferenceRenderer.createWidget(ElementReferenceRenderer.java:73)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:994)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:762)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:727)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:711)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.lambda$0(PartServiceImpl.java:109)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.lambda$0(UIEventHandler.java:38)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:236)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4770)
	at org.eclipse.e4.ui.workbench.swt.DisplayUISynchronize.syncExec(DisplayUISynchronize.java:34)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.handleEvent(UIEventHandler.java:38)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:228)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElementGen(ElementContainerImpl.java:170)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElement(ElementContainerImpl.java:188)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.hidePart(PartServiceImpl.java:1380)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.hidePart(PartServiceImpl.java:1330)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer.closePart(StackRenderer.java:1182)
	at org.eclipse.e4.ui.workbench.renderers.swt.StackRenderer$3.close(StackRenderer.java:1042)
	at org.eclipse.swt.custom.CTabFolder.onMouse(CTabFolder.java:1961)
	at org.eclipse.swt.custom.CTabFolder.lambda$0(CTabFolder.java:336)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4237)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1060)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3626)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:51:21.021
!MESSAGE The POM for io.rest-assured:jason.path:jar:4.2.0 is missing, no dependency information available

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:51:21.038
!MESSAGE The POM for io.rest-assured:xml.path:jar:4.2.0 is missing, no dependency information available

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:51:21.882
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:51:21.892
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:51:22.494
!MESSAGE The POM for io.rest-assured:jason.path:jar:4.2.0 is missing, no dependency information available

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:51:22.498
!MESSAGE The POM for io.rest-assured:xml.path:jar:4.2.0 is missing, no dependency information available

!ENTRY org.eclipse.m2e.logback.appender 4 0 2022-08-07 15:51:44.950
!MESSAGE Could not download sources for io.rest-assured:jason.path:4.2.0
!STACK 1
org.eclipse.core.runtime.CoreException: Could not resolve artifact io.rest-assured:jason.path:jar:sources:4.2.0
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.lambda$4(MavenImpl.java:804)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:179)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:114)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:101)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.resolve(MavenImpl.java:772)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.resolve(MavenImpl.java:749)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.download(DownloadSourcesJob.java:330)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadAttachments(DownloadSourcesJob.java:304)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadMaven(DownloadSourcesJob.java:269)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadFilesAndPopulateToUpdate(DownloadSourcesJob.java:233)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.lambda$0(DownloadSourcesJob.java:161)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:179)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:153)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:101)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.execute(MavenImpl.java:1374)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.run(DownloadSourcesJob.java:161)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Contains: Missing io.rest-assured:jason.path:jar:sources:4.2.0
!SUBENTRY 1 org.eclipse.m2e.core 4 -1 2022-08-07 15:51:44.951
!MESSAGE Could not resolve artifact io.rest-assured:jason.path:jar:sources:4.2.0
!SUBENTRY 2 org.eclipse.m2e.core 4 -1 2022-08-07 15:51:44.951
!MESSAGE Missing io.rest-assured:jason.path:jar:sources:4.2.0

!ENTRY org.eclipse.m2e.logback.appender 4 0 2022-08-07 15:51:45.686
!MESSAGE Could not download sources for io.rest-assured:xml.path:4.2.0
!STACK 1
org.eclipse.core.runtime.CoreException: Could not resolve artifact io.rest-assured:xml.path:jar:sources:4.2.0
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.lambda$4(MavenImpl.java:804)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:179)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:114)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:101)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.resolve(MavenImpl.java:772)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.resolve(MavenImpl.java:749)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.download(DownloadSourcesJob.java:330)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadAttachments(DownloadSourcesJob.java:304)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadMaven(DownloadSourcesJob.java:269)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadFilesAndPopulateToUpdate(DownloadSourcesJob.java:233)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.lambda$0(DownloadSourcesJob.java:161)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:179)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:153)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:101)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.execute(MavenImpl.java:1374)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.run(DownloadSourcesJob.java:161)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Contains: Missing io.rest-assured:xml.path:jar:sources:4.2.0
!SUBENTRY 1 org.eclipse.m2e.core 4 -1 2022-08-07 15:51:45.686
!MESSAGE Could not resolve artifact io.rest-assured:xml.path:jar:sources:4.2.0
!SUBENTRY 2 org.eclipse.m2e.core 4 -1 2022-08-07 15:51:45.686
!MESSAGE Missing io.rest-assured:xml.path:jar:sources:4.2.0

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:51:45.944
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:51:45.948
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 4 0 2022-08-07 15:51:47.554
!MESSAGE Could not download javadoc for io.rest-assured:jason.path:4.2.0
!STACK 1
org.eclipse.core.runtime.CoreException: Could not resolve artifact io.rest-assured:jason.path:jar:javadoc:4.2.0
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.lambda$4(MavenImpl.java:804)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:179)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:114)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:101)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.resolve(MavenImpl.java:772)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.resolve(MavenImpl.java:749)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.download(DownloadSourcesJob.java:330)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadAttachments(DownloadSourcesJob.java:316)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadMaven(DownloadSourcesJob.java:269)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadFilesAndPopulateToUpdate(DownloadSourcesJob.java:233)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.lambda$0(DownloadSourcesJob.java:161)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:179)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:153)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:101)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.execute(MavenImpl.java:1374)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.run(DownloadSourcesJob.java:161)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Contains: Missing io.rest-assured:jason.path:jar:javadoc:4.2.0
!SUBENTRY 1 org.eclipse.m2e.core 4 -1 2022-08-07 15:51:47.554
!MESSAGE Could not resolve artifact io.rest-assured:jason.path:jar:javadoc:4.2.0
!SUBENTRY 2 org.eclipse.m2e.core 4 -1 2022-08-07 15:51:47.554
!MESSAGE Missing io.rest-assured:jason.path:jar:javadoc:4.2.0

!ENTRY org.eclipse.m2e.logback.appender 4 0 2022-08-07 15:51:48.298
!MESSAGE Could not download javadoc for io.rest-assured:xml.path:4.2.0
!STACK 1
org.eclipse.core.runtime.CoreException: Could not resolve artifact io.rest-assured:xml.path:jar:javadoc:4.2.0
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.lambda$4(MavenImpl.java:804)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:179)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:114)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:101)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.resolve(MavenImpl.java:772)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.resolve(MavenImpl.java:749)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.download(DownloadSourcesJob.java:330)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadAttachments(DownloadSourcesJob.java:316)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadMaven(DownloadSourcesJob.java:269)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadFilesAndPopulateToUpdate(DownloadSourcesJob.java:233)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.lambda$0(DownloadSourcesJob.java:161)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:179)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:153)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:101)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.execute(MavenImpl.java:1374)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.run(DownloadSourcesJob.java:161)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Contains: Missing io.rest-assured:xml.path:jar:javadoc:4.2.0
!SUBENTRY 1 org.eclipse.m2e.core 4 -1 2022-08-07 15:51:48.298
!MESSAGE Could not resolve artifact io.rest-assured:xml.path:jar:javadoc:4.2.0
!SUBENTRY 2 org.eclipse.m2e.core 4 -1 2022-08-07 15:51:48.298
!MESSAGE Missing io.rest-assured:xml.path:jar:javadoc:4.2.0

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:53:47.575
!MESSAGE The POM for io.rest-assured:jason.path:jar:4.3.0 is missing, no dependency information available

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:53:47.610
!MESSAGE The POM for io.rest-assured:xml.path:jar:4.3.0 is missing, no dependency information available

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:53:47.896
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:53:47.902
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:53:48.914
!MESSAGE The POM for io.rest-assured:jason.path:jar:4.3.0 is missing, no dependency information available

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:53:48.916
!MESSAGE The POM for io.rest-assured:xml.path:jar:4.3.0 is missing, no dependency information available

!ENTRY org.eclipse.m2e.logback.appender 4 0 2022-08-07 15:53:49.690
!MESSAGE Could not download sources for io.rest-assured:jason.path:4.3.0
!STACK 1
org.eclipse.core.runtime.CoreException: Could not resolve artifact io.rest-assured:jason.path:jar:sources:4.3.0
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.lambda$4(MavenImpl.java:804)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:179)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:114)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:101)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.resolve(MavenImpl.java:772)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.resolve(MavenImpl.java:749)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.download(DownloadSourcesJob.java:330)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadAttachments(DownloadSourcesJob.java:304)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadMaven(DownloadSourcesJob.java:269)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadFilesAndPopulateToUpdate(DownloadSourcesJob.java:233)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.lambda$0(DownloadSourcesJob.java:161)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:179)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:153)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:101)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.execute(MavenImpl.java:1374)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.run(DownloadSourcesJob.java:161)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Contains: Missing io.rest-assured:jason.path:jar:sources:4.3.0
!SUBENTRY 1 org.eclipse.m2e.core 4 -1 2022-08-07 15:53:49.690
!MESSAGE Could not resolve artifact io.rest-assured:jason.path:jar:sources:4.3.0
!SUBENTRY 2 org.eclipse.m2e.core 4 -1 2022-08-07 15:53:49.690
!MESSAGE Missing io.rest-assured:jason.path:jar:sources:4.3.0

!ENTRY org.eclipse.m2e.logback.appender 4 0 2022-08-07 15:53:50.490
!MESSAGE Could not download sources for io.rest-assured:xml.path:4.3.0
!STACK 1
org.eclipse.core.runtime.CoreException: Could not resolve artifact io.rest-assured:xml.path:jar:sources:4.3.0
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.lambda$4(MavenImpl.java:804)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:179)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:114)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:101)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.resolve(MavenImpl.java:772)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.resolve(MavenImpl.java:749)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.download(DownloadSourcesJob.java:330)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadAttachments(DownloadSourcesJob.java:304)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadMaven(DownloadSourcesJob.java:269)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadFilesAndPopulateToUpdate(DownloadSourcesJob.java:233)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.lambda$0(DownloadSourcesJob.java:161)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:179)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:153)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:101)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.execute(MavenImpl.java:1374)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.run(DownloadSourcesJob.java:161)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Contains: Missing io.rest-assured:xml.path:jar:sources:4.3.0
!SUBENTRY 1 org.eclipse.m2e.core 4 -1 2022-08-07 15:53:50.490
!MESSAGE Could not resolve artifact io.rest-assured:xml.path:jar:sources:4.3.0
!SUBENTRY 2 org.eclipse.m2e.core 4 -1 2022-08-07 15:53:50.490
!MESSAGE Missing io.rest-assured:xml.path:jar:sources:4.3.0

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:54:02.641
!MESSAGE The POM for io.rest-assured:jason.path:jar:4.2.0 is missing, no dependency information available

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:54:02.643
!MESSAGE The POM for io.rest-assured:xml.path:jar:4.2.0 is missing, no dependency information available

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:54:02.907
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:54:02.913
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:58:05.918
!MESSAGE The POM for io.rest-assured:json.path:jar:4.2.0 is missing, no dependency information available

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:58:05.920
!MESSAGE The POM for io.rest-assured:xml.path:jar:4.2.0 is missing, no dependency information available

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:58:06.517
!MESSAGE The POM for io.rest-assured:json.path:jar:4.2.0 is missing, no dependency information available

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:58:06.519
!MESSAGE The POM for io.rest-assured:xml.path:jar:4.2.0 is missing, no dependency information available

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:58:06.801
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:58:06.807
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:58:07.745
!MESSAGE The POM for io.rest-assured:json.path:jar:4.2.0 is missing, no dependency information available

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:58:07.746
!MESSAGE The POM for io.rest-assured:xml.path:jar:4.2.0 is missing, no dependency information available

!ENTRY org.eclipse.m2e.logback.appender 4 0 2022-08-07 15:58:09.051
!MESSAGE Could not download sources for io.rest-assured:json.path:4.2.0
!STACK 1
org.eclipse.core.runtime.CoreException: Could not resolve artifact io.rest-assured:json.path:jar:sources:4.2.0
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.lambda$4(MavenImpl.java:804)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:179)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:114)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:101)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.resolve(MavenImpl.java:772)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.resolve(MavenImpl.java:749)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.download(DownloadSourcesJob.java:330)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadAttachments(DownloadSourcesJob.java:304)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadMaven(DownloadSourcesJob.java:269)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.downloadFilesAndPopulateToUpdate(DownloadSourcesJob.java:233)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.lambda$0(DownloadSourcesJob.java:161)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.executeBare(MavenExecutionContext.java:179)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:153)
	at org.eclipse.m2e.core.internal.embedder.MavenExecutionContext.execute(MavenExecutionContext.java:101)
	at org.eclipse.m2e.core.internal.embedder.MavenImpl.execute(MavenImpl.java:1374)
	at org.eclipse.m2e.jdt.internal.DownloadSourcesJob.run(DownloadSourcesJob.java:161)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Contains: Missing io.rest-assured:json.path:jar:sources:4.2.0
!SUBENTRY 1 org.eclipse.m2e.core 4 -1 2022-08-07 15:58:09.052
!MESSAGE Could not resolve artifact io.rest-assured:json.path:jar:sources:4.2.0
!SUBENTRY 2 org.eclipse.m2e.core 4 -1 2022-08-07 15:58:09.052
!MESSAGE Missing io.rest-assured:json.path:jar:sources:4.2.0

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:58:52.011
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:58:52.017
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:58:53.464
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 15:58:53.474
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:01:20.290
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:01:20.294
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:01:21.487
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:01:21.491
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:04:50.936
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:04:50.939
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:07:25.111
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:07:25.116
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:09:32.504
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:09:32.507
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:17:16.598
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:17:16.604
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:19:32.154
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:19:32.156
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:22:52.292
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:22:52.297
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:25:38.977
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:25:38.980
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:25:48.371
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:25:48.374
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:26:24.821
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:26:24.824
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:30:45.252
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:30:45.254
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:32:46.364
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:32:46.366
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:40:52.196
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:40:52.201
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:44:43.103
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:44:43.106
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:46:25.229
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:46:25.232
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:52:30.164
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:52:30.166
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:53:04.542
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:53:04.544
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:56:16.465
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:56:16.468
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:56:28.833
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 16:56:28.838
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
!SESSION 2022-08-07 16:56:53.955 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=17.0.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.oomph.p2.core 2 0 2022-08-07 16:57:01.245
!MESSAGE Failed to register the thread safe credentials providers: 'java.util.Map org.eclipse.core.internal.runtime.AdapterManager.getFactories()'

!ENTRY org.eclipse.jface 2 0 2022-08-07 16:57:53.903
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-08-07 16:57:53.903
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3857c5d5,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@237824b0,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.ui.navigator 2 0 2022-08-07 16:58:11.263
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-08-07 16:58:11.264
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-08-07 16:58:11.749
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Jean Moreira'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 17:02:37.609
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 17:02:37.626
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 17:02:39.977
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 17:02:40.006
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 17:02:51.118
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 17:02:51.122
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 17:06:03.696
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 17:06:03.703
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 17:06:11.974
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 17:06:11.978
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 17:07:41.761
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 17:07:41.765
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 17:37:17.608
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 17:37:17.611
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 18:37:57.444
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 18:37:57.448
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.jdt.ui 4 10001 2022-08-07 19:08:21.681
!MESSAGE Internal Error
!STACK 0
org.eclipse.jface.text.BadLocationException
	at org.eclipse.jface.text.AbstractDocument.getChar(AbstractDocument.java:783)
	at org.eclipse.core.internal.filebuffers.SynchronizableDocument.getChar(SynchronizableDocument.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaSourceHover.getBracketHoverInfo(JavaSourceHover.java:177)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaSourceHover.getHoverInfo(JavaSourceHover.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaSourceHover.getHoverInfo2(JavaSourceHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 19:11:46.649
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 19:11:46.652
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 19:21:14.246
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 19:21:14.249
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 19:42:53.494
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 19:42:53.498
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 19:48:39.298
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 19:48:39.303
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 19:51:49.029
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-07 19:51:49.032
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
!SESSION 2022-08-08 12:35:15.744 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=17.0.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.oomph.p2.core 2 0 2022-08-08 12:35:23.341
!MESSAGE Failed to register the thread safe credentials providers: 'java.util.Map org.eclipse.core.internal.runtime.AdapterManager.getFactories()'

!ENTRY org.eclipse.jface 2 0 2022-08-08 12:36:11.794
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-08-08 12:36:11.795
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2284058a,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5b11d0d8,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.ui.navigator 2 0 2022-08-08 12:36:36.276
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-08-08 12:36:36.278
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-08-08 12:36:36.524
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Jean Moreira'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 12:50:03.786
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 12:50:03.804
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 12:50:57.575
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 12:50:57.602
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
!SESSION 2022-08-08 12:55:20.348 -----------------------------------------------
eclipse.buildId=4.21.0.I20210906-0500
java.version=17.0.1
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=pt_BR
Framework arguments:  -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product -data file:/D:/Automação/Getnet/ -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.oomph.p2.core 2 0 2022-08-08 12:55:35.396
!MESSAGE Failed to register the thread safe credentials providers: 'java.util.Map org.eclipse.core.internal.runtime.AdapterManager.getFactories()'

!ENTRY org.eclipse.jface 2 0 2022-08-08 12:55:43.427
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-08-08 12:55:43.427
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2cdb53d6,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@62ba3045,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.testng.eclipse 4 4 2022-08-08 12:56:02.497
!MESSAGE Error
!STACK 0
java.util.concurrent.CancellationException
	at org.eclipse.jface.internal.text.codemining.CancellationExceptionMonitor.isCanceled(CancellationExceptionMonitor.java:33)
	at org.testng.eclipse.ui.codemining.TestCodeMiningProvider.processElements(TestCodeMiningProvider.java:80)
	at org.testng.eclipse.ui.codemining.TestCodeMiningProvider.processElements(TestCodeMiningProvider.java:89)
	at org.testng.eclipse.ui.codemining.TestCodeMiningProvider.mineForTests(TestCodeMiningProvider.java:67)
	at org.testng.eclipse.ui.codemining.TestCodeMiningProvider.lambda$0(TestCodeMiningProvider.java:40)
	at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1768)
	at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.exec(CompletableFuture.java:1760)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)

!ENTRY org.eclipse.ui.navigator 2 0 2022-08-08 12:56:04.420
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-08-08 12:56:04.420
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-08-08 12:56:06.007
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\Jean Moreira'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:03:59.762
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 56863 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-2006371843\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 56863 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-2006371843\testng-customsuite.xml

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:07:05.841
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 56903 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--788030414\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 56903 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--788030414\testng-customsuite.xml

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:09:19.722
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:09:19.733
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:09:52.764
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 56937 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1749048161\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 56937 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1749048161\testng-customsuite.xml

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:11:01.725
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 56955 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1590439669\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 56955 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1590439669\testng-customsuite.xml

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:13:35.860
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:13:35.865
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:13:44.189
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 49934 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1129757318\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 49934 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1129757318\testng-customsuite.xml

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:14:29.181
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 61768 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--1211242169\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 61768 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--1211242169\testng-customsuite.xml

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:14:44.773
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 61773 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-21908704\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 61773 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-21908704\testng-customsuite.xml

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:15:03.291
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 61779 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1206412650\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 61779 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1206412650\testng-customsuite.xml

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:15:34.262
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 61788 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--1474887111\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 61788 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--1474887111\testng-customsuite.xml

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:16:47.445
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:16:47.449
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:16:55.937
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 61807 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-144844462\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 61807 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-144844462\testng-customsuite.xml

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:17:40.589
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 61819 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--1303842416\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 61819 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--1303842416\testng-customsuite.xml

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:17:55.944
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 61824 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1384428797\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 61824 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1384428797\testng-customsuite.xml

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:18:16.051
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 61832 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1198225654\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 61832 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1198225654\testng-customsuite.xml

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:18:45.902
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 61837 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--845944729\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 61837 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--845944729\testng-customsuite.xml

!ENTRY org.eclipse.jdt.core 4 4 2022-08-08 13:20:00.735
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/*
 * Copyright 2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.restassured.internal

import io.restassured.RestAssured
import io.restassured.authentication.AuthenticationScheme
import io.restassured.authentication.CertAuthScheme
import io.restassured.authentication.FormAuthScheme
import io.restassured.authentication.NoAuthScheme
import io.restassured.config.*
import io.restassured.filter.Filter
import io.restassured.filter.OrderedFilter
import io.restassured.filter.log.RequestLoggingFilter
import io.restassured.filter.log.ResponseLoggingFilter
import io.restassured.filter.time.TimingFilter
import io.restassured.http.*
import io.restassured.internal.MapCreator.CollisionStrategy
import io.restassured.internal.filter.FilterContextImpl
import io.restassured.internal.filter.FormAuthFilter
import io.restassured.internal.filter.SendRequestFilter
import io.restassured.internal.http.*
import io.restassured.internal.log.LogRepository
import io.restassured.internal.mapping.ObjectMapperSerializationContextImpl
import io.restassured.internal.mapping.ObjectMapping
import io.restassured.internal.multipart.MultiPartInternal
import io.restassured.internal.multipart.MultiPartSpecificationImpl
import io.restassured.internal.multipart.RestAssuredMultiPartEntity
import io.restassured.internal.proxy.RestAssuredProxySelector
import io.restassured.internal.proxy.RestAssuredProxySelectorRoutePlanner
import io.restassured.internal.support.ParameterUpdater
import io.restassured.internal.support.PathSupport
import io.restassured.mapper.ObjectMapper
import io.restassured.mapper.ObjectMapperType
import io.restassured.parsing.Parser
import io.restassured.response.Response
import io.restassured.specification.*
import io.restassured.spi.AuthFilter
import org.apache.http.HttpEntity
import org.apache.http.HttpResponse
import org.apache.http.auth.AuthScope
import org.apache.http.auth.UsernamePasswordCredentials
import org.apache.http.client.CredentialsProvider
import org.apache.http.client.HttpClient
import org.apache.http.client.methods.HttpPost
import org.apache.http.client.methods.HttpRequestBase
import org.apache.http.entity.HttpEntityWrapper
import org.apache.http.entity.mime.FormBodyPartBuilder
import org.apache.http.impl.client.AbstractHttpClient
import org.apache.http.impl.client.BasicCredentialsProvider
import org.apache.http.message.BasicHeader
import org.apache.http.util.EntityUtils

import java.security.KeyStore
import java.util.Map.Entry
import java.util.regex.Matcher
import java.util.regex.Pattern

import static io.restassured.config.ParamConfig.UpdateStrategy.REPLACE
import static io.restassured.http.ContentType.*
import static io.restassured.http.Method.*
import static io.restassured.internal.common.assertion.AssertParameter.notNull
import static io.restassured.internal.serialization.SerializationSupport.isSerializableCandidate
import static io.restassured.internal.support.PathSupport.isFullyQualified
import static io.restassured.internal.support.PathSupport.mergeAndRemoveDoubleSlash
import static java.lang.String.format
import static java.util.Arrays.asList
import static org.apache.commons.lang3.StringUtils.*
import static org.apache.http.client.params.ClientPNames.*

class RequestSpecificationImpl implements FilterableRequestSpecification, GroovyInterceptable {
  private static final int DEFAULT_HTTP_TEST_PORT = 8080
  private static final String CONTENT_TYPE = "Content-Type"
  private static final String DOUBLE_SLASH = "//"
  private static final String LOCALHOST = "localhost"
  private static final String CHARSET = "charset"
  private static final String ACCEPT_HEADER_NAME = "Accept"
  private static final String SSL = "SSL"
  private static final String MULTIPART = "multipart"
  private static final String MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH = MULTIPART + "/"
  private static final String MULTIPART_CONTENT_TYPE_PREFIX_WITH_PLUS = MULTIPART + "+"
  private static final String TEMPLATE_START = "{"
  private static final String TEMPLATE_END = "}"

  private String baseUri
  private String path = ""
  private String method
  private String basePath
  // If first argument is null it means that it's a redundant path param that cannot be mapped to a placeholder
  // If second argument is null it means that the parameter has been removed (but we keep it to retain order)
  private List<Tuple2<String, String>> unnamedPathParamsTuples = new ArrayList<>()
  private AuthenticationScheme defaultAuthScheme
  private int port
  private Map<String, String> requestParameters = new LinkedHashMap()
  private Map<String, String> queryParameters = new LinkedHashMap()
  private Map<String, String> formParameters = new LinkedHashMap()
  private Map<String, String> namedPathParameters = [:]
  private Map<String, String> httpClientParams = [:]
  AuthenticationScheme authenticationScheme = new NoAuthScheme()
  private FilterableResponseSpecification responseSpecification;
  private Headers requestHeaders = new Headers([])
  private Cookies cookies = new Cookies([])
  private Object requestBody;
  private List<Filter> filters = [];
  private boolean urlEncodingEnabled
  private RestAssuredConfig restAssuredConfig;
  private List<MultiPartInternal> multiParts = [];
  private ParameterUpdater parameterUpdater = new ParameterUpdater(new ParameterUpdater.Serializer() {
    String serializeIfNeeded(Object value) {
      return RequestSpecificationImpl.this.serializeIfNeeded(value)
    }
  });
  private ProxySpecification proxySpecification = null

  private LogRepository logRepository

  // This field should be removed once http://jira.codehaus.org/browse/GROOVY-4647 is resolved, merge with sha 9619c3b when it's fixed.
  private AbstractHttpClient httpClient

  public RequestSpecificationImpl(String baseURI, int requestPort, String basePath, AuthenticationScheme defaultAuthScheme, List<Filter> filters,
                                  RequestSpecification defaultSpec, boolean urlEncode, RestAssuredConfig restAssuredConfig, LogRepository logRepository,
                                  ProxySpecification proxySpecification) {
    notNull(baseURI, "baseURI");
    notNull(basePath, "basePath");
    notNull(defaultAuthScheme, "defaultAuthScheme");
    notNull(filters, "Filters")
    notNull(urlEncode, "URL Encode query params option")
    this.baseUri = baseURI
    this.basePath = basePath
    this.defaultAuthScheme = defaultAuthScheme
    this.filters.addAll(filters)
    this.urlEncodingEnabled = urlEncode
    port(requestPort)
    this.restAssuredConfig = restAssuredConfig
    if (defaultSpec != null) {
      spec(defaultSpec)
    }
    this.logRepository = logRepository
    this.proxySpecification = proxySpecification
  }

  RequestSpecification when() {
    return this;
  }

  RequestSpecification given() {
    return this;
  }

  RequestSpecification that() {
    return this;
  }

  ResponseSpecification response() {
    return responseSpecification;
  }

  Response get(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(GET, path, pathParams)
  }

  Response post(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(POST, path, pathParams)
  }

  Response put(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(PUT, path, pathParams)
  }

  Response delete(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(DELETE, path, pathParams)
  }

  Response head(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(HEAD, path, pathParams)
  }

  Response patch(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(PATCH, path, pathParams)
  }

  Response options(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(OPTIONS, path, pathParams)
  }

  Response get(URI uri) {
    get(notNull(uri, "URI").toString())
  }

  Response post(URI uri) {
    post(notNull(uri, "URI").toString())
  }

  Response put(URI uri) {
    put(notNull(uri, "URI").toString())
  }

  Response delete(URI uri) {
    delete(notNull(uri, "URI").toString())
  }

  Response head(URI uri) {
    head(notNull(uri, "URI").toString())
  }

  Response patch(URI uri) {
    patch(notNull(uri, "URI").toString())
  }

  Response options(URI uri) {
    options(notNull(uri, "URI").toString())
  }

  Response get(URL url) {
    get(notNull(url, "URL").toString())
  }

  Response post(URL url) {
    post(notNull(url, "URL").toString())
  }

  Response put(URL url) {
    put(notNull(url, "URL").toString())
  }

  Response delete(URL url) {
    delete(notNull(url, "URL").toString())
  }

  Response head(URL url) {
    head(notNull(url, "URL").toString())
  }

  Response patch(URL url) {
    patch(notNull(url, "URL").toString())
  }

  Response options(URL url) {
    options(notNull(url, "URL").toString())
  }

  Response get() {
    get("")
  }

  Response post() {
    post("")
  }

  Response put() {
    put("")
  }

  Response delete() {
    delete("")
  }

  Response head() {
    head("")
  }

  Response patch() {
    patch("")
  }

  Response options() {
    options("")
  }

  Response request(Method method) {
    request(notNull(method, Method.class).name())
  }

  Response request(String method) {
    request(method, "")
  }

  Response request(Method method, String path, Object... pathParams) {
    return request(notNull(method, Method.class).name(), path, pathParams)
  }

  Response request(String method, String path, Object... pathParams) {
    applyPathParamsAndSendRequest(method, path, pathParams)
  }

  Response request(Method method, URI uri) {
    request(method, notNull(uri, URI.class).toString())
  }

  Response request(Method method, URL url) {
    request(method, notNull(url, URL.class).toString())
  }

  Response request(String method, URI uri) {
    request(method, notNull(uri, URI.class).toString())
  }

  Response request(String method, URL url) {
    request(method, notNull(url, URL.class).toString())
  }

  Response get(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(GET, path)
  }

  Response post(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(POST, path)
  }

  Response put(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(PUT, path)
  }

  Response delete(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(DELETE, path)
  }

  Response head(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(HEAD, path)
  }

  Response patch(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(PATCH, path)
  }

  Response options(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(OPTIONS, path)
  }

  RequestSpecification params(String firstParameterName, Object firstParameterValue, Object... parameterNameValuePairs) {
    notNull firstParameterName, "firstParameterName"
    notNull firstParameterValue, "firstParameterValue"
    return params(MapCreator.createMapFromParams(CollisionStrategy.OVERWRITE, firstParameterName, firstParameterValue, parameterNameValuePairs))
  }

  RequestSpecification params(Map parametersMap) {
    notNull parametersMap, "parametersMap"
    parameterUpdater.updateParameters(restAssuredConfig().paramConfig.requestParamsUpdateStrategy(), parametersMap, requestParameters)
    return this
  }

  RequestSpecification param(String parameterName, Object... parameterValues) {
    notNull parameterName, "parameterName"
    parameterUpdater.updateZeroToManyParameters(restAssuredConfig().paramConfig.requestParamsUpdateStrategy(), requestParameters, parameterName, parameterValues)
    return this
  }

  FilterableRequestSpecification removeParam(String parameterName) {
    notNull parameterName, "parameterName"
    requestParameters.remove(parameterName)
    return this
  }

  RequestSpecification param(String parameterName, Collection<?> parameterValues) {
    notNull parameterValues, "parameterValues"
    return param(parameterName, parameterValues.toArray())
  }

  RequestSpecification queryParam(String parameterName, Collection<?> parameterValues) {
    notNull parameterName, "parameterName"
    notNull parameterValues, "parameterValues"
    parameterUpdater.updateCollectionParameter(restAssuredConfig().getParamConfig().queryParamsUpdateStrategy(), queryParameters, parameterName, parameterValues)
    return this
  }

  FilterableRequestSpecification removeQueryParam(String parameterName) {
    notNull parameterName, "parameterName"
    queryParameters.remove(parameterName)
    return this
  }

  FilterableRequestSpecification removeHeader(String headerName) {
    notNull headerName, "headerName"
    def headersLeftAfterRemove = headers.findAll { !headerName.equalsIgnoreCase(it.getName()) }
    this.requestHeaders = new Headers(headersLeftAfterRemove)
    this
  }

  FilterableRequestSpecification removeCookie(String cookieName) {
    notNull cookieName, "cookieName"
    def cookiesLeftAfterRemove = cookies.findAll { !cookieName.equalsIgnoreCase(it.getName()) }
    this.cookies = new Cookies(cookiesLeftAfterRemove)
    this
  }

  FilterableRequestSpecification removeCookie(Cookie cookie) {
    notNull cookie, "cookie"
    removeCookie(cookie.getName())
    this
  }

  FilterableRequestSpecification replaceHeader(String headerName, String newValue) {
    notNull headerName, "headerName"
    removeHeader(headerName)
    def headerList = []
    headerList.addAll(this.requestHeaders.list())
    headerList.add(new Header(headerName, newValue))
    this.requestHeaders = new Headers(headerList)
    this
  }

  FilterableRequestSpecification replaceCookie(String cookieName, String value) {
    notNull cookieName, "cookieName"
    removeCookie(cookieName)
    cookie(cookieName, value)
    this
  }

  FilterableRequestSpecification replaceCookie(Cookie cookie) {
    notNull cookie, "cookie"
    removeCookie(cookie.getName())
    this.cookie(cookie)
    this
  }

  FilterableRequestSpecification replaceHeaders(Headers headers) {
    notNull headers, "headers"
    this.requestHeaders = new Headers(headers.asList())
    this
  }

  FilterableRequestSpecification replaceCookies(Cookies cookies) {
    notNull cookies, "cookies"
    this.cookies = new Cookies(cookies.asList())
    this
  }

  FilterableRequestSpecification removeHeaders() {
    this.requestHeaders = new Headers([])
    this
  }

  FilterableRequestSpecification removeCookies() {
    this.cookies = new Cookies([])
    this
  }


  RequestSpecification queryParams(String firstParameterName, Object firstParameterValue, Object... parameterNameValuePairs) {
    notNull firstParameterName, "firstParameterName"
    notNull firstParameterValue, "firstParameterValue"
    return queryParams(MapCreator.createMapFromParams(CollisionStrategy.OVERWRITE, firstParameterName, firstParameterValue, parameterNameValuePairs))
  }

  RequestSpecification queryParams(Map parametersMap) {
    notNull parametersMap, "parametersMap"
    parameterUpdater.updateParameters(restAssuredConfig().paramConfig.queryParamsUpdateStrategy(), parametersMap, queryParameters)
    return this
  }

  RequestSpecification queryParam(String parameterName, Object... parameterValues) {
    notNull parameterName, "parameterName"
    parameterUpdater.updateZeroToManyParameters(restAssuredConfig().paramConfig.queryParamsUpdateStrategy(), queryParameters, parameterName, parameterValues)
    return this
  }

  RequestSpecification formParam(String parameterName, Collection<?> parameterValues) {
    notNull parameterName, "parameterName"
    notNull parameterValues, "parameterValues"
    parameterUpdater.updateCollectionParameter(restAssuredConfig().paramConfig.formParamsUpdateStrategy(), formParameters, parameterName, parameterValues)
    return this
  }

  FilterableRequestSpecification removeFormParam(String parameterName) {
    notNull parameterName, "parameterName"
    formParameters.remove(parameterName)
    return this
  }

  RequestSpecification formParams(String firstParameterName, Object firstParameterValue, Object... parameterNameValuePairs) {
    notNull firstParameterName, "firstParameterName"
    notNull firstParameterValue, "firstParameterValue"
    return formParams(MapCreator.createMapFromParams(CollisionStrategy.OVERWRITE, firstParameterName, firstParameterValue, parameterNameValuePairs))
  }

  RequestSpecification formParams(Map parametersMap) {
    notNull parametersMap, "parametersMap"
    parameterUpdater.updateParameters(restAssuredConfig().paramConfig.formParamsUpdateStrategy(), parametersMap, formParameters)
    return this
  }

  RequestSpecification formParam(String parameterName, Object... additionalParameterValues) {
    notNull parameterName, "parameterName"
    parameterUpdater.updateZeroToManyParameters(restAssuredConfig().paramConfig.formParamsUpdateStrategy(), formParameters, parameterName, additionalParameterValues)
    return this
  }

  RequestSpecification urlEncodingEnabled(boolean isEnabled) {
    this.urlEncodingEnabled = isEnabled
    return this
  }

  RequestSpecification pathParam(String parameterName, Object parameterValue) {
    notNull parameterName, "parameterName"
    notNull parameterValue, "parameterValue"
    parameterUpdater.updateStandardParameter(REPLACE, namedPathParameters, parameterName, parameterValue)
    return this
  }

  RequestSpecification pathParams(String firstParameterName, Object firstParameterValue, Object... parameterNameValuePairs) {
    notNull firstParameterName, "firstParameterName"
    notNull firstParameterValue, "firstParameterValue"
    return pathParams(MapCreator.createMapFromParams(CollisionStrategy.OVERWRITE, firstParameterName, firstParameterValue, parameterNameValuePairs))
  }

  RequestSpecification pathParams(Map parameterNameValuePairs) {
    notNull parameterNameValuePairs, "parameterNameValuePairs"
    parameterUpdater.updateParameters(REPLACE, parameterNameValuePairs, namedPathParameters)
    return this
  }

  FilterableRequestSpecification removePathParam(String parameterName) {
    notNull parameterName, "parameterName"
    removeNamedPathParam(parameterName)
    removeUnnamedPathParam(parameterName)
    return this
  }

  FilterableRequestSpecification removeNamedPathParam(String parameterName) {
    notNull parameterName, "parameterName"
    namedPathParameters.remove(parameterName)
    this
  }

  FilterableRequestSpecification removeUnnamedPathParam(String parameterName) {
    notNull parameterName, "parameterName"
    def indexOfParamName = unnamedPathParamsTuples.findIndexOf { it.first == parameterName }
    if (indexOfParamName > -1) {
      removeUnnamedPathParamAtIndex(indexOfParamName)
    }
    this
  }

  FilterableRequestSpecification removeUnnamedPathParamByValue(String parameterValue) {
    notNull parameterValue, "parameterValue"
    def indexOfParamValue = unnamedPathParamsTuples.findIndexOf { it.second == parameterValue }
    if (indexOfParamValue > -1) {
      removeUnnamedPathParamAtIndex(indexOfParamValue)
    }
    return this
  }

  RequestSpecification config(RestAssuredConfig config) {
    this.restAssuredConfig = config
    responseSpecification?.config = config
    this
  }

  RequestSpecification keyStore(String pathToJks, String password) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    // Allow all host names in order to be backward compatible
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.keyStore(pathToJks, password).allowAllHostnames())
    this
  }

  RequestSpecification keyStore(File pathToJks, String password) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    // Allow all host names in order to be backward compatible
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.keyStore(pathToJks, password).allowAllHostnames())
    this
  }

  RequestSpecification trustStore(String path, String password) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.trustStore(path, password).allowAllHostnames())
    this
  }

  RequestSpecification trustStore(File path, String password) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.trustStore(path, password).allowAllHostnames())
    this
  }

  RequestSpecification trustStore(KeyStore trustStore) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.trustStore(trustStore))
    this
  }

  RequestSpecification keyStore(KeyStore keyStore) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.keyStore(keyStore))
    this
  }

  RequestSpecification relaxedHTTPSValidation() {
    relaxedHTTPSValidation(SSL)
  }

  RequestSpecification relaxedHTTPSValidation(String protocol) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.relaxedHTTPSValidation(protocol))
    this
  }

  RequestSpecification filter(Filter filter) {
    notNull filter, "Filter"
    filters << filter
    return this
  }

  RequestSpecification filters(List<Filter> filters) {
    notNull filters, "Filters"
    this.filters.addAll(filters)
    return this
  }

  RequestSpecification filters(Filter filter, Filter... additionalFilter) {
    notNull filter, "Filter"
    this.filters.add(filter)
    additionalFilter?.each {
      this.filters.add(it)
    }
    return this
  }

  RequestLogSpecification log() {
    def blacklistedHeaders = restAssuredConfig().logConfig.blacklistedHeaders()
    return new RequestLogSpecificationImpl(requestSpecification: this, logRepository: logRepository, blacklistedHeaders: blacklistedHeaders)
  }

  RequestSpecification and() {
    return this;
  }

  RequestSpecification request() {
    return this;
  }

  RequestSpecification with() {
    return this;
  }

  ResponseSpecification then() {
    return responseSpecification;
  }

  ResponseSpecification expect() {
    return responseSpecification;
  }

  AuthenticationSpecification auth() {
    return new AuthenticationSpecificationImpl(this);
  }

  AuthenticationSpecification authentication() {
    return auth();
  }

  RequestSpecification port(int port) {
    if (port < 1 && port != RestAssured.UNDEFINED_PORT) {
      throw new IllegalArgumentException("Port must be greater than 0")
    }
    this.port = port
    return this
  }

  RequestSpecification body(String body) {
    notNull body, "body"
    this.requestBody = body;
    return this;
  }

  RequestSpecification baseUri(String baseUri) {
    notNull baseUri, "Base URI"
    this.baseUri = baseUri;
    return this;
  }

  RequestSpecification basePath(String basePath) {
    notNull basePath, "Base Path"
    this.basePath = basePath;
    return this;
  }

  RequestSpecification proxy(String host, int port) {
    proxy(ProxySpecification.host(host).withPort(port))
  }

  RequestSpecification proxy(String host) {
    if (UriValidator.isUri(host)) {
      proxy(new URI(host))
    } else {
      proxy(ProxySpecification.host(host))
    }
  }

  RequestSpecification proxy(int port) {
    proxy(ProxySpecification.port(port))
  }

  RequestSpecification proxy(String host, int port, String scheme) {
    proxy(new org.apache.http.client.utils.URIBuilder().setHost(host).setPort(port).setScheme(scheme).build())
  }

  RequestSpecification proxy(URI uri) {
    notNull(uri, URI.class)
    proxy(new ProxySpecification(uri.host, uri.port, uri.scheme));
  }

  RequestSpecification proxy(ProxySpecification proxySpecification) {
    notNull(proxySpecification, ProxySpecification.class)
    this.proxySpecification = proxySpecification
    this
  }

  RequestSpecification body(byte[] body) {
    notNull body, "body"
    this.requestBody = body;
    return this;
  }

  RequestSpecification body(File body) {
    notNull body, "body"
    this.requestBody = body;
    return this;
  }

  RequestSpecification body(InputStream body) {
    notNull body, "body"
    this.requestBody = body;
    return this;
  }

  RequestSpecification body(Object object) {
    notNull object, "object"
    if (!isSerializableCandidate(object)) {
      return body(object.toString());
    }

    this.requestBody = ObjectMapping.serialize(object, requestContentType, findEncoderCharsetOrReturnDefault(requestContentType), null, objectMappingConfig(), restAssuredConfig().getEncoderConfig());
    this
  }

  RequestSpecification body(Object object, ObjectMapper mapper) {
    notNull object, "object"
    notNull mapper, "Object mapper"
    def ctx = new ObjectMapperSerializationContextImpl();
    ctx.setObject(object)
    ctx.setCharset(findEncoderCharsetOrReturnDefault(requestContentType))
    ctx.setContentType(requestContentType)
    this.requestBody = mapper.serialize(ctx);
    this
  }

  RequestSpecification body(Object object, ObjectMapperType mapperType) {
    notNull object, "object"
    notNull mapperType, "Object mapper type"
    this.requestBody = ObjectMapping.serialize(object, requestContentType, findEncoderCharsetOrReturnDefault(requestContentType), mapperType, objectMappingConfig(), restAssuredConfig().getEncoderConfig())
    this
  }

  RequestSpecification contentType(ContentType contentType) {
    notNull contentType, ContentType.class
    header(CONTENT_TYPE, contentType)
  }

  RequestSpecification contentType(String contentType) {
    notNull contentType, "Content-Type header cannot be null"
    header(CONTENT_TYPE, contentType)
  }

  RequestSpecification accept(ContentType contentType) {
    notNull contentType, "Accept header"
    accept(contentType.getAcceptHeader())
  }

  RequestSpecification accept(String mediaTypes) {
    notNull mediaTypes, "Accept header media range"
    header(ACCEPT_HEADER_NAME, mediaTypes)
  }

  RequestSpecification headers(Map headers) {
    notNull headers, "headers"
    def headerList = []
    if (this.requestHeaders.exist()) {
      headerList.addAll(this.requestHeaders.list())
    }
    headers.each {
      if (it.value instanceof List) {
        it.value.each { val ->
          headerList << new Header(it.key, serializeIfNeeded(val))
        }
      } else {
        headerList << new Header(it.key, serializeIfNeeded(it.value))
      }
    }
    headerList = removeMergedHeadersIfNeeded(headerList)
    this.requestHeaders = new Headers(headerList)
    return this;
  }

  RequestSpecification headers(Headers headers) {
    notNull headers, "headers"
    if (headers.exist()) {
      def headerList = []
      if (this.requestHeaders.exist()) {
        headerList.addAll(this.requestHeaders.list())
      }

      headerList.addAll(headers.headers.list())
      headerList = removeMergedHeadersIfNeeded(headerList)
      this.requestHeaders = new Headers(headerList)
    }
    this
  }

  private List removeMergedHeadersIfNeeded(List headerList) {
    def headers = headerList.inject([], { acc, header ->
      def headerConfig = restAssuredConfig().getHeaderConfig()
      String headerName = header.getName()
      if (headerConfig.shouldOverwriteHeaderWithName(headerName)) {
        acc = acc.findAll { !headerName.equalsIgnoreCase(it.getName()) }
      }
      acc.add(header)
      acc
    })
    headers
  }

  RequestSpecification header(String headerName, Object headerValue, Object... additionalHeaderValues) {
    notNull headerName, "Header name"
    notNull headerValue, "Header value"

    def headerList = [new Header(headerName, serializeIfNeeded(headerValue))]
    additionalHeaderValues?.each {
      headerList << new Header(headerName, serializeIfNeeded(it))
    }

    return headers(new Headers(headerList))
  }

  RequestSpecification header(Header header) {
    notNull header, "Header"

    return headers(new Headers(asList(header)));
  }

  RequestSpecification headers(String firstHeaderName, Object firstHeaderValue, Object... headerNameValuePairs) {
    return headers(MapCreator.createMapFromParams(CollisionStrategy.MERGE, firstHeaderName, firstHeaderValue, headerNameValuePairs))
  }

  RequestSpecification cookies(String firstCookieName, Object firstCookieValue, Object... cookieNameValuePairs) {
    return cookies(MapCreator.createMapFromParams(CollisionStrategy.OVERWRITE, firstCookieName, firstCookieValue, cookieNameValuePairs))
  }

  RequestSpecification cookies(Map cookies) {
    notNull cookies, "cookies"
    def cookieList = []
    if (this.cookies.exist()) {
      cookieList.addAll(this.cookies.list())
    }
    cookies.each {
      cookieList << new Cookie.Builder(it.key, it.value).build();
    }
    this.cookies = new Cookies(cookieList)
    return this;
  }

  RequestSpecification cookies(Cookies cookies) {
    notNull cookies, "cookies"
    if (cookies.exist()) {
      def cookieList = []
      if (this.cookies.exist()) {
        cookieList.addAll(this.cookies.list())
      }

      cookieList.addAll(cookies.cookies.list())
      this.cookies = new Cookies(cookieList)
    }
    this
  }

  RequestSpecification cookie(String cookieName, Object value, Object... additionalValues) {
    notNull cookieName, "Cookie name"
    def cookieList = [new Cookie.Builder(cookieName, serializeIfNeeded(value)).build()]
    additionalValues?.each {
      cookieList << new Cookie.Builder(cookieName, serializeIfNeeded(it)).build()
    }

    return cookies(new Cookies(cookieList))
  }

  RequestSpecification cookie(Cookie cookie) {
    notNull cookie, "Cookie"
    return cookies(new Cookies(asList(cookie)));
  }

  RequestSpecification cookie(String cookieName) {
    cookie(cookieName, null)
  }

  RedirectSpecification redirects() {
    new RedirectSpecificationImpl(this, httpClientParams)
  }

  RequestSpecification spec(RequestSpecification requestSpecificationToMerge) {
    SpecificationMerger.merge this, requestSpecificationToMerge
    return this
  }

  RequestSpecification specification(RequestSpecification requestSpecificationToMerge) {
    return spec(requestSpecificationToMerge)
  }

  RequestSpecification sessionId(String sessionIdValue) {
    def sessionIdName = config == null ? SessionConfig.DEFAULT_SESSION_ID_NAME : config.getSessionConfig().sessionIdName()
    sessionId(sessionIdName, sessionIdValue)
  }

  RequestSpecification sessionId(String sessionIdName, String sessionIdValue) {
    notNull(sessionIdName, "Session id name")
    notNull(sessionIdValue, "Session id value")
    if (cookies.hasCookieWithName(sessionIdName)) {
      def allOtherCookies = cookies.findAll { !it.getName().equalsIgnoreCase(sessionIdName) }
      allOtherCookies.add(new Cookie.Builder(sessionIdName, sessionIdValue).build());
      this.cookies = new Cookies(allOtherCookies)
    } else {
      cookie(sessionIdName, sessionIdValue)
    }
    this
  }

  RequestSpecification multiPart(MultiPartSpecification multiPartSpec) {
    notNull multiPartSpec, "Multi-part specification"
    def mimeType = multiPartSpec.mimeType
    def content
    if (multiPartSpec.content instanceof File || multiPartSpec.content instanceof InputStream || multiPartSpec.content instanceof byte[]) {
      content = multiPartSpec.content
    } else {
      // Objects ought to be serialized
      if (mimeType == null) {
        mimeType = ANY.matches(requestContentType) ? JSON.toString() : requestContentType
      }
      content = serializeIfNeeded(multiPartSpec.content, mimeType)
    }

    final String controlName;
    if (multiPartSpec instanceof MultiPartSpecificationImpl && !multiPartSpec.isControlNameSpecifiedExplicitly()) {
      // We use the default control name if it was not explicitly specified in the multi-part spec
      controlName = restAssuredConfig().getMultiPartConfig().defaultControlName()
    } else {
      controlName = multiPartSpec.controlName
    }

    final String fileName;
    if (multiPartSpec instanceof MultiPartSpecificationImpl && !multiPartSpec.isFileNameSpecifiedExplicitly()) {
      // We use the default file name if it was not explicitly specified in the multi-part spec
      fileName = restAssuredConfig().getMultiPartConfig().defaultFileName()
    } else {
      fileName = multiPartSpec.fileName
    }

    def headers = multiPartSpec.headers

    multiParts << new MultiPartInternal(controlName: controlName, content: content, fileName: fileName, charset: multiPartSpec.charset, mimeType: mimeType, headers: headers)
    return this
  }

  RequestSpecification multiPart(String controlName, File file) {
    multiParts << new MultiPartInternal(controlName: controlName, content: file, fileName: file.getName())
    this
  }

  RequestSpecification multiPart(File file) {
    multiParts << new MultiPartInternal(controlName: restAssuredConfig().getMultiPartConfig().defaultControlName(), content: file, fileName: file.getName())
    this
  }

  RequestSpecification multiPart(String controlName, File file, String mimeType) {
    multiParts << new MultiPartInternal(controlName: controlName, content: file, mimeType: mimeType, fileName: file.getName())
    this
  }

  RequestSpecification multiPart(String controlName, Object object) {
    def mimeType = ANY.matches(requestContentType) ? JSON.toString() : requestContentType
    return multiPart(controlName, object, mimeType)
  }

  RequestSpecification multiPart(String controlName, Object object, String mimeType) {
    def possiblySerializedObject = serializeIfNeeded(object, mimeType)
    multiParts << new MultiPartInternal(controlName: controlName, content: possiblySerializedObject, mimeType: mimeType, fileName: restAssuredConfig().getMultiPartConfig().defaultFileName())
    this
  }

  RequestSpecification multiPart(String controlName, String filename, Object object, String mimeType) {
    def possiblySerializedObject = serializeIfNeeded(object, mimeType)
    multiParts << new MultiPartInternal(controlName: controlName, content: possiblySerializedObject, mimeType: mimeType, fileName: filename)
    this
  }

  RequestSpecification multiPart(String name, String fileName, byte[] bytes) {
    multiParts << new MultiPartInternal(controlName: name, content: bytes, fileName: fileName)
    this
  }

  RequestSpecification multiPart(String name, String fileName, byte[] bytes, String mimeType) {
    multiParts << new MultiPartInternal(controlName: name, content: bytes, mimeType: mimeType, fileName: fileName)
    this
  }

  RequestSpecification multiPart(String name, String fileName, InputStream stream) {
    multiParts << new MultiPartInternal(controlName: name, content: stream, fileName: fileName)
    this
  }

  RequestSpecification multiPart(String name, String fileName, InputStream stream, String mimeType) {
    multiParts << new MultiPartInternal(controlName: name, content: stream, mimeType: mimeType, fileName: fileName)
    this
  }

  RequestSpecification multiPart(String name, String contentBody) {
    multiParts << new MultiPartInternal(controlName: name, content: contentBody, fileName: restAssuredConfig().getMultiPartConfig().defaultFileName())
    this
  }

  RequestSpecification multiPart(String name, NoParameterValue contentBody) {
    multiParts << new MultiPartInternal(controlName: name, content: contentBody, fileName: restAssuredConfig().getMultiPartConfig().defaultFileName())
    this
  }

  RequestSpecification multiPart(String name, String contentBody, String mimeType) {
    multiParts << new MultiPartInternal(controlName: name, content: contentBody, mimeType: mimeType, fileName: restAssuredConfig().getMultiPartConfig().defaultFileName())
    this
  }

  def newFilterContext(assertionClosure, filters, properties) {
    if (path?.endsWith("?")) {
      throw new IllegalArgumentException("Request URI cannot end with ?");
    }

    // Set default accept header if undefined
    if (!headers.hasHeaderWithName(ACCEPT_HEADER_NAME)) {
      header(ACCEPT_HEADER_NAME, ANY.getAcceptHeader())
    }

    def tempContentType = defineRequestContentTypeAsString(method)
    if (tempContentType != null) {
      header(CONTENT_TYPE, tempContentType)
    }

    def unnamedPathParamValues = unnamedPathParamsTuples.findAll { it.second != null }.collect { it.second }
    def uri = partiallyApplyPathParams(path, true, unnamedPathParamValues)
    String requestUriForLogging = generateRequestUriForLogging(uri, method)

    new FilterContextImpl(requestUriForLogging, getUserDefinedPath(), getDerivedPath(uri), uri, path, unnamedPathParamValues.toArray(), method, assertionClosure, filters, properties);
  }

  private String generateRequestUriForLogging(uri, method) {
    def targetUri
    def allQueryParams = [:]

    if (uri.contains("?")) {
      def uriToUse
      if (isFullyQualified(uri)) {
        uriToUse = uri
      } else {
        uriToUse = getTargetPath(uri)
      }

      targetUri = substringBefore(uriToUse, "?")
      def queryParamsDefinedInPath = substringAfter(uri, "?")

      // Add query parameters defined in path to the allQueryParams map
      if (!isBlank(queryParamsDefinedInPath)) {
        def splittedQueryParams = split(queryParamsDefinedInPath, "&");
        splittedQueryParams.each { queryNameWithPotentialValue ->
          String[] splitted = split(queryNameWithPotentialValue, "=", 2)
          def queryParamHasValueDefined = splitted.size() > 1 || queryNameWithPotentialValue.contains("=")
          if (queryParamHasValueDefined) {
            // Handles the special case where the query param is defined with an empty value
            def value = splitted.size() == 1 ? "" : splitted[1]
            allQueryParams.put(splitted[0], value)
          } else {
            allQueryParams.put(splitted[0], new NoParameterValue());
          }
        }
      }
    } else {
      targetUri = uri
    }

    def actualUri = URIBuilder.convertToURI(assembleCompleteTargetPath(targetUri))
    def uriBuilder = new URIBuilder(actualUri, this.urlEncodingEnabled, encoderConfig())

    if (!POST.name().equalsIgnoreCase(method) && !requestParameters?.isEmpty()) {
      allQueryParams << requestParameters
    }

    if (!queryParameters?.isEmpty()) {
      allQueryParams << queryParameters
    }

    if (GET.name().equalsIgnoreCase(method) && !formParameters?.isEmpty()) {
      allQueryParams << formParameters
    }

    if (!allQueryParams.isEmpty()) {
      uriBuilder.addQueryParams(allQueryParams)
    }

    def requestUriForLogging = uriBuilder.toString()
    requestUriForLogging
  }

  @SuppressWarnings("GroovyUnusedDeclaration")
  private
  Response sendRequest(path, assertionClosure, FilterableRequestSpecification requestSpecification, Map filterContextProperties) {
    notNull path, "Path"
    path = extractRequestParamsIfNeeded(path);
    def method = requestSpecification.getMethod()
    def targetUri = getTargetURI(path);
    def targetPath = getTargetPath(path)

    assertCorrectNumberOfPathParams()

    if (!requestSpecification.getHttpClient() instanceof AbstractHttpClient) {
      throw new IllegalStateException(format("Unfortunately Rest Assured only supports Http Client instances of type %s.", AbstractHttpClient.class.getName()));
    }

    def http = new RestAssuredHttpBuilder(targetUri, assertionClosure, urlEncodingEnabled, config, requestSpecification.getHttpClient() as AbstractHttpClient);
    applyProxySettings(http)
    applyRestAssuredConfig(http)
    registerRestAssuredEncoders(http);
    setRequestHeadersToHttpBuilder(http)

    if (cookies.exist()) {
      http.getHeaders() << [Cookie: cookies.collect { it.name + "=" + it.value }.join("; ")]
    }

    // Allow returning a the response
    def restAssuredResponse = new RestAssuredResponseImpl(logRepository: logRepository)
    RestAssuredConfig cfg = config ?: new RestAssuredConfig();
    restAssuredResponse.setSessionIdName(cfg.getSessionConfig().sessionIdName())
    restAssuredResponse.setDecoderConfig(cfg.getDecoderConfig())
    restAssuredResponse.setConnectionManager(http.client.connectionManager)
    restAssuredResponse.setConfig(cfg)
    restAssuredResponse.setFilterContextProperties(filterContextProperties)
    responseSpecification.restAssuredResponse = restAssuredResponse
    def acceptContentType = assertionClosure.getResponseContentType()

    if (shouldApplySSLConfig(http, cfg)) {
      def sslConfig = cfg.getSSLConfig();
      new CertAuthScheme(pathToKeyStore: sslConfig.getPathToKeyStore(), keyStorePassword: sslConfig.getKeyStorePassword(),
              keystoreType: sslConfig.getKeyStoreType(), keyStore: sslConfig.getKeyStore(),
              pathToTrustStore: sslConfig.getPathToTrustStore(), trustStorePassword: sslConfig.getTrustStorePassword(),
              trustStoreType: sslConfig.getTrustStoreType(), trustStore: sslConfig.getTrustStore(),
              port: sslConfig.getPort(), sslSocketFactory: sslConfig.getSSLSocketFactory(), x509HostnameVerifier: sslConfig.getX509HostnameVerifier())
              .authenticate(http)
    }

    authenticationScheme.authenticate(http)

    if (mayHaveBody(method)) {
      if (hasFormParams() && requestBody != null) {
        throw new IllegalStateException("You can either send form parameters OR body content in $method, not both!");
      }
      def bodyContent = createFormParamBodyContent(assembleBodyContent(method))
      if (POST.name().equalsIgnoreCase(method)) {
        http.post(path: targetPath, body: bodyContent,
                requestContentType: requestHeaders.getValue(CONTENT_TYPE),
                contentType: acceptContentType) { response, content ->
          if (assertionClosure != null) {
            assertionClosure.call(response, content)
          }
        }
      } else if (PATCH.name().equalsIgnoreCase(method)) {
        http.patch(path: targetPath, body: bodyContent,
                requestContentType: requestHeaders.getValue(CONTENT_TYPE),
                contentType: acceptContentType) { response, content ->
          if (assertionClosure != null) {
            assertionClosure.call(response, content)
          }
        }
      } else {
        requestBody = bodyContent
        sendHttpRequest(http, method, acceptContentType, targetPath, assertionClosure)
      }
    } else {
      sendHttpRequest(http, method, acceptContentType, targetPath, assertionClosure)
    }
    return restAssuredResponse
  }

  void assertCorrectNumberOfPathParams() {
    // Path param size is named - (unnamed - named) since named path params may override unnamed if they target the same placeholder
    if (!getRedundantNamedPathParams().isEmpty() || !getRedundantUnnamedPathParamValues().isEmpty() || !getUndefinedPathParamPlaceholders().isEmpty()) {
      def pathParamPlaceholderSize = getPathParamPlaceholders().size()
      def namedPathParams = getNamedPathParams()
      def pathParamSize = namedPathParams.size() + unnamedPathParamsTuples.findAll { it.second != null }.findAll {
        !namedPathParams.containsKey(it.second)
      }.size()

      def redundantNamedPathParams = getRedundantNamedPathParams()
      def redundantUnnamedPathParamValues = getRedundantUnnamedPathParamValues()
      def hasRedundantNamedPathParams = redundantNamedPathParams.size() > 0
      def hasRedundantUnnamedPathParamValues = redundantUnnamedPathParamValues.size() > 0

      final String message
      if (pathParamPlaceholderSize != pathParamSize) {
        message = "Invalid number of path parameters. Expected ${pathParamPlaceholderSize}, was ${pathParamSize}."
      } else {
        message = "Path parameters were not correctly defined."
      }

      String redundantMessage = ""
      if (hasRedundantNamedPathParams || hasRedundantUnnamedPathParamValues) {
        redundantMessage = " Redundant path parameters are: "

        if (hasRedundantNamedPathParams) {
          redundantMessage += "${redundantNamedPathParams.entrySet().join(", ")}"
        }
        if (hasRedundantNamedPathParams && hasRedundantUnnamedPathParamValues) {
          redundantMessage += " and "
        } else if (hasRedundantNamedPathParams && !hasRedundantUnnamedPathParamValues) {
          redundantMessage += "."
        }
        if (hasRedundantUnnamedPathParamValues) {
          redundantMessage += "${redundantUnnamedPathParamValues.join(", ")}."
        }
      }

      String undefinedMessage = ""
      if (!getUndefinedPathParamPlaceholders().isEmpty()) {
        undefinedMessage = " Undefined path parameters are: ${getUndefinedPathParamPlaceholders().join(", ")}."
      }

      throw new IllegalArgumentException("${message}${redundantMessage}${undefinedMessage}")
    }
  }

  boolean shouldApplySSLConfig(http, RestAssuredConfig cfg) {
    URI uri = ((URIBuilder) http.getUri()).toURI();
    if (uri == null) throw new IllegalStateException("a default URI must be set");
    uri.getScheme()?.toLowerCase() == "https" && cfg.getSSLConfig().isUserConfigured() && !(authenticationScheme instanceof CertAuthScheme)
  }

  def applyRestAssuredConfig(HTTPBuilder http) {
    // Decoder config should always be applied regardless if restAssuredConfig is null or not because
    // by default we should support GZIP and DEFLATE decoding.
    applyContentDecoders(http, (restAssuredConfig?.getDecoderConfig() ?: new DecoderConfig()).contentDecoders());
    if (restAssuredConfig != null) {
      applyRedirectConfig(restAssuredConfig.getRedirectConfig())
      applyHttpClientConfig(restAssuredConfig.getHttpClientConfig())
      applyEncoderConfig(http, restAssuredConfig.getEncoderConfig())
      applySessionConfig(restAssuredConfig.getSessionConfig())
    }
    if (!httpClientParams.isEmpty()) {
      def p = http.client.getParams();

      httpClientParams.each { key, value ->
        p.setParameter(key, value)
      }
    }
  }

  private def applyContentDecoders(HTTPBuilder httpBuilder, List<DecoderConfig.ContentDecoder> contentDecoders) {
    def httpBuilderContentEncoders = contentDecoders.collect { contentDecoder -> ContentEncoding.Type.valueOf(contentDecoder.toString()) }.toArray()
    httpBuilder.setContentEncoding(httpBuilderContentEncoders)
  }

  def applySessionConfig(SessionConfig sessionConfig) {
    if (sessionConfig.isSessionIdValueDefined() && !cookies.hasCookieWithName(sessionConfig.sessionIdName())) {
      cookie(sessionConfig.sessionIdName(), sessionConfig.sessionIdValue())
    }
  }

  def applyEncoderConfig(HTTPBuilder httpBuilder, EncoderConfig encoderConfig) {
    httpBuilder.encoders.setEncoderConfig(encoderConfig)
  }

  def applyHttpClientConfig(HttpClientConfig httpClientConfig) {
    ([:].plus(httpClientConfig.params())).each { key, value ->
      putIfAbsent(httpClientParams, key, value)
    }
  }

  def applyRedirectConfig(RedirectConfig redirectConfig) {
    putIfAbsent(httpClientParams, ALLOW_CIRCULAR_REDIRECTS, redirectConfig.allowsCircularRedirects())
    putIfAbsent(httpClientParams, HANDLE_REDIRECTS, redirectConfig.followsRedirects())
    putIfAbsent(httpClientParams, MAX_REDIRECTS, redirectConfig.maxRedirects())
    putIfAbsent(httpClientParams, REJECT_RELATIVE_REDIRECT, redirectConfig.rejectRelativeRedirects())
  }

  private def putIfAbsent(Map map, key, value) {
    if (!map.containsKey(key)) {
      map.put(key, value)
    }
  }

  def assembleBodyContent(httpMethod) {
    if (hasFormParams() && !GET.name().equalsIgnoreCase(httpMethod)) {
      if (POST.name().equalsIgnoreCase(httpMethod)) {
        mergeMapsAndRetainOrder(requestParameters, formParameters)
      } else {
        formParameters
      }
    } else if (multiParts.isEmpty()) {
      requestBody
    } else {
      new byte[0]
    }
  }

  def mergeMapsAndRetainOrder(Map<String, Object> map1, Map<String, Object> map2) {
    def newMap = new LinkedHashMap()
    newMap.putAll(map1)
    newMap.putAll(map2)
    newMap
  }

  def setRequestHeadersToHttpBuilder(HTTPBuilder http) {
    def httpHeaders = http.getHeaders();
    requestHeaders.each { header ->
      def headerName = header.getName()
      def headerValue = header.getValue()
      if (httpHeaders.containsKey(headerName)) {
        def values = [httpHeaders.get(headerName)];
        values << headerValue
        def headerVal = values.flatten()
        httpHeaders.put(headerName, headerVal)
      } else {
        httpHeaders.put(headerName, headerValue)
      }
    }
  }

  private def createFormParamBodyContent(bodyContent) {
    return bodyContent instanceof Map ? createFormParamBody(bodyContent) : bodyContent
  }

  private String getTargetPath(String path) {
    if (isFullyQualified(path)) {
      return new URL(path).getPath()
    }

    def baseUriPath = ""
    if (!(baseUri == null || baseUri == "")) {
      def uri = new URI(baseUri)
      baseUriPath = uri.getPath()
    }
    return mergeAndRemoveDoubleSlash(mergeAndRemoveDoubleSlash(baseUriPath, basePath), path)
  }

  private def registerRestAssuredEncoders(HTTPBuilder http) {
    // Multipart form-data
    if (multiParts.isEmpty()) {
      return;
    }

    if (hasFormParams()) {
      convertFormParamsToMultiPartParams()
    }

    def contentTypeAsString = headers.getValue(CONTENT_TYPE)
    def ct = ContentTypeExtractor.getContentTypeWithoutCharset(contentTypeAsString)
    def subType;
    if (ct?.toLowerCase()?.startsWith(MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH)) {
      subType = substringAfter(ct, MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH)
    } else if (ct?.toLowerCase()?.contains(MULTIPART_CONTENT_TYPE_PREFIX_WITH_PLUS)) {
      subType = substringBefore(substringAfter(ct, MULTIPART_CONTENT_TYPE_PREFIX_WITH_PLUS), "+")
    } else {
      throw new IllegalArgumentException("Content-Type $ct is not valid when using multiparts, it must start with \"$MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH\" or contain \"$MULTIPART_CONTENT_TYPE_PREFIX_WITH_PLUS\".");
    }

    def charsetFromContentType = CharsetExtractor.getCharsetFromContentType(contentTypeAsString)
    def charsetToUse = isBlank(charsetFromContentType) ? restAssuredConfig().getMultiPartConfig().defaultCharset() : charsetFromContentType
    def boundaryFromContentType = BoundaryExtractor.getBoundaryFromContentType(contentTypeAsString)
    String boundaryToUse = boundaryFromContentType ?: restAssuredConfig().getMultiPartConfig().defaultBoundary()
    boundaryToUse = boundaryToUse ?: generateBoundary()
    if (!boundaryFromContentType) {
      removeHeader(CONTENT_TYPE) // there should only be one
      contentType(contentTypeAsString + "; boundary=\"" + boundaryToUse + "\"")
    }

    def multipartMode = httpClientConfig().httpMultipartMode()
    // For "defaultCharset" to be taken into account we need to 

    http.encoders.putAt ct, { contentType, content ->
      RestAssuredMultiPartEntity entity = new RestAssuredMultiPartEntity(subType, charsetToUse, multipartMode, boundaryToUse);

      multiParts.each {
        def body = it.contentBody
        def controlName = it.controlName
        def headers = it.headers
        if (headers.isEmpty()) {
          entity.addPart(controlName, body);
        } else {
          def builder = FormBodyPartBuilder.create(controlName, body)
          headers.each { name, value ->
            builder.addField(name, value)
          }
          entity.addPart(builder.build())
        }
      }

      entity;
    }
  }

  private static String generateBoundary() {
    def alphabet = (('a'..'z') + ('A'..'Z') + ('0'..'9') + '-' + '_').join()
    def rand = new Random()
    def length = rand.nextInt(11) + 30
    (1..length).collect {
      alphabet[rand.nextInt(alphabet.length())]
    }.join()
  }

  private def convertFormParamsToMultiPartParams() {
    def allFormParams = mergeMapsAndRetainOrder(requestParameters, formParameters)
    allFormParams.each {
      if (it.value instanceof List) {
        it.value.each { val ->
          multiPart(it.key, val)
        }
      } else {
        multiPart(it.key, it.value)
      }
    }
    requestParameters.clear()
    formParameters.clear()
  }

  private def sendHttpRequest(HTTPBuilder http, String method, responseContentType, targetPath, assertionClosure) {
    def allQueryParams = mergeMapsAndRetainOrder(requestParameters, queryParameters)
    if (method.equals(GET.name())) {
      allQueryParams = mergeMapsAndRetainOrder(allQueryParams, formParameters)
    }
    def hasBody = (requestBody != null)
    http.request(method, responseContentType, hasBody) {
      uri.path = targetPath

      setRequestContentType(defineRequestContentTypeAsString(method))

      if (hasBody) {
        body = requestBody
      }

      uri.query = allQueryParams

      Closure closure = assertionClosure.getClosure()
      // response handler for a success response code:
      response.success = closure

      // handler for any failure status code:
      response.failure = closure
    }
  }

  private boolean hasFormParams() {
    return !(requestParameters.isEmpty() && formParameters.isEmpty())
  }

  private boolean mayHaveBody(method) {
    return POST.name().equals(method) || formParameters.size() > 0 || multiParts.size() > 0
  }

  private String extractRequestParamsIfNeeded(String path) {
    if (path.contains("?")) {
      def indexOfQuestionMark = path.indexOf("?")
      String allParamAsString = path.substring(indexOfQuestionMark + 1);
      def keyValueParams = allParamAsString.split("&");
      keyValueParams.each {
        def keyValue = split(it, "=", 2)
        def theKey;
        def theValue;
        if (keyValue.length < 1 || keyValue.length > 2) {
          throw new IllegalArgumentException("Illegal parameters passed to REST Assured. Parameters was: $keyValueParams")
        } else if (keyValue.length == 1) {
          theKey = keyValue[0]
          theValue = it.contains("=") ? "" : new NoParameterValue();
        } else {
          theKey = keyValue[0]
          theValue = keyValue[1]
        }
        queryParam(theKey, theValue)
      };
      path = path.substring(0, indexOfQuestionMark);
    }
    return path;
  }

  private def defineRequestContentTypeAsString(String method) {
    return defineRequestContentType(method)?.toString()
  }

  private def defineRequestContentType(String method) {
    def contentType = headers.getValue(CONTENT_TYPE)
    if (contentType == null) {
      if (multiParts.size() > 0) {
        contentType = MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH + restAssuredConfig().getMultiPartConfig().defaultSubtype()
      } else if (GET.name().equals(method) && !formParameters.isEmpty()) {
        contentType = URLENC
      } else if (requestBody == null) {
        contentType = mayHaveBody(method) ? URLENC : null
      } else if (requestBody instanceof byte[]) {
        contentType = BINARY
      } else {
        contentType = TEXT
      }
    }

    if (shouldAppendCharsetToContentType(contentType)) {
      def charset = findEncoderCharsetOrReturnDefault(contentType.toString())
      if (contentType instanceof String) {
        contentType = contentType + "; " + CHARSET + "=" + charset
      } else {
        contentType = contentType.withCharset(charset)
      }
    }
    contentType
  }

  private boolean shouldAppendCharsetToContentType(contentType) {
    contentType != null && !(startsWith(contentType.toString(), MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH) || contains(contentType.toString(), MULTIPART_CONTENT_TYPE_PREFIX_WITH_PLUS)) && restAssuredConfig().encoderConfig.shouldAppendDefaultContentCharsetToContentTypeIfUndefined() && !containsIgnoreCase(contentType.toString(), CHARSET)
  }

  private String getTargetURI(String path) {
    def uri
    def pathHasScheme = isFullyQualified(path)
    if (pathHasScheme) {
      def url = new URL(path)
      uri = getTargetUriFromUrl(url)
    } else if (isFullyQualified(baseUri)) {
      def baseUriAsUrl = new URL(baseUri)
      uri = getTargetUriFromUrl(baseUriAsUrl)
    } else if (port != RestAssured.UNDEFINED_PORT) {
      uri = "$baseUri:$port"
    } else {
      uri = "$baseUri"
    }
    return uri
  }

  private String getTargetUriFromUrl(URL url) {
    def protocol = url.getProtocol()
    boolean useDefaultHttps = false
    if (this.@port == RestAssured.UNDEFINED_PORT && protocol.equalsIgnoreCase("https")) {
      useDefaultHttps = true
    }

    def builder = new StringBuilder(protocol)
            .append("://")
            .append(url.getAuthority())

    def hasSpecifiedPortExplicitly = this.@port != RestAssured.UNDEFINED_PORT
    if (!hasPortDefined(url) && !useDefaultHttps) {
      if (hasSpecifiedPortExplicitly) {
        builder.append(":")
        builder.append(this.@port)
      } else if (!isFullyQualified(url.toString()) || hasAuthorityEqualToLocalhost(url)) {
        builder.append(":")
        builder.append(DEFAULT_HTTP_TEST_PORT)
      }
    }
    return builder.toString()
  }

  private boolean hasAuthorityEqualToLocalhost(uri) {
    uri.getAuthority().trim().equalsIgnoreCase(LOCALHOST)
  }

  private boolean hasPortDefined(uri) {
    return uri.getPort() != -1;
  }


  private def serializeIfNeeded(Object object) {
    serializeIfNeeded(object, requestContentType)
  }

  private def serializeIfNeeded(Object object, contentType) {
    isSerializableCandidate(object) ? ObjectMapping.serialize(object, contentType, findEncoderCharsetOrReturnDefault(contentType), null, objectMappingConfig(), restAssuredConfig().getEncoderConfig()) : object.toString()
  }

  private def applyPathParamsAndSendRequest(String method, String path, Object... unnamedPathParams) {
    notNull path, "path"
    notNull trimToNull(method), "Method"
    notNull unnamedPathParams, "Path params"
    this.method = method.trim().toUpperCase();
    this.path = path;
    if (unnamedPathParams != null) {
      def nullParamIndices = []
      for (int i = 0; i < unnamedPathParams.length; i++) {
        if (unnamedPathParams[i] == null) {
          nullParamIndices << i
        }
      }
      if (!nullParamIndices.isEmpty()) {
        def sizeOne = nullParamIndices.size() == 1
        throw new IllegalArgumentException("Unnamed path parameter cannot be null (path parameter${sizeOne ? "" : "s"} at ${sizeOne ? "index" : "indices"} ${nullParamIndices.join(",")} ${sizeOne ? "is" : "are"} null)");
      }

      buildUnnamedPathParameterTuples(unnamedPathParams)
    }
    if (authenticationScheme instanceof NoAuthScheme && !(defaultAuthScheme instanceof NoAuthScheme)) {
      // Use default auth scheme
      authenticationScheme = defaultAuthScheme
    }

    if (authenticationScheme instanceof FormAuthScheme) {
      // Form auth scheme is handled a bit differently than other auth schemes since it's implemented by a filter.
      def formAuthScheme = authenticationScheme as FormAuthScheme
      filters.removeAll { AuthFilter.class.isAssignableFrom(it.getClass()) }
      filters.add(0, new FormAuthFilter(userName: formAuthScheme.userName, password: formAuthScheme.password, formAuthConfig: formAuthScheme.config, sessionConfig: sessionConfig()))
    }
    def logConfig = restAssuredConfig().getLogConfig()
    if (logConfig.isLoggingOfRequestAndResponseIfValidationFailsEnabled()) {
      if (!filters.any { RequestLoggingFilter.class.isAssignableFrom(it.getClass()) }) {
        log().ifValidationFails(logConfig.logDetailOfRequestAndResponseIfValidationFails(), logConfig.isPrettyPrintingEnabled())
      }
      if (!filters.any { ResponseLoggingFilter.class.isAssignableFrom(it.getClass()) }) {
        responseSpecification.log().ifValidationFails(logConfig.logDetailOfRequestAndResponseIfValidationFails(), logConfig.isPrettyPrintingEnabled())
      }
    }
    restAssuredConfig = config ?: new RestAssuredConfig()

    if (!filters.any { ResponseLoggingFilter.class.isAssignableFrom(it.getClass()) } && responseSpecification?.getLogDetail()) {
      filters.add(new ResponseLoggingFilter(responseSpecification.getLogDetail(),
              logConfig.isPrettyPrintingEnabled(), logConfig.defaultStream()))
    }

    // Sort filters by order
    filters = filters.toSorted { f1, f2 -> getFilterOrder(f1) <=> getFilterOrder(f2) }

    // Add timing filter if it has not been added manually
    if (!filters*.getClass().any { TimingFilter.class.isAssignableFrom(it) }) {
      filters << new TimingFilter()
    }

    filters << new SendRequestFilter()
    def ctx = newFilterContext(responseSpecification.assertionClosure, filters.iterator(), [:])
    httpClient = httpClientConfig().httpClientInstance()
    def response = ctx.next(this, responseSpecification)
    responseSpecification.assertionClosure.validate(response)
    return response
  }

  private def applyPathParamsAndSendRequest(Method method, String path, Object... unnamedPathParams) {
    applyPathParamsAndSendRequest(notNull(method, Method.class).name(), path, unnamedPathParams)
  }

  void buildUnnamedPathParameterTuples(Object[] unnamedPathParameterValues) {
    if (unnamedPathParameterValues == null || unnamedPathParameterValues.length == 0) {
      this.unnamedPathParamsTuples = new ArrayList<Tuple2<String, String>>();
    } else {
      // Undefined placeholders since named path params have precedence over unnamed
      def keys = getUndefinedPathParamPlaceholders()
      List<Tuple2<String, String>> list = new ArrayList<>()
      for (int i = 0; i < unnamedPathParameterValues.length; i++) {
        def val = serializeIfNeeded(unnamedPathParameterValues[i])
        def key = i < keys.size() ? keys.get(i) : null
        list.add(new Tuple2<String, String>(key, val))
      }
      this.unnamedPathParamsTuples = list
    }
  }

  String partiallyApplyPathParams(String path, boolean encodePath, List<String> unnamedPathParams) {
    def unnamedPathParamSize = unnamedPathParams?.size() ?: 0

    def host = getTargetURI(path)
    def targetPath = getTargetPath(path)

    def pathWithoutQueryParams = substringBefore(targetPath, "?");
    def shouldAppendSlashAfterEncoding = pathWithoutQueryParams.endsWith("/")
    // The last slash is removed later so we may need to add it again
    def queryParams = substringAfter(path, "?")

    int numberOfUnnamedPathParametersUsed = 0;
    def pathParamNameUsageCount = [:].withDefault { 0 }

    def pathTemplate = ~/.*\{\w+\}.*/
    // If a path fragment contains double slash we need to replace it with something else to not mess up the path
    def hasPathParameterWithDoubleSlash = indexOf(pathWithoutQueryParams, DOUBLE_SLASH) != -1

    def tempParams;
    if (hasPathParameterWithDoubleSlash) {
      tempParams = replace(pathWithoutQueryParams, DOUBLE_SLASH, "RA_double_slash__");
    } else {
      tempParams = pathWithoutQueryParams
    }

    def pathParamFiller = { String separator, boolean performEncode, String acc, String subresource ->
      def indexOfStartBracket
      def indexOfEndBracket = 0
      while ((indexOfStartBracket = subresource.indexOf(TEMPLATE_START, indexOfEndBracket)) >= 0) {
        indexOfEndBracket = subresource.indexOf(TEMPLATE_END, indexOfStartBracket)
        // 3 means "{" and "}" and at least one character
        if (indexOfStartBracket >= 0 && indexOfEndBracket >= 0 && subresource.length() >= 3) {
          def pathParamValue
          def pathParamName = subresource.substring(indexOfStartBracket + 1, indexOfEndBracket)
          // Get path parameter name, what's between the "{" and "}"
          def value = findNamedPathParamValue(pathParamName, pathParamNameUsageCount)
          if (value == null && numberOfUnnamedPathParametersUsed < unnamedPathParamSize && unnamedPathParams[numberOfUnnamedPathParametersUsed].toString() != null) {
            pathParamValue = unnamedPathParams[numberOfUnnamedPathParametersUsed].toString()
            numberOfUnnamedPathParametersUsed += 1
          } else {
            // We return the template again if no match found since we might be interested in partially applied path
            pathParamValue = value == null ? TEMPLATE_START + pathParamName + TEMPLATE_END : value
          }

          def pathToPrepend = ""
          // If declared subresource has values before the first bracket then let's find it.
          if (indexOfStartBracket != 0) {
            pathToPrepend = subresource.substring(0, indexOfStartBracket)
          }

          def pathToAppend = ""
          // If declared subresource has values after the first bracket then let's find it.
          if (subresource.length() > indexOfEndBracket) {
            pathToAppend = subresource.substring(indexOfEndBracket + 1, subresource.length())
          }

          // Since the value of the path parameter might be shorter than the template name we need to
          // adjust the "indexOfEndBracket" index in case this subresource contains more templates after
          // this value.
          def lengthOfTemplate = length(pathParamName) + 2 // 2 because "{" and "}"
          def lengthOfValue = length(pathParamValue)
          if (lengthOfTemplate != lengthOfValue) {
            if (lengthOfTemplate > lengthOfValue) {
              indexOfEndBracket -= (lengthOfTemplate - lengthOfValue)
            } else {
              indexOfEndBracket += (lengthOfValue - lengthOfTemplate)
            }
          }

          subresource = pathToPrepend + pathParamValue + pathToAppend
        }
      }
      format("%s${separator}%s", acc, performEncode ? encode(subresource, EncodingTarget.QUERY) : subresource).toString()
    }

    pathWithoutQueryParams = split(tempParams, "/").inject("", pathParamFiller.curry("/", encodePath))

    if (hasPathParameterWithDoubleSlash) {
      // Now get the double slash replacement back to normal double slashes
      pathWithoutQueryParams = replace(pathWithoutQueryParams, "RA_double_slash__", encode(DOUBLE_SLASH, EncodingTarget.QUERY))
    }

    if (shouldAppendSlashAfterEncoding) {
      pathWithoutQueryParams += "/"
    }

    if (queryParams.matches(pathTemplate)) {
      // Note that we do NOT url encode query params here, that happens by UriBuilder at a later stage.
      queryParams = split(queryParams, "&").inject("", pathParamFiller.curry("&", false)).substring(1)
      // 1 means that we remove first & since query parameters starts with ?

    }
    host + (isEmpty(queryParams) ? pathWithoutQueryParams : pathWithoutQueryParams + "?" + queryParams)
  }


  private String findNamedPathParamValue(String pathParamName, pathParamNameUsageCount) {
    def pathParamValues = this.namedPathParameters.get(pathParamName);
    def pathParamValue
    if (pathParamValues instanceof Collection) {
      def pathParamCount = pathParamNameUsageCount[pathParamName]
      pathParamNameUsageCount[pathParamName] = pathParamCount++
      pathParamValue = pathParamValues.get(pathParamCount)
    } else {
      pathParamValue = pathParamValues
    }
    pathParamValue?.toString()
  }

  private String createFormParamBody(Map<String, Object> formParams) {
    final StringBuilder body = new StringBuilder();
    for (Entry<String, Object> entry : formParams.entrySet()) {
      body.append(encode(entry.getKey(), EncodingTarget.BODY));
      if (!(entry.getValue() instanceof NoParameterValue)) {
        body.append("=").append(handleMultiValueParamsIfNeeded(entry));
      }
      body.append("&");
    }
    if (!formParams.isEmpty()) {
      body.deleteCharAt(body.length() - 1); //Delete last &
    }
    return body.toString();
  }


  private String encode(Object string, EncodingTarget encodingType) {
    string = string.toString()
    if (urlEncodingEnabled) {
      def charset
      if (encodingType == EncodingTarget.BODY) {
        charset = encoderConfig().defaultContentCharset()
        def contentType = headers.getValue(CONTENT_TYPE)
        if (contentType instanceof String) {
          def tempCharset = CharsetExtractor.getCharsetFromContentType(contentType as String)
          if (tempCharset != null) {
            charset = tempCharset
          } else if (encoderConfig().hasDefaultCharsetForContentType(contentType as String)) {
            charset = encoderConfig().defaultCharsetForContentType(contentType as String)
          }
        }
      } else { // Query or path parameter
        charset = encoderConfig().defaultQueryParameterCharset()
      }
      return URIBuilder.encode(string, charset)
    } else {
      return string
    }
  }

  private def handleMultiValueParamsIfNeeded(Entry<String, Object> entry) {
    def value = entry.getValue()
    if (value instanceof List) {
      def key = encode(entry.getKey(), EncodingTarget.BODY)
      final StringBuilder multiValueList = new StringBuilder();
      value.eachWithIndex { val, index ->
        multiValueList.append(encode(val.toString(), EncodingTarget.BODY))
        if (index != value.size() - 1) {
          multiValueList.append("&").append(key).append("=")
        }
      }
      value = multiValueList.toString()
    } else {
      value = encode(value, EncodingTarget.BODY)
    }
    return value
  }

  void setResponseSpecification(ResponseSpecification responseSpecification) {
    this.responseSpecification = responseSpecification
  }

  String getBaseUri() {
    return baseUri
  }

  String getBasePath() {
    return basePath
  }

  String getDerivedPath() {
    def uri = partiallyApplyPathParams(path, true, unnamedPathParamsTuples.collect { it.second })
    getDerivedPath(uri)
  }

  String getUserDefinedPath() {
    return PathSupport.getPath(path)
  }

  String getMethod() {
    return method
  }

  String getURI() {
    def uri = partiallyApplyPathParams(path, true, unnamedPathParamsTuples.collect { it.second })
    getURI(uri);
  }

  int getPort() {
    def host = new URL(getTargetURI(path))
    return host.getPort()
  }

  Map<String, String> getFormParams() {
    return Collections.unmodifiableMap(formParameters)
  }

  Map<String, String> getPathParams() {
    def namedPathParams = getNamedPathParams()
    def map = new LinkedHashMap<String, String>(namedPathParams)
    map.putAll(getUnnamedPathParams().findAll { !namedPathParams.keySet().contains(it.key) })
    return Collections.unmodifiableMap(map)
  }

  Map<String, String> getNamedPathParams() {
    return Collections.unmodifiableMap(namedPathParameters)
  }

  Map<String, String> getUnnamedPathParams() {
    // If it.first = null means that it's a placeholder
    def map = unnamedPathParamsTuples.findAll { it.first != null }.inject([:], { m, t ->
      m.putAt(t.first, t.second)
      m
    })
    return Collections.unmodifiableMap(map)
  }

  List<String> getUnnamedPathParamValues() {
    return Collections.unmodifiableList(unnamedPathParamsTuples == null ? Collections.emptyList() : unnamedPathParamsTuples.findAll {
      it.second != null
    }.collect {
      it.second
    })
  }

  Map<String, String> getRequestParams() {
    return Collections.unmodifiableMap(requestParameters)
  }

  Map<String, String> getQueryParams() {
    return Collections.unmodifiableMap(queryParameters)
  }

  List<MultiPartSpecification> getMultiPartParams() {
    return multiParts.collect {
      new MultiPartSpecificationImpl(content: it.content, charset: it.charset, fileName: it.fileName, mimeType: it.mimeType, controlName: it.controlName, headers: it.headers)
    }
  }

  Headers getHeaders() {
    return requestHeaders
  }

  Cookies getCookies() {
    return cookies
  }

  def getBody() {
    requestBody
  }

  List<Filter> getDefinedFilters() {
    return Collections.unmodifiableList(filters)
  }

  RestAssuredConfig getConfig() {
    return restAssuredConfig
  }

  HttpClient getHttpClient() {
    return httpClient
    // @Delegate doesn't work because of http://jira.codehaus.org/browse/GROOVY-4647 (when it's fixed 9619c3b should be used instead)
  }

  ProxySpecification getProxySpecification() {
    return proxySpecification
  }

  FilterableRequestSpecification path(String path) {
    notNull path, "Path"
    this.path = trimToEmpty(path)
    return this
  }

  List<String> getUndefinedPathParamPlaceholders() {
    def uri = partiallyApplyPathParams(path, false, unnamedPathParamsTuples.collect { it.second })
    getPlaceholders(uri)
  }

  List<String> getPathParamPlaceholders() {
    def uri = getTargetPath(contains(path, "://") ? substringAfter(path, "://") : path)
    getPlaceholders(uri)
  }

  String getRequestContentType() {
    return getContentType()
  }

  @Override
  String getContentType() {
    return requestHeaders.getValue(CONTENT_TYPE)
  }

  @Override
  RequestSpecification noFilters() {
    this.filters.clear()
    this
  }

  @Override
  RequestSpecification noFiltersOfType(Class filterType) {
    notNull filterType, "Filter type"
    this.filters.removeAll { filterType.isAssignableFrom(it.getClass()) }
    this
  }

  private class RestAssuredHttpBuilder extends HTTPBuilder {
    def assertionClosure

    RestAssuredHttpBuilder(Object defaultURI, assertionClosure, boolean urlEncodingEnabled, RestAssuredConfig config, AbstractHttpClient client) throws URISyntaxException {
      super(defaultURI, urlEncodingEnabled, config?.getEncoderConfig(), config?.getDecoderConfig(), config?.getOAuthConfig(), client)
      this.assertionClosure = assertionClosure
    }

    /**
     * A copy of HTTP builders doRequest method with two exceptions.
     * <ol>
     *  <li>The exception is that the entity's content is not closed if no body matchers are specified.</li>
     *  <li>If headers contain a list of elements the headers are added and not overridden</li>
     *  </ol>
     */
    protected Object doRequest(HTTPBuilder.RequestConfigDelegate delegate) {
      if (delegate.getRequest() instanceof HttpPost) {
        if (assertionClosure != null) {
          delegate.getResponse().put(
                  Status.FAILURE.toString(), { response, content ->
            assertionClosure.call(response, content)
          });
        }
        delegate.uri.query = queryParameters
      }
      final HttpRequestBase reqMethod = delegate.getRequest()
      Object acceptContentType = delegate.getContentType()
      if (!requestHeaders.hasHeaderWithName("Accept")) {
        String acceptContentTypes = acceptContentType.toString()
        if (acceptContentType instanceof ContentType)
          acceptContentTypes = ((ContentType) acceptContentType).getAcceptHeader()
        reqMethod.setHeader("Accept", acceptContentTypes)
      }
      reqMethod.setURI(delegate.getUri().toURI())
      if (shouldApplyContentTypeFromRestAssuredConfigDelegate(delegate, reqMethod)) {
        def contentTypeToUse = trim(delegate.getRequestContentType())
        reqMethod.setHeader(CONTENT_TYPE, contentTypeToUse);
      }
      if (reqMethod.getURI() == null)
        throw new IllegalStateException("Request URI cannot be null")
      Map<?, ?> headers1 = delegate.getHeaders()
      for (Object key : headers1.keySet()) {
        if (key == null) continue;
        Object val = headers1.get(key);
        if (val == null) {
          reqMethod.removeHeaders(key.toString())
        } else if (!key.toString().equalsIgnoreCase(CONTENT_TYPE) || !val.toString().startsWith(MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH)) {
          // Don't overwrite multipart header because HTTP Client have added boundary
          def keyAsString = key.toString()
          if (val instanceof Collection) {
            val = val.flatten().collect { it?.toString() }
            val.each {
              reqMethod.addHeader(keyAsString, it)
            }
          } else {
            reqMethod.setHeader(keyAsString, val.toString());
          }
        }
      }
      final HttpResponseDecorator resp = new HttpResponseDecorator(
              this.client.execute(reqMethod, delegate.getContext()),
              delegate.getContext(), null)
      try {
        int status = resp.getStatusLine().getStatusCode();
        Closure responseClosure = delegate.findResponseHandler(status);

        Object returnVal;
        Object[] closureArgs = null;
        switch (responseClosure.getMaximumNumberOfParameters()) {
          case 1:
            returnVal = responseClosure.call(resp);
            break;
          case 2: // parse the response entity if the response handler expects it:
            HttpEntity entity = resp.getEntity();
            try {
              if (entity == null || entity.getContentLength() == 0) {
                returnVal = responseClosure.call(resp, EMPTY);
              } else {
                returnVal = responseClosure.call(resp, this.parseResponse(resp, acceptContentType));
              }
            } catch (Exception ex) {
              throw new ResponseParseException(resp, ex);
            }
            break;
          default:
            throw new IllegalArgumentException(
                    "Response closure must accept one or two parameters");
        }
        return returnVal;
      }
      finally {
        if (responseSpecification.hasBodyAssertionsDefined()) {
          HttpEntity entity = resp.getEntity();
          if (entity != null) EntityUtils.consumeQuietly(entity);
        }
        // Close idle connections to the server
        def connectionConfig = connectionConfig()
        if (connectionConfig.shouldCloseIdleConnectionsAfterEachResponse()) {
          def closeConnectionConfig = connectionConfig.closeIdleConnectionConfig()
          client.getConnectionManager().closeIdleConnections(closeConnectionConfig.getIdleTime(), closeConnectionConfig.getTimeUnit());
        }
      }
    }

    /*
     * Is is for
     */

    private boolean shouldApplyContentTypeFromRestAssuredConfigDelegate(delegate, HttpRequestBase reqMethod) {
      def requestContentType = delegate.getRequestContentType()
      requestContentType != null && requestContentType != ANY.toString() &&
              (!reqMethod.hasProperty("entity") || reqMethod.entity?.contentType == null) &&
              !reqMethod.getAllHeaders().any { it.getName().equalsIgnoreCase(CONTENT_TYPE) }
    }

    /**
     * We override this method because ParserRegistry.getContentType(..) called by
     * the super method throws an exception if no content-type is available in the response
     * and then HTTPBuilder for some reason uses the streaming octet parser instead of the
     * defaultParser in the ParserRegistry to parse the response. To fix this we set the
     * content-type of the defaultParser if registered to Rest Assured to the response if no
     * content-type is defined.
     */
    protected Object parseResponse(HttpResponse resp, Object contentType) {
      Parser definedDefaultParser = responseSpecification.rpr.defaultParser
      if (definedDefaultParser != null && ANY.toString().equals(contentType.toString())) {
        try {
          HttpResponseContentTypeFinder.findContentType(resp);
        } catch (IllegalArgumentException ignored) {
          // This means that no content-type is defined the response
          def entity = resp?.entity
          if (entity != null) {
            resp.entity = new HttpEntityWrapper(entity) {

              org.apache.http.Header getContentType() {
                // We don't use CONTENT_TYPE field because of issue 253 (no tests for this!)
                return new BasicHeader("Content-Type", definedDefaultParser.getContentType())
              }
            }
          }
        }
      }
      return super.parseResponse(resp, contentType)
    }
  }

  private def applyProxySettings(RestAssuredHttpBuilder http) {
    // make client aware of JRE proxy settings http://freeside.co/betamax/
    http.client.routePlanner = new RestAssuredProxySelectorRoutePlanner(http.client.connectionManager.schemeRegistry,
            new RestAssuredProxySelector(delegatingProxySelector: ProxySelector.default, proxySpecification: proxySpecification), proxySpecification)
    if (proxySpecification?.hasAuth()) {
      CredentialsProvider credsProvider = new BasicCredentialsProvider();
      def address = new InetSocketAddress(proxySpecification.host, proxySpecification.port)
      // We need to convert the host to an IP since that's what our proxy selector (RestAssuredProxySelector) expects
      def authScope = new AuthScope(address.getAddress().getHostAddress(), proxySpecification.getPort())
      def credentials = new UsernamePasswordCredentials(proxySpecification.username, proxySpecification.password)
      credsProvider.setCredentials(authScope, credentials);
      http.client.setCredentialsProvider(credsProvider);
    }
  }

  private String assembleCompleteTargetPath(requestPath) {
    def targetUri
    def targetPath
    if (isFullyQualified(requestPath)) {
      targetUri = ""
      targetPath = ""
    } else {
      targetUri = getTargetURI(path)
      targetPath = substringBefore(getTargetPath(path), "?")
    }
    return mergeAndRemoveDoubleSlash(mergeAndRemoveDoubleSlash(targetUri, targetPath), requestPath);
  }

  private String findEncoderCharsetOrReturnDefault(String contentType) {
    def charset = CharsetExtractor.getCharsetFromContentType(contentType)
    if (charset == null) {
      final EncoderConfig cfg
      if (config == null) {
        cfg = new EncoderConfig()
      } else {
        cfg = config.getEncoderConfig()
      }

      if (cfg.hasDefaultCharsetForContentType(contentType)) {
        charset = cfg.defaultCharsetForContentType(contentType)
      } else {
        charset = cfg.defaultContentCharset()
      }
    }
    charset
  }

  private ObjectMapperConfig objectMappingConfig() {
    return config == null ? ObjectMapperConfig.objectMapperConfig() : config.getObjectMapperConfig();
  }

  private HttpClientConfig httpClientConfig() {
    return config == null ? HttpClientConfig.httpClientConfig() : config.getHttpClientConfig();
  }

  private ConnectionConfig connectionConfig() {
    return config == null ? ConnectionConfig.connectionConfig() : config.getConnectionConfig();
  }

  private EncoderConfig encoderConfig() {
    return config == null ? EncoderConfig.encoderConfig() : config.getEncoderConfig();
  }

  private SessionConfig sessionConfig() {
    return config == null ? SessionConfig.sessionConfig() : config.getSessionConfig();
  }

  RestAssuredConfig restAssuredConfig() {
    config ?: new RestAssuredConfig()
  }

  private enum EncodingTarget {
    BODY, QUERY
  }

  static List getPlaceholders(String uri) {
    Pattern p = Pattern.compile(Pattern.quote(TEMPLATE_START) + "(.*?)" + Pattern.quote(TEMPLATE_END))
    Matcher m = p.matcher(uri)
    def placeholders = new LinkedHashSet<String>() // Remove duplicates such as if we have get("/{x}/{x}")
    while (m.find()) {
      placeholders << m.group(1)?.trim()
    }
    return Collections.unmodifiableList(new ArrayList(placeholders))
  }

  static String getDerivedPath(String uri) {
    PathSupport.getPath(uri)
  }

  String getURI(String uri) {
    generateRequestUriForLogging(uri, method)
  }

  // Note that it's not possible to both redundant named and unnamed path parameters
  // as a map since redundant unnamed path parameters doesn't necessarily have a placeholder associated with it.
  // For example if we do get("/{x}", "1", "2") then there's no placeholder name for "2"
  Map<String, String> getRedundantNamedPathParams() {
    def placeholders = getPathParamPlaceholders()
    getNamedPathParams().findAll { !placeholders.contains(it.key) }.asImmutable()
  }

  List<String> getRedundantUnnamedPathParamValues() {
    def allPathParams = getPathParams()
    if (getPathParamPlaceholders().minus(allPathParams.keySet()).size() +
            Math.max(getUnnamedPathParamValues().size() - getPathParamPlaceholders().size(), 0) > 0) {
      return (getUnnamedPathParamValues().minus(allPathParams.values())).asImmutable()
    }
    Collections.unmodifiableList(Collections.emptyList())
  }

  void removeUnnamedPathParamAtIndex(int indexOfParamName) {
    unnamedPathParamsTuples.remove(indexOfParamName)
    // We define the a tuple with "null, null" in order to retain path parameter order
    unnamedPathParamsTuples.add(indexOfParamName, new Tuple2<String, String>(null, null))
  }

  public void setMethod(String method) {
    this.method = method == null ? null : method.toUpperCase()
  }

  private static int getFilterOrder(Filter filter) {
    return (filter instanceof OrderedFilter) ? ((OrderedFilter) filter).getOrder()
            : OrderedFilter.DEFAULT_PRECEDENCE;
  }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClassFileEditor$1.run(ClassFileEditor.java:713)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-08-08 13:20:00.741
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClassFileEditor$1.run(ClassFileEditor.java:713)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-08-08 13:20:00.743
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClassFileEditor$1.run(ClassFileEditor.java:713)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-08 13:20:50.255
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/*
 * Copyright 2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.restassured.internal

import io.restassured.RestAssured
import io.restassured.authentication.AuthenticationScheme
import io.restassured.authentication.CertAuthScheme
import io.restassured.authentication.FormAuthScheme
import io.restassured.authentication.NoAuthScheme
import io.restassured.config.*
import io.restassured.filter.Filter
import io.restassured.filter.OrderedFilter
import io.restassured.filter.log.RequestLoggingFilter
import io.restassured.filter.log.ResponseLoggingFilter
import io.restassured.filter.time.TimingFilter
import io.restassured.http.*
import io.restassured.internal.MapCreator.CollisionStrategy
import io.restassured.internal.filter.FilterContextImpl
import io.restassured.internal.filter.FormAuthFilter
import io.restassured.internal.filter.SendRequestFilter
import io.restassured.internal.http.*
import io.restassured.internal.log.LogRepository
import io.restassured.internal.mapping.ObjectMapperSerializationContextImpl
import io.restassured.internal.mapping.ObjectMapping
import io.restassured.internal.multipart.MultiPartInternal
import io.restassured.internal.multipart.MultiPartSpecificationImpl
import io.restassured.internal.multipart.RestAssuredMultiPartEntity
import io.restassured.internal.proxy.RestAssuredProxySelector
import io.restassured.internal.proxy.RestAssuredProxySelectorRoutePlanner
import io.restassured.internal.support.ParameterUpdater
import io.restassured.internal.support.PathSupport
import io.restassured.mapper.ObjectMapper
import io.restassured.mapper.ObjectMapperType
import io.restassured.parsing.Parser
import io.restassured.response.Response
import io.restassured.specification.*
import io.restassured.spi.AuthFilter
import org.apache.http.HttpEntity
import org.apache.http.HttpResponse
import org.apache.http.auth.AuthScope
import org.apache.http.auth.UsernamePasswordCredentials
import org.apache.http.client.CredentialsProvider
import org.apache.http.client.HttpClient
import org.apache.http.client.methods.HttpPost
import org.apache.http.client.methods.HttpRequestBase
import org.apache.http.entity.HttpEntityWrapper
import org.apache.http.entity.mime.FormBodyPartBuilder
import org.apache.http.impl.client.AbstractHttpClient
import org.apache.http.impl.client.BasicCredentialsProvider
import org.apache.http.message.BasicHeader
import org.apache.http.util.EntityUtils

import java.security.KeyStore
import java.util.Map.Entry
import java.util.regex.Matcher
import java.util.regex.Pattern

import static io.restassured.config.ParamConfig.UpdateStrategy.REPLACE
import static io.restassured.http.ContentType.*
import static io.restassured.http.Method.*
import static io.restassured.internal.common.assertion.AssertParameter.notNull
import static io.restassured.internal.serialization.SerializationSupport.isSerializableCandidate
import static io.restassured.internal.support.PathSupport.isFullyQualified
import static io.restassured.internal.support.PathSupport.mergeAndRemoveDoubleSlash
import static java.lang.String.format
import static java.util.Arrays.asList
import static org.apache.commons.lang3.StringUtils.*
import static org.apache.http.client.params.ClientPNames.*

class RequestSpecificationImpl implements FilterableRequestSpecification, GroovyInterceptable {
  private static final int DEFAULT_HTTP_TEST_PORT = 8080
  private static final String CONTENT_TYPE = "Content-Type"
  private static final String DOUBLE_SLASH = "//"
  private static final String LOCALHOST = "localhost"
  private static final String CHARSET = "charset"
  private static final String ACCEPT_HEADER_NAME = "Accept"
  private static final String SSL = "SSL"
  private static final String MULTIPART = "multipart"
  private static final String MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH = MULTIPART + "/"
  private static final String MULTIPART_CONTENT_TYPE_PREFIX_WITH_PLUS = MULTIPART + "+"
  private static final String TEMPLATE_START = "{"
  private static final String TEMPLATE_END = "}"

  private String baseUri
  private String path = ""
  private String method
  private String basePath
  // If first argument is null it means that it's a redundant path param that cannot be mapped to a placeholder
  // If second argument is null it means that the parameter has been removed (but we keep it to retain order)
  private List<Tuple2<String, String>> unnamedPathParamsTuples = new ArrayList<>()
  private AuthenticationScheme defaultAuthScheme
  private int port
  private Map<String, String> requestParameters = new LinkedHashMap()
  private Map<String, String> queryParameters = new LinkedHashMap()
  private Map<String, String> formParameters = new LinkedHashMap()
  private Map<String, String> namedPathParameters = [:]
  private Map<String, String> httpClientParams = [:]
  AuthenticationScheme authenticationScheme = new NoAuthScheme()
  private FilterableResponseSpecification responseSpecification;
  private Headers requestHeaders = new Headers([])
  private Cookies cookies = new Cookies([])
  private Object requestBody;
  private List<Filter> filters = [];
  private boolean urlEncodingEnabled
  private RestAssuredConfig restAssuredConfig;
  private List<MultiPartInternal> multiParts = [];
  private ParameterUpdater parameterUpdater = new ParameterUpdater(new ParameterUpdater.Serializer() {
    String serializeIfNeeded(Object value) {
      return RequestSpecificationImpl.this.serializeIfNeeded(value)
    }
  });
  private ProxySpecification proxySpecification = null

  private LogRepository logRepository

  // This field should be removed once http://jira.codehaus.org/browse/GROOVY-4647 is resolved, merge with sha 9619c3b when it's fixed.
  private AbstractHttpClient httpClient

  public RequestSpecificationImpl(String baseURI, int requestPort, String basePath, AuthenticationScheme defaultAuthScheme, List<Filter> filters,
                                  RequestSpecification defaultSpec, boolean urlEncode, RestAssuredConfig restAssuredConfig, LogRepository logRepository,
                                  ProxySpecification proxySpecification) {
    notNull(baseURI, "baseURI");
    notNull(basePath, "basePath");
    notNull(defaultAuthScheme, "defaultAuthScheme");
    notNull(filters, "Filters")
    notNull(urlEncode, "URL Encode query params option")
    this.baseUri = baseURI
    this.basePath = basePath
    this.defaultAuthScheme = defaultAuthScheme
    this.filters.addAll(filters)
    this.urlEncodingEnabled = urlEncode
    port(requestPort)
    this.restAssuredConfig = restAssuredConfig
    if (defaultSpec != null) {
      spec(defaultSpec)
    }
    this.logRepository = logRepository
    this.proxySpecification = proxySpecification
  }

  RequestSpecification when() {
    return this;
  }

  RequestSpecification given() {
    return this;
  }

  RequestSpecification that() {
    return this;
  }

  ResponseSpecification response() {
    return responseSpecification;
  }

  Response get(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(GET, path, pathParams)
  }

  Response post(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(POST, path, pathParams)
  }

  Response put(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(PUT, path, pathParams)
  }

  Response delete(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(DELETE, path, pathParams)
  }

  Response head(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(HEAD, path, pathParams)
  }

  Response patch(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(PATCH, path, pathParams)
  }

  Response options(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(OPTIONS, path, pathParams)
  }

  Response get(URI uri) {
    get(notNull(uri, "URI").toString())
  }

  Response post(URI uri) {
    post(notNull(uri, "URI").toString())
  }

  Response put(URI uri) {
    put(notNull(uri, "URI").toString())
  }

  Response delete(URI uri) {
    delete(notNull(uri, "URI").toString())
  }

  Response head(URI uri) {
    head(notNull(uri, "URI").toString())
  }

  Response patch(URI uri) {
    patch(notNull(uri, "URI").toString())
  }

  Response options(URI uri) {
    options(notNull(uri, "URI").toString())
  }

  Response get(URL url) {
    get(notNull(url, "URL").toString())
  }

  Response post(URL url) {
    post(notNull(url, "URL").toString())
  }

  Response put(URL url) {
    put(notNull(url, "URL").toString())
  }

  Response delete(URL url) {
    delete(notNull(url, "URL").toString())
  }

  Response head(URL url) {
    head(notNull(url, "URL").toString())
  }

  Response patch(URL url) {
    patch(notNull(url, "URL").toString())
  }

  Response options(URL url) {
    options(notNull(url, "URL").toString())
  }

  Response get() {
    get("")
  }

  Response post() {
    post("")
  }

  Response put() {
    put("")
  }

  Response delete() {
    delete("")
  }

  Response head() {
    head("")
  }

  Response patch() {
    patch("")
  }

  Response options() {
    options("")
  }

  Response request(Method method) {
    request(notNull(method, Method.class).name())
  }

  Response request(String method) {
    request(method, "")
  }

  Response request(Method method, String path, Object... pathParams) {
    return request(notNull(method, Method.class).name(), path, pathParams)
  }

  Response request(String method, String path, Object... pathParams) {
    applyPathParamsAndSendRequest(method, path, pathParams)
  }

  Response request(Method method, URI uri) {
    request(method, notNull(uri, URI.class).toString())
  }

  Response request(Method method, URL url) {
    request(method, notNull(url, URL.class).toString())
  }

  Response request(String method, URI uri) {
    request(method, notNull(uri, URI.class).toString())
  }

  Response request(String method, URL url) {
    request(method, notNull(url, URL.class).toString())
  }

  Response get(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(GET, path)
  }

  Response post(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(POST, path)
  }

  Response put(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(PUT, path)
  }

  Response delete(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(DELETE, path)
  }

  Response head(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(HEAD, path)
  }

  Response patch(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(PATCH, path)
  }

  Response options(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(OPTIONS, path)
  }

  RequestSpecification params(String firstParameterName, Object firstParameterValue, Object... parameterNameValuePairs) {
    notNull firstParameterName, "firstParameterName"
    notNull firstParameterValue, "firstParameterValue"
    return params(MapCreator.createMapFromParams(CollisionStrategy.OVERWRITE, firstParameterName, firstParameterValue, parameterNameValuePairs))
  }

  RequestSpecification params(Map parametersMap) {
    notNull parametersMap, "parametersMap"
    parameterUpdater.updateParameters(restAssuredConfig().paramConfig.requestParamsUpdateStrategy(), parametersMap, requestParameters)
    return this
  }

  RequestSpecification param(String parameterName, Object... parameterValues) {
    notNull parameterName, "parameterName"
    parameterUpdater.updateZeroToManyParameters(restAssuredConfig().paramConfig.requestParamsUpdateStrategy(), requestParameters, parameterName, parameterValues)
    return this
  }

  FilterableRequestSpecification removeParam(String parameterName) {
    notNull parameterName, "parameterName"
    requestParameters.remove(parameterName)
    return this
  }

  RequestSpecification param(String parameterName, Collection<?> parameterValues) {
    notNull parameterValues, "parameterValues"
    return param(parameterName, parameterValues.toArray())
  }

  RequestSpecification queryParam(String parameterName, Collection<?> parameterValues) {
    notNull parameterName, "parameterName"
    notNull parameterValues, "parameterValues"
    parameterUpdater.updateCollectionParameter(restAssuredConfig().getParamConfig().queryParamsUpdateStrategy(), queryParameters, parameterName, parameterValues)
    return this
  }

  FilterableRequestSpecification removeQueryParam(String parameterName) {
    notNull parameterName, "parameterName"
    queryParameters.remove(parameterName)
    return this
  }

  FilterableRequestSpecification removeHeader(String headerName) {
    notNull headerName, "headerName"
    def headersLeftAfterRemove = headers.findAll { !headerName.equalsIgnoreCase(it.getName()) }
    this.requestHeaders = new Headers(headersLeftAfterRemove)
    this
  }

  FilterableRequestSpecification removeCookie(String cookieName) {
    notNull cookieName, "cookieName"
    def cookiesLeftAfterRemove = cookies.findAll { !cookieName.equalsIgnoreCase(it.getName()) }
    this.cookies = new Cookies(cookiesLeftAfterRemove)
    this
  }

  FilterableRequestSpecification removeCookie(Cookie cookie) {
    notNull cookie, "cookie"
    removeCookie(cookie.getName())
    this
  }

  FilterableRequestSpecification replaceHeader(String headerName, String newValue) {
    notNull headerName, "headerName"
    removeHeader(headerName)
    def headerList = []
    headerList.addAll(this.requestHeaders.list())
    headerList.add(new Header(headerName, newValue))
    this.requestHeaders = new Headers(headerList)
    this
  }

  FilterableRequestSpecification replaceCookie(String cookieName, String value) {
    notNull cookieName, "cookieName"
    removeCookie(cookieName)
    cookie(cookieName, value)
    this
  }

  FilterableRequestSpecification replaceCookie(Cookie cookie) {
    notNull cookie, "cookie"
    removeCookie(cookie.getName())
    this.cookie(cookie)
    this
  }

  FilterableRequestSpecification replaceHeaders(Headers headers) {
    notNull headers, "headers"
    this.requestHeaders = new Headers(headers.asList())
    this
  }

  FilterableRequestSpecification replaceCookies(Cookies cookies) {
    notNull cookies, "cookies"
    this.cookies = new Cookies(cookies.asList())
    this
  }

  FilterableRequestSpecification removeHeaders() {
    this.requestHeaders = new Headers([])
    this
  }

  FilterableRequestSpecification removeCookies() {
    this.cookies = new Cookies([])
    this
  }


  RequestSpecification queryParams(String firstParameterName, Object firstParameterValue, Object... parameterNameValuePairs) {
    notNull firstParameterName, "firstParameterName"
    notNull firstParameterValue, "firstParameterValue"
    return queryParams(MapCreator.createMapFromParams(CollisionStrategy.OVERWRITE, firstParameterName, firstParameterValue, parameterNameValuePairs))
  }

  RequestSpecification queryParams(Map parametersMap) {
    notNull parametersMap, "parametersMap"
    parameterUpdater.updateParameters(restAssuredConfig().paramConfig.queryParamsUpdateStrategy(), parametersMap, queryParameters)
    return this
  }

  RequestSpecification queryParam(String parameterName, Object... parameterValues) {
    notNull parameterName, "parameterName"
    parameterUpdater.updateZeroToManyParameters(restAssuredConfig().paramConfig.queryParamsUpdateStrategy(), queryParameters, parameterName, parameterValues)
    return this
  }

  RequestSpecification formParam(String parameterName, Collection<?> parameterValues) {
    notNull parameterName, "parameterName"
    notNull parameterValues, "parameterValues"
    parameterUpdater.updateCollectionParameter(restAssuredConfig().paramConfig.formParamsUpdateStrategy(), formParameters, parameterName, parameterValues)
    return this
  }

  FilterableRequestSpecification removeFormParam(String parameterName) {
    notNull parameterName, "parameterName"
    formParameters.remove(parameterName)
    return this
  }

  RequestSpecification formParams(String firstParameterName, Object firstParameterValue, Object... parameterNameValuePairs) {
    notNull firstParameterName, "firstParameterName"
    notNull firstParameterValue, "firstParameterValue"
    return formParams(MapCreator.createMapFromParams(CollisionStrategy.OVERWRITE, firstParameterName, firstParameterValue, parameterNameValuePairs))
  }

  RequestSpecification formParams(Map parametersMap) {
    notNull parametersMap, "parametersMap"
    parameterUpdater.updateParameters(restAssuredConfig().paramConfig.formParamsUpdateStrategy(), parametersMap, formParameters)
    return this
  }

  RequestSpecification formParam(String parameterName, Object... additionalParameterValues) {
    notNull parameterName, "parameterName"
    parameterUpdater.updateZeroToManyParameters(restAssuredConfig().paramConfig.formParamsUpdateStrategy(), formParameters, parameterName, additionalParameterValues)
    return this
  }

  RequestSpecification urlEncodingEnabled(boolean isEnabled) {
    this.urlEncodingEnabled = isEnabled
    return this
  }

  RequestSpecification pathParam(String parameterName, Object parameterValue) {
    notNull parameterName, "parameterName"
    notNull parameterValue, "parameterValue"
    parameterUpdater.updateStandardParameter(REPLACE, namedPathParameters, parameterName, parameterValue)
    return this
  }

  RequestSpecification pathParams(String firstParameterName, Object firstParameterValue, Object... parameterNameValuePairs) {
    notNull firstParameterName, "firstParameterName"
    notNull firstParameterValue, "firstParameterValue"
    return pathParams(MapCreator.createMapFromParams(CollisionStrategy.OVERWRITE, firstParameterName, firstParameterValue, parameterNameValuePairs))
  }

  RequestSpecification pathParams(Map parameterNameValuePairs) {
    notNull parameterNameValuePairs, "parameterNameValuePairs"
    parameterUpdater.updateParameters(REPLACE, parameterNameValuePairs, namedPathParameters)
    return this
  }

  FilterableRequestSpecification removePathParam(String parameterName) {
    notNull parameterName, "parameterName"
    removeNamedPathParam(parameterName)
    removeUnnamedPathParam(parameterName)
    return this
  }

  FilterableRequestSpecification removeNamedPathParam(String parameterName) {
    notNull parameterName, "parameterName"
    namedPathParameters.remove(parameterName)
    this
  }

  FilterableRequestSpecification removeUnnamedPathParam(String parameterName) {
    notNull parameterName, "parameterName"
    def indexOfParamName = unnamedPathParamsTuples.findIndexOf { it.first == parameterName }
    if (indexOfParamName > -1) {
      removeUnnamedPathParamAtIndex(indexOfParamName)
    }
    this
  }

  FilterableRequestSpecification removeUnnamedPathParamByValue(String parameterValue) {
    notNull parameterValue, "parameterValue"
    def indexOfParamValue = unnamedPathParamsTuples.findIndexOf { it.second == parameterValue }
    if (indexOfParamValue > -1) {
      removeUnnamedPathParamAtIndex(indexOfParamValue)
    }
    return this
  }

  RequestSpecification config(RestAssuredConfig config) {
    this.restAssuredConfig = config
    responseSpecification?.config = config
    this
  }

  RequestSpecification keyStore(String pathToJks, String password) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    // Allow all host names in order to be backward compatible
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.keyStore(pathToJks, password).allowAllHostnames())
    this
  }

  RequestSpecification keyStore(File pathToJks, String password) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    // Allow all host names in order to be backward compatible
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.keyStore(pathToJks, password).allowAllHostnames())
    this
  }

  RequestSpecification trustStore(String path, String password) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.trustStore(path, password).allowAllHostnames())
    this
  }

  RequestSpecification trustStore(File path, String password) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.trustStore(path, password).allowAllHostnames())
    this
  }

  RequestSpecification trustStore(KeyStore trustStore) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.trustStore(trustStore))
    this
  }

  RequestSpecification keyStore(KeyStore keyStore) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.keyStore(keyStore))
    this
  }

  RequestSpecification relaxedHTTPSValidation() {
    relaxedHTTPSValidation(SSL)
  }

  RequestSpecification relaxedHTTPSValidation(String protocol) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.relaxedHTTPSValidation(protocol))
    this
  }

  RequestSpecification filter(Filter filter) {
    notNull filter, "Filter"
    filters << filter
    return this
  }

  RequestSpecification filters(List<Filter> filters) {
    notNull filters, "Filters"
    this.filters.addAll(filters)
    return this
  }

  RequestSpecification filters(Filter filter, Filter... additionalFilter) {
    notNull filter, "Filter"
    this.filters.add(filter)
    additionalFilter?.each {
      this.filters.add(it)
    }
    return this
  }

  RequestLogSpecification log() {
    def blacklistedHeaders = restAssuredConfig().logConfig.blacklistedHeaders()
    return new RequestLogSpecificationImpl(requestSpecification: this, logRepository: logRepository, blacklistedHeaders: blacklistedHeaders)
  }

  RequestSpecification and() {
    return this;
  }

  RequestSpecification request() {
    return this;
  }

  RequestSpecification with() {
    return this;
  }

  ResponseSpecification then() {
    return responseSpecification;
  }

  ResponseSpecification expect() {
    return responseSpecification;
  }

  AuthenticationSpecification auth() {
    return new AuthenticationSpecificationImpl(this);
  }

  AuthenticationSpecification authentication() {
    return auth();
  }

  RequestSpecification port(int port) {
    if (port < 1 && port != RestAssured.UNDEFINED_PORT) {
      throw new IllegalArgumentException("Port must be greater than 0")
    }
    this.port = port
    return this
  }

  RequestSpecification body(String body) {
    notNull body, "body"
    this.requestBody = body;
    return this;
  }

  RequestSpecification baseUri(String baseUri) {
    notNull baseUri, "Base URI"
    this.baseUri = baseUri;
    return this;
  }

  RequestSpecification basePath(String basePath) {
    notNull basePath, "Base Path"
    this.basePath = basePath;
    return this;
  }

  RequestSpecification proxy(String host, int port) {
    proxy(ProxySpecification.host(host).withPort(port))
  }

  RequestSpecification proxy(String host) {
    if (UriValidator.isUri(host)) {
      proxy(new URI(host))
    } else {
      proxy(ProxySpecification.host(host))
    }
  }

  RequestSpecification proxy(int port) {
    proxy(ProxySpecification.port(port))
  }

  RequestSpecification proxy(String host, int port, String scheme) {
    proxy(new org.apache.http.client.utils.URIBuilder().setHost(host).setPort(port).setScheme(scheme).build())
  }

  RequestSpecification proxy(URI uri) {
    notNull(uri, URI.class)
    proxy(new ProxySpecification(uri.host, uri.port, uri.scheme));
  }

  RequestSpecification proxy(ProxySpecification proxySpecification) {
    notNull(proxySpecification, ProxySpecification.class)
    this.proxySpecification = proxySpecification
    this
  }

  RequestSpecification body(byte[] body) {
    notNull body, "body"
    this.requestBody = body;
    return this;
  }

  RequestSpecification body(File body) {
    notNull body, "body"
    this.requestBody = body;
    return this;
  }

  RequestSpecification body(InputStream body) {
    notNull body, "body"
    this.requestBody = body;
    return this;
  }

  RequestSpecification body(Object object) {
    notNull object, "object"
    if (!isSerializableCandidate(object)) {
      return body(object.toString());
    }

    this.requestBody = ObjectMapping.serialize(object, requestContentType, findEncoderCharsetOrReturnDefault(requestContentType), null, objectMappingConfig(), restAssuredConfig().getEncoderConfig());
    this
  }

  RequestSpecification body(Object object, ObjectMapper mapper) {
    notNull object, "object"
    notNull mapper, "Object mapper"
    def ctx = new ObjectMapperSerializationContextImpl();
    ctx.setObject(object)
    ctx.setCharset(findEncoderCharsetOrReturnDefault(requestContentType))
    ctx.setContentType(requestContentType)
    this.requestBody = mapper.serialize(ctx);
    this
  }

  RequestSpecification body(Object object, ObjectMapperType mapperType) {
    notNull object, "object"
    notNull mapperType, "Object mapper type"
    this.requestBody = ObjectMapping.serialize(object, requestContentType, findEncoderCharsetOrReturnDefault(requestContentType), mapperType, objectMappingConfig(), restAssuredConfig().getEncoderConfig())
    this
  }

  RequestSpecification contentType(ContentType contentType) {
    notNull contentType, ContentType.class
    header(CONTENT_TYPE, contentType)
  }

  RequestSpecification contentType(String contentType) {
    notNull contentType, "Content-Type header cannot be null"
    header(CONTENT_TYPE, contentType)
  }

  RequestSpecification accept(ContentType contentType) {
    notNull contentType, "Accept header"
    accept(contentType.getAcceptHeader())
  }

  RequestSpecification accept(String mediaTypes) {
    notNull mediaTypes, "Accept header media range"
    header(ACCEPT_HEADER_NAME, mediaTypes)
  }

  RequestSpecification headers(Map headers) {
    notNull headers, "headers"
    def headerList = []
    if (this.requestHeaders.exist()) {
      headerList.addAll(this.requestHeaders.list())
    }
    headers.each {
      if (it.value instanceof List) {
        it.value.each { val ->
          headerList << new Header(it.key, serializeIfNeeded(val))
        }
      } else {
        headerList << new Header(it.key, serializeIfNeeded(it.value))
      }
    }
    headerList = removeMergedHeadersIfNeeded(headerList)
    this.requestHeaders = new Headers(headerList)
    return this;
  }

  RequestSpecification headers(Headers headers) {
    notNull headers, "headers"
    if (headers.exist()) {
      def headerList = []
      if (this.requestHeaders.exist()) {
        headerList.addAll(this.requestHeaders.list())
      }

      headerList.addAll(headers.headers.list())
      headerList = removeMergedHeadersIfNeeded(headerList)
      this.requestHeaders = new Headers(headerList)
    }
    this
  }

  private List removeMergedHeadersIfNeeded(List headerList) {
    def headers = headerList.inject([], { acc, header ->
      def headerConfig = restAssuredConfig().getHeaderConfig()
      String headerName = header.getName()
      if (headerConfig.shouldOverwriteHeaderWithName(headerName)) {
        acc = acc.findAll { !headerName.equalsIgnoreCase(it.getName()) }
      }
      acc.add(header)
      acc
    })
    headers
  }

  RequestSpecification header(String headerName, Object headerValue, Object... additionalHeaderValues) {
    notNull headerName, "Header name"
    notNull headerValue, "Header value"

    def headerList = [new Header(headerName, serializeIfNeeded(headerValue))]
    additionalHeaderValues?.each {
      headerList << new Header(headerName, serializeIfNeeded(it))
    }

    return headers(new Headers(headerList))
  }

  RequestSpecification header(Header header) {
    notNull header, "Header"

    return headers(new Headers(asList(header)));
  }

  RequestSpecification headers(String firstHeaderName, Object firstHeaderValue, Object... headerNameValuePairs) {
    return headers(MapCreator.createMapFromParams(CollisionStrategy.MERGE, firstHeaderName, firstHeaderValue, headerNameValuePairs))
  }

  RequestSpecification cookies(String firstCookieName, Object firstCookieValue, Object... cookieNameValuePairs) {
    return cookies(MapCreator.createMapFromParams(CollisionStrategy.OVERWRITE, firstCookieName, firstCookieValue, cookieNameValuePairs))
  }

  RequestSpecification cookies(Map cookies) {
    notNull cookies, "cookies"
    def cookieList = []
    if (this.cookies.exist()) {
      cookieList.addAll(this.cookies.list())
    }
    cookies.each {
      cookieList << new Cookie.Builder(it.key, it.value).build();
    }
    this.cookies = new Cookies(cookieList)
    return this;
  }

  RequestSpecification cookies(Cookies cookies) {
    notNull cookies, "cookies"
    if (cookies.exist()) {
      def cookieList = []
      if (this.cookies.exist()) {
        cookieList.addAll(this.cookies.list())
      }

      cookieList.addAll(cookies.cookies.list())
      this.cookies = new Cookies(cookieList)
    }
    this
  }

  RequestSpecification cookie(String cookieName, Object value, Object... additionalValues) {
    notNull cookieName, "Cookie name"
    def cookieList = [new Cookie.Builder(cookieName, serializeIfNeeded(value)).build()]
    additionalValues?.each {
      cookieList << new Cookie.Builder(cookieName, serializeIfNeeded(it)).build()
    }

    return cookies(new Cookies(cookieList))
  }

  RequestSpecification cookie(Cookie cookie) {
    notNull cookie, "Cookie"
    return cookies(new Cookies(asList(cookie)));
  }

  RequestSpecification cookie(String cookieName) {
    cookie(cookieName, null)
  }

  RedirectSpecification redirects() {
    new RedirectSpecificationImpl(this, httpClientParams)
  }

  RequestSpecification spec(RequestSpecification requestSpecificationToMerge) {
    SpecificationMerger.merge this, requestSpecificationToMerge
    return this
  }

  RequestSpecification specification(RequestSpecification requestSpecificationToMerge) {
    return spec(requestSpecificationToMerge)
  }

  RequestSpecification sessionId(String sessionIdValue) {
    def sessionIdName = config == null ? SessionConfig.DEFAULT_SESSION_ID_NAME : config.getSessionConfig().sessionIdName()
    sessionId(sessionIdName, sessionIdValue)
  }

  RequestSpecification sessionId(String sessionIdName, String sessionIdValue) {
    notNull(sessionIdName, "Session id name")
    notNull(sessionIdValue, "Session id value")
    if (cookies.hasCookieWithName(sessionIdName)) {
      def allOtherCookies = cookies.findAll { !it.getName().equalsIgnoreCase(sessionIdName) }
      allOtherCookies.add(new Cookie.Builder(sessionIdName, sessionIdValue).build());
      this.cookies = new Cookies(allOtherCookies)
    } else {
      cookie(sessionIdName, sessionIdValue)
    }
    this
  }

  RequestSpecification multiPart(MultiPartSpecification multiPartSpec) {
    notNull multiPartSpec, "Multi-part specification"
    def mimeType = multiPartSpec.mimeType
    def content
    if (multiPartSpec.content instanceof File || multiPartSpec.content instanceof InputStream || multiPartSpec.content instanceof byte[]) {
      content = multiPartSpec.content
    } else {
      // Objects ought to be serialized
      if (mimeType == null) {
        mimeType = ANY.matches(requestContentType) ? JSON.toString() : requestContentType
      }
      content = serializeIfNeeded(multiPartSpec.content, mimeType)
    }

    final String controlName;
    if (multiPartSpec instanceof MultiPartSpecificationImpl && !multiPartSpec.isControlNameSpecifiedExplicitly()) {
      // We use the default control name if it was not explicitly specified in the multi-part spec
      controlName = restAssuredConfig().getMultiPartConfig().defaultControlName()
    } else {
      controlName = multiPartSpec.controlName
    }

    final String fileName;
    if (multiPartSpec instanceof MultiPartSpecificationImpl && !multiPartSpec.isFileNameSpecifiedExplicitly()) {
      // We use the default file name if it was not explicitly specified in the multi-part spec
      fileName = restAssuredConfig().getMultiPartConfig().defaultFileName()
    } else {
      fileName = multiPartSpec.fileName
    }

    def headers = multiPartSpec.headers

    multiParts << new MultiPartInternal(controlName: controlName, content: content, fileName: fileName, charset: multiPartSpec.charset, mimeType: mimeType, headers: headers)
    return this
  }

  RequestSpecification multiPart(String controlName, File file) {
    multiParts << new MultiPartInternal(controlName: controlName, content: file, fileName: file.getName())
    this
  }

  RequestSpecification multiPart(File file) {
    multiParts << new MultiPartInternal(controlName: restAssuredConfig().getMultiPartConfig().defaultControlName(), content: file, fileName: file.getName())
    this
  }

  RequestSpecification multiPart(String controlName, File file, String mimeType) {
    multiParts << new MultiPartInternal(controlName: controlName, content: file, mimeType: mimeType, fileName: file.getName())
    this
  }

  RequestSpecification multiPart(String controlName, Object object) {
    def mimeType = ANY.matches(requestContentType) ? JSON.toString() : requestContentType
    return multiPart(controlName, object, mimeType)
  }

  RequestSpecification multiPart(String controlName, Object object, String mimeType) {
    def possiblySerializedObject = serializeIfNeeded(object, mimeType)
    multiParts << new MultiPartInternal(controlName: controlName, content: possiblySerializedObject, mimeType: mimeType, fileName: restAssuredConfig().getMultiPartConfig().defaultFileName())
    this
  }

  RequestSpecification multiPart(String controlName, String filename, Object object, String mimeType) {
    def possiblySerializedObject = serializeIfNeeded(object, mimeType)
    multiParts << new MultiPartInternal(controlName: controlName, content: possiblySerializedObject, mimeType: mimeType, fileName: filename)
    this
  }

  RequestSpecification multiPart(String name, String fileName, byte[] bytes) {
    multiParts << new MultiPartInternal(controlName: name, content: bytes, fileName: fileName)
    this
  }

  RequestSpecification multiPart(String name, String fileName, byte[] bytes, String mimeType) {
    multiParts << new MultiPartInternal(controlName: name, content: bytes, mimeType: mimeType, fileName: fileName)
    this
  }

  RequestSpecification multiPart(String name, String fileName, InputStream stream) {
    multiParts << new MultiPartInternal(controlName: name, content: stream, fileName: fileName)
    this
  }

  RequestSpecification multiPart(String name, String fileName, InputStream stream, String mimeType) {
    multiParts << new MultiPartInternal(controlName: name, content: stream, mimeType: mimeType, fileName: fileName)
    this
  }

  RequestSpecification multiPart(String name, String contentBody) {
    multiParts << new MultiPartInternal(controlName: name, content: contentBody, fileName: restAssuredConfig().getMultiPartConfig().defaultFileName())
    this
  }

  RequestSpecification multiPart(String name, NoParameterValue contentBody) {
    multiParts << new MultiPartInternal(controlName: name, content: contentBody, fileName: restAssuredConfig().getMultiPartConfig().defaultFileName())
    this
  }

  RequestSpecification multiPart(String name, String contentBody, String mimeType) {
    multiParts << new MultiPartInternal(controlName: name, content: contentBody, mimeType: mimeType, fileName: restAssuredConfig().getMultiPartConfig().defaultFileName())
    this
  }

  def newFilterContext(assertionClosure, filters, properties) {
    if (path?.endsWith("?")) {
      throw new IllegalArgumentException("Request URI cannot end with ?");
    }

    // Set default accept header if undefined
    if (!headers.hasHeaderWithName(ACCEPT_HEADER_NAME)) {
      header(ACCEPT_HEADER_NAME, ANY.getAcceptHeader())
    }

    def tempContentType = defineRequestContentTypeAsString(method)
    if (tempContentType != null) {
      header(CONTENT_TYPE, tempContentType)
    }

    def unnamedPathParamValues = unnamedPathParamsTuples.findAll { it.second != null }.collect { it.second }
    def uri = partiallyApplyPathParams(path, true, unnamedPathParamValues)
    String requestUriForLogging = generateRequestUriForLogging(uri, method)

    new FilterContextImpl(requestUriForLogging, getUserDefinedPath(), getDerivedPath(uri), uri, path, unnamedPathParamValues.toArray(), method, assertionClosure, filters, properties);
  }

  private String generateRequestUriForLogging(uri, method) {
    def targetUri
    def allQueryParams = [:]

    if (uri.contains("?")) {
      def uriToUse
      if (isFullyQualified(uri)) {
        uriToUse = uri
      } else {
        uriToUse = getTargetPath(uri)
      }

      targetUri = substringBefore(uriToUse, "?")
      def queryParamsDefinedInPath = substringAfter(uri, "?")

      // Add query parameters defined in path to the allQueryParams map
      if (!isBlank(queryParamsDefinedInPath)) {
        def splittedQueryParams = split(queryParamsDefinedInPath, "&");
        splittedQueryParams.each { queryNameWithPotentialValue ->
          String[] splitted = split(queryNameWithPotentialValue, "=", 2)
          def queryParamHasValueDefined = splitted.size() > 1 || queryNameWithPotentialValue.contains("=")
          if (queryParamHasValueDefined) {
            // Handles the special case where the query param is defined with an empty value
            def value = splitted.size() == 1 ? "" : splitted[1]
            allQueryParams.put(splitted[0], value)
          } else {
            allQueryParams.put(splitted[0], new NoParameterValue());
          }
        }
      }
    } else {
      targetUri = uri
    }

    def actualUri = URIBuilder.convertToURI(assembleCompleteTargetPath(targetUri))
    def uriBuilder = new URIBuilder(actualUri, this.urlEncodingEnabled, encoderConfig())

    if (!POST.name().equalsIgnoreCase(method) && !requestParameters?.isEmpty()) {
      allQueryParams << requestParameters
    }

    if (!queryParameters?.isEmpty()) {
      allQueryParams << queryParameters
    }

    if (GET.name().equalsIgnoreCase(method) && !formParameters?.isEmpty()) {
      allQueryParams << formParameters
    }

    if (!allQueryParams.isEmpty()) {
      uriBuilder.addQueryParams(allQueryParams)
    }

    def requestUriForLogging = uriBuilder.toString()
    requestUriForLogging
  }

  @SuppressWarnings("GroovyUnusedDeclaration")
  private
  Response sendRequest(path, assertionClosure, FilterableRequestSpecification requestSpecification, Map filterContextProperties) {
    notNull path, "Path"
    path = extractRequestParamsIfNeeded(path);
    def method = requestSpecification.getMethod()
    def targetUri = getTargetURI(path);
    def targetPath = getTargetPath(path)

    assertCorrectNumberOfPathParams()

    if (!requestSpecification.getHttpClient() instanceof AbstractHttpClient) {
      throw new IllegalStateException(format("Unfortunately Rest Assured only supports Http Client instances of type %s.", AbstractHttpClient.class.getName()));
    }

    def http = new RestAssuredHttpBuilder(targetUri, assertionClosure, urlEncodingEnabled, config, requestSpecification.getHttpClient() as AbstractHttpClient);
    applyProxySettings(http)
    applyRestAssuredConfig(http)
    registerRestAssuredEncoders(http);
    setRequestHeadersToHttpBuilder(http)

    if (cookies.exist()) {
      http.getHeaders() << [Cookie: cookies.collect { it.name + "=" + it.value }.join("; ")]
    }

    // Allow returning a the response
    def restAssuredResponse = new RestAssuredResponseImpl(logRepository: logRepository)
    RestAssuredConfig cfg = config ?: new RestAssuredConfig();
    restAssuredResponse.setSessionIdName(cfg.getSessionConfig().sessionIdName())
    restAssuredResponse.setDecoderConfig(cfg.getDecoderConfig())
    restAssuredResponse.setConnectionManager(http.client.connectionManager)
    restAssuredResponse.setConfig(cfg)
    restAssuredResponse.setFilterContextProperties(filterContextProperties)
    responseSpecification.restAssuredResponse = restAssuredResponse
    def acceptContentType = assertionClosure.getResponseContentType()

    if (shouldApplySSLConfig(http, cfg)) {
      def sslConfig = cfg.getSSLConfig();
      new CertAuthScheme(pathToKeyStore: sslConfig.getPathToKeyStore(), keyStorePassword: sslConfig.getKeyStorePassword(),
              keystoreType: sslConfig.getKeyStoreType(), keyStore: sslConfig.getKeyStore(),
              pathToTrustStore: sslConfig.getPathToTrustStore(), trustStorePassword: sslConfig.getTrustStorePassword(),
              trustStoreType: sslConfig.getTrustStoreType(), trustStore: sslConfig.getTrustStore(),
              port: sslConfig.getPort(), sslSocketFactory: sslConfig.getSSLSocketFactory(), x509HostnameVerifier: sslConfig.getX509HostnameVerifier())
              .authenticate(http)
    }

    authenticationScheme.authenticate(http)

    if (mayHaveBody(method)) {
      if (hasFormParams() && requestBody != null) {
        throw new IllegalStateException("You can either send form parameters OR body content in $method, not both!");
      }
      def bodyContent = createFormParamBodyContent(assembleBodyContent(method))
      if (POST.name().equalsIgnoreCase(method)) {
        http.post(path: targetPath, body: bodyContent,
                requestContentType: requestHeaders.getValue(CONTENT_TYPE),
                contentType: acceptContentType) { response, content ->
          if (assertionClosure != null) {
            assertionClosure.call(response, content)
          }
        }
      } else if (PATCH.name().equalsIgnoreCase(method)) {
        http.patch(path: targetPath, body: bodyContent,
                requestContentType: requestHeaders.getValue(CONTENT_TYPE),
                contentType: acceptContentType) { response, content ->
          if (assertionClosure != null) {
            assertionClosure.call(response, content)
          }
        }
      } else {
        requestBody = bodyContent
        sendHttpRequest(http, method, acceptContentType, targetPath, assertionClosure)
      }
    } else {
      sendHttpRequest(http, method, acceptContentType, targetPath, assertionClosure)
    }
    return restAssuredResponse
  }

  void assertCorrectNumberOfPathParams() {
    // Path param size is named - (unnamed - named) since named path params may override unnamed if they target the same placeholder
    if (!getRedundantNamedPathParams().isEmpty() || !getRedundantUnnamedPathParamValues().isEmpty() || !getUndefinedPathParamPlaceholders().isEmpty()) {
      def pathParamPlaceholderSize = getPathParamPlaceholders().size()
      def namedPathParams = getNamedPathParams()
      def pathParamSize = namedPathParams.size() + unnamedPathParamsTuples.findAll { it.second != null }.findAll {
        !namedPathParams.containsKey(it.second)
      }.size()

      def redundantNamedPathParams = getRedundantNamedPathParams()
      def redundantUnnamedPathParamValues = getRedundantUnnamedPathParamValues()
      def hasRedundantNamedPathParams = redundantNamedPathParams.size() > 0
      def hasRedundantUnnamedPathParamValues = redundantUnnamedPathParamValues.size() > 0

      final String message
      if (pathParamPlaceholderSize != pathParamSize) {
        message = "Invalid number of path parameters. Expected ${pathParamPlaceholderSize}, was ${pathParamSize}."
      } else {
        message = "Path parameters were not correctly defined."
      }

      String redundantMessage = ""
      if (hasRedundantNamedPathParams || hasRedundantUnnamedPathParamValues) {
        redundantMessage = " Redundant path parameters are: "

        if (hasRedundantNamedPathParams) {
          redundantMessage += "${redundantNamedPathParams.entrySet().join(", ")}"
        }
        if (hasRedundantNamedPathParams && hasRedundantUnnamedPathParamValues) {
          redundantMessage += " and "
        } else if (hasRedundantNamedPathParams && !hasRedundantUnnamedPathParamValues) {
          redundantMessage += "."
        }
        if (hasRedundantUnnamedPathParamValues) {
          redundantMessage += "${redundantUnnamedPathParamValues.join(", ")}."
        }
      }

      String undefinedMessage = ""
      if (!getUndefinedPathParamPlaceholders().isEmpty()) {
        undefinedMessage = " Undefined path parameters are: ${getUndefinedPathParamPlaceholders().join(", ")}."
      }

      throw new IllegalArgumentException("${message}${redundantMessage}${undefinedMessage}")
    }
  }

  boolean shouldApplySSLConfig(http, RestAssuredConfig cfg) {
    URI uri = ((URIBuilder) http.getUri()).toURI();
    if (uri == null) throw new IllegalStateException("a default URI must be set");
    uri.getScheme()?.toLowerCase() == "https" && cfg.getSSLConfig().isUserConfigured() && !(authenticationScheme instanceof CertAuthScheme)
  }

  def applyRestAssuredConfig(HTTPBuilder http) {
    // Decoder config should always be applied regardless if restAssuredConfig is null or not because
    // by default we should support GZIP and DEFLATE decoding.
    applyContentDecoders(http, (restAssuredConfig?.getDecoderConfig() ?: new DecoderConfig()).contentDecoders());
    if (restAssuredConfig != null) {
      applyRedirectConfig(restAssuredConfig.getRedirectConfig())
      applyHttpClientConfig(restAssuredConfig.getHttpClientConfig())
      applyEncoderConfig(http, restAssuredConfig.getEncoderConfig())
      applySessionConfig(restAssuredConfig.getSessionConfig())
    }
    if (!httpClientParams.isEmpty()) {
      def p = http.client.getParams();

      httpClientParams.each { key, value ->
        p.setParameter(key, value)
      }
    }
  }

  private def applyContentDecoders(HTTPBuilder httpBuilder, List<DecoderConfig.ContentDecoder> contentDecoders) {
    def httpBuilderContentEncoders = contentDecoders.collect { contentDecoder -> ContentEncoding.Type.valueOf(contentDecoder.toString()) }.toArray()
    httpBuilder.setContentEncoding(httpBuilderContentEncoders)
  }

  def applySessionConfig(SessionConfig sessionConfig) {
    if (sessionConfig.isSessionIdValueDefined() && !cookies.hasCookieWithName(sessionConfig.sessionIdName())) {
      cookie(sessionConfig.sessionIdName(), sessionConfig.sessionIdValue())
    }
  }

  def applyEncoderConfig(HTTPBuilder httpBuilder, EncoderConfig encoderConfig) {
    httpBuilder.encoders.setEncoderConfig(encoderConfig)
  }

  def applyHttpClientConfig(HttpClientConfig httpClientConfig) {
    ([:].plus(httpClientConfig.params())).each { key, value ->
      putIfAbsent(httpClientParams, key, value)
    }
  }

  def applyRedirectConfig(RedirectConfig redirectConfig) {
    putIfAbsent(httpClientParams, ALLOW_CIRCULAR_REDIRECTS, redirectConfig.allowsCircularRedirects())
    putIfAbsent(httpClientParams, HANDLE_REDIRECTS, redirectConfig.followsRedirects())
    putIfAbsent(httpClientParams, MAX_REDIRECTS, redirectConfig.maxRedirects())
    putIfAbsent(httpClientParams, REJECT_RELATIVE_REDIRECT, redirectConfig.rejectRelativeRedirects())
  }

  private def putIfAbsent(Map map, key, value) {
    if (!map.containsKey(key)) {
      map.put(key, value)
    }
  }

  def assembleBodyContent(httpMethod) {
    if (hasFormParams() && !GET.name().equalsIgnoreCase(httpMethod)) {
      if (POST.name().equalsIgnoreCase(httpMethod)) {
        mergeMapsAndRetainOrder(requestParameters, formParameters)
      } else {
        formParameters
      }
    } else if (multiParts.isEmpty()) {
      requestBody
    } else {
      new byte[0]
    }
  }

  def mergeMapsAndRetainOrder(Map<String, Object> map1, Map<String, Object> map2) {
    def newMap = new LinkedHashMap()
    newMap.putAll(map1)
    newMap.putAll(map2)
    newMap
  }

  def setRequestHeadersToHttpBuilder(HTTPBuilder http) {
    def httpHeaders = http.getHeaders();
    requestHeaders.each { header ->
      def headerName = header.getName()
      def headerValue = header.getValue()
      if (httpHeaders.containsKey(headerName)) {
        def values = [httpHeaders.get(headerName)];
        values << headerValue
        def headerVal = values.flatten()
        httpHeaders.put(headerName, headerVal)
      } else {
        httpHeaders.put(headerName, headerValue)
      }
    }
  }

  private def createFormParamBodyContent(bodyContent) {
    return bodyContent instanceof Map ? createFormParamBody(bodyContent) : bodyContent
  }

  private String getTargetPath(String path) {
    if (isFullyQualified(path)) {
      return new URL(path).getPath()
    }

    def baseUriPath = ""
    if (!(baseUri == null || baseUri == "")) {
      def uri = new URI(baseUri)
      baseUriPath = uri.getPath()
    }
    return mergeAndRemoveDoubleSlash(mergeAndRemoveDoubleSlash(baseUriPath, basePath), path)
  }

  private def registerRestAssuredEncoders(HTTPBuilder http) {
    // Multipart form-data
    if (multiParts.isEmpty()) {
      return;
    }

    if (hasFormParams()) {
      convertFormParamsToMultiPartParams()
    }

    def contentTypeAsString = headers.getValue(CONTENT_TYPE)
    def ct = ContentTypeExtractor.getContentTypeWithoutCharset(contentTypeAsString)
    def subType;
    if (ct?.toLowerCase()?.startsWith(MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH)) {
      subType = substringAfter(ct, MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH)
    } else if (ct?.toLowerCase()?.contains(MULTIPART_CONTENT_TYPE_PREFIX_WITH_PLUS)) {
      subType = substringBefore(substringAfter(ct, MULTIPART_CONTENT_TYPE_PREFIX_WITH_PLUS), "+")
    } else {
      throw new IllegalArgumentException("Content-Type $ct is not valid when using multiparts, it must start with \"$MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH\" or contain \"$MULTIPART_CONTENT_TYPE_PREFIX_WITH_PLUS\".");
    }

    def charsetFromContentType = CharsetExtractor.getCharsetFromContentType(contentTypeAsString)
    def charsetToUse = isBlank(charsetFromContentType) ? restAssuredConfig().getMultiPartConfig().defaultCharset() : charsetFromContentType
    def boundaryFromContentType = BoundaryExtractor.getBoundaryFromContentType(contentTypeAsString)
    String boundaryToUse = boundaryFromContentType ?: restAssuredConfig().getMultiPartConfig().defaultBoundary()
    boundaryToUse = boundaryToUse ?: generateBoundary()
    if (!boundaryFromContentType) {
      removeHeader(CONTENT_TYPE) // there should only be one
      contentType(contentTypeAsString + "; boundary=\"" + boundaryToUse + "\"")
    }

    def multipartMode = httpClientConfig().httpMultipartMode()
    // For "defaultCharset" to be taken into account we need to 

    http.encoders.putAt ct, { contentType, content ->
      RestAssuredMultiPartEntity entity = new RestAssuredMultiPartEntity(subType, charsetToUse, multipartMode, boundaryToUse);

      multiParts.each {
        def body = it.contentBody
        def controlName = it.controlName
        def headers = it.headers
        if (headers.isEmpty()) {
          entity.addPart(controlName, body);
        } else {
          def builder = FormBodyPartBuilder.create(controlName, body)
          headers.each { name, value ->
            builder.addField(name, value)
          }
          entity.addPart(builder.build())
        }
      }

      entity;
    }
  }

  private static String generateBoundary() {
    def alphabet = (('a'..'z') + ('A'..'Z') + ('0'..'9') + '-' + '_').join()
    def rand = new Random()
    def length = rand.nextInt(11) + 30
    (1..length).collect {
      alphabet[rand.nextInt(alphabet.length())]
    }.join()
  }

  private def convertFormParamsToMultiPartParams() {
    def allFormParams = mergeMapsAndRetainOrder(requestParameters, formParameters)
    allFormParams.each {
      if (it.value instanceof List) {
        it.value.each { val ->
          multiPart(it.key, val)
        }
      } else {
        multiPart(it.key, it.value)
      }
    }
    requestParameters.clear()
    formParameters.clear()
  }

  private def sendHttpRequest(HTTPBuilder http, String method, responseContentType, targetPath, assertionClosure) {
    def allQueryParams = mergeMapsAndRetainOrder(requestParameters, queryParameters)
    if (method.equals(GET.name())) {
      allQueryParams = mergeMapsAndRetainOrder(allQueryParams, formParameters)
    }
    def hasBody = (requestBody != null)
    http.request(method, responseContentType, hasBody) {
      uri.path = targetPath

      setRequestContentType(defineRequestContentTypeAsString(method))

      if (hasBody) {
        body = requestBody
      }

      uri.query = allQueryParams

      Closure closure = assertionClosure.getClosure()
      // response handler for a success response code:
      response.success = closure

      // handler for any failure status code:
      response.failure = closure
    }
  }

  private boolean hasFormParams() {
    return !(requestParameters.isEmpty() && formParameters.isEmpty())
  }

  private boolean mayHaveBody(method) {
    return POST.name().equals(method) || formParameters.size() > 0 || multiParts.size() > 0
  }

  private String extractRequestParamsIfNeeded(String path) {
    if (path.contains("?")) {
      def indexOfQuestionMark = path.indexOf("?")
      String allParamAsString = path.substring(indexOfQuestionMark + 1);
      def keyValueParams = allParamAsString.split("&");
      keyValueParams.each {
        def keyValue = split(it, "=", 2)
        def theKey;
        def theValue;
        if (keyValue.length < 1 || keyValue.length > 2) {
          throw new IllegalArgumentException("Illegal parameters passed to REST Assured. Parameters was: $keyValueParams")
        } else if (keyValue.length == 1) {
          theKey = keyValue[0]
          theValue = it.contains("=") ? "" : new NoParameterValue();
        } else {
          theKey = keyValue[0]
          theValue = keyValue[1]
        }
        queryParam(theKey, theValue)
      };
      path = path.substring(0, indexOfQuestionMark);
    }
    return path;
  }

  private def defineRequestContentTypeAsString(String method) {
    return defineRequestContentType(method)?.toString()
  }

  private def defineRequestContentType(String method) {
    def contentType = headers.getValue(CONTENT_TYPE)
    if (contentType == null) {
      if (multiParts.size() > 0) {
        contentType = MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH + restAssuredConfig().getMultiPartConfig().defaultSubtype()
      } else if (GET.name().equals(method) && !formParameters.isEmpty()) {
        contentType = URLENC
      } else if (requestBody == null) {
        contentType = mayHaveBody(method) ? URLENC : null
      } else if (requestBody instanceof byte[]) {
        contentType = BINARY
      } else {
        contentType = TEXT
      }
    }

    if (shouldAppendCharsetToContentType(contentType)) {
      def charset = findEncoderCharsetOrReturnDefault(contentType.toString())
      if (contentType instanceof String) {
        contentType = contentType + "; " + CHARSET + "=" + charset
      } else {
        contentType = contentType.withCharset(charset)
      }
    }
    contentType
  }

  private boolean shouldAppendCharsetToContentType(contentType) {
    contentType != null && !(startsWith(contentType.toString(), MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH) || contains(contentType.toString(), MULTIPART_CONTENT_TYPE_PREFIX_WITH_PLUS)) && restAssuredConfig().encoderConfig.shouldAppendDefaultContentCharsetToContentTypeIfUndefined() && !containsIgnoreCase(contentType.toString(), CHARSET)
  }

  private String getTargetURI(String path) {
    def uri
    def pathHasScheme = isFullyQualified(path)
    if (pathHasScheme) {
      def url = new URL(path)
      uri = getTargetUriFromUrl(url)
    } else if (isFullyQualified(baseUri)) {
      def baseUriAsUrl = new URL(baseUri)
      uri = getTargetUriFromUrl(baseUriAsUrl)
    } else if (port != RestAssured.UNDEFINED_PORT) {
      uri = "$baseUri:$port"
    } else {
      uri = "$baseUri"
    }
    return uri
  }

  private String getTargetUriFromUrl(URL url) {
    def protocol = url.getProtocol()
    boolean useDefaultHttps = false
    if (this.@port == RestAssured.UNDEFINED_PORT && protocol.equalsIgnoreCase("https")) {
      useDefaultHttps = true
    }

    def builder = new StringBuilder(protocol)
            .append("://")
            .append(url.getAuthority())

    def hasSpecifiedPortExplicitly = this.@port != RestAssured.UNDEFINED_PORT
    if (!hasPortDefined(url) && !useDefaultHttps) {
      if (hasSpecifiedPortExplicitly) {
        builder.append(":")
        builder.append(this.@port)
      } else if (!isFullyQualified(url.toString()) || hasAuthorityEqualToLocalhost(url)) {
        builder.append(":")
        builder.append(DEFAULT_HTTP_TEST_PORT)
      }
    }
    return builder.toString()
  }

  private boolean hasAuthorityEqualToLocalhost(uri) {
    uri.getAuthority().trim().equalsIgnoreCase(LOCALHOST)
  }

  private boolean hasPortDefined(uri) {
    return uri.getPort() != -1;
  }


  private def serializeIfNeeded(Object object) {
    serializeIfNeeded(object, requestContentType)
  }

  private def serializeIfNeeded(Object object, contentType) {
    isSerializableCandidate(object) ? ObjectMapping.serialize(object, contentType, findEncoderCharsetOrReturnDefault(contentType), null, objectMappingConfig(), restAssuredConfig().getEncoderConfig()) : object.toString()
  }

  private def applyPathParamsAndSendRequest(String method, String path, Object... unnamedPathParams) {
    notNull path, "path"
    notNull trimToNull(method), "Method"
    notNull unnamedPathParams, "Path params"
    this.method = method.trim().toUpperCase();
    this.path = path;
    if (unnamedPathParams != null) {
      def nullParamIndices = []
      for (int i = 0; i < unnamedPathParams.length; i++) {
        if (unnamedPathParams[i] == null) {
          nullParamIndices << i
        }
      }
      if (!nullParamIndices.isEmpty()) {
        def sizeOne = nullParamIndices.size() == 1
        throw new IllegalArgumentException("Unnamed path parameter cannot be null (path parameter${sizeOne ? "" : "s"} at ${sizeOne ? "index" : "indices"} ${nullParamIndices.join(",")} ${sizeOne ? "is" : "are"} null)");
      }

      buildUnnamedPathParameterTuples(unnamedPathParams)
    }
    if (authenticationScheme instanceof NoAuthScheme && !(defaultAuthScheme instanceof NoAuthScheme)) {
      // Use default auth scheme
      authenticationScheme = defaultAuthScheme
    }

    if (authenticationScheme instanceof FormAuthScheme) {
      // Form auth scheme is handled a bit differently than other auth schemes since it's implemented by a filter.
      def formAuthScheme = authenticationScheme as FormAuthScheme
      filters.removeAll { AuthFilter.class.isAssignableFrom(it.getClass()) }
      filters.add(0, new FormAuthFilter(userName: formAuthScheme.userName, password: formAuthScheme.password, formAuthConfig: formAuthScheme.config, sessionConfig: sessionConfig()))
    }
    def logConfig = restAssuredConfig().getLogConfig()
    if (logConfig.isLoggingOfRequestAndResponseIfValidationFailsEnabled()) {
      if (!filters.any { RequestLoggingFilter.class.isAssignableFrom(it.getClass()) }) {
        log().ifValidationFails(logConfig.logDetailOfRequestAndResponseIfValidationFails(), logConfig.isPrettyPrintingEnabled())
      }
      if (!filters.any { ResponseLoggingFilter.class.isAssignableFrom(it.getClass()) }) {
        responseSpecification.log().ifValidationFails(logConfig.logDetailOfRequestAndResponseIfValidationFails(), logConfig.isPrettyPrintingEnabled())
      }
    }
    restAssuredConfig = config ?: new RestAssuredConfig()

    if (!filters.any { ResponseLoggingFilter.class.isAssignableFrom(it.getClass()) } && responseSpecification?.getLogDetail()) {
      filters.add(new ResponseLoggingFilter(responseSpecification.getLogDetail(),
              logConfig.isPrettyPrintingEnabled(), logConfig.defaultStream()))
    }

    // Sort filters by order
    filters = filters.toSorted { f1, f2 -> getFilterOrder(f1) <=> getFilterOrder(f2) }

    // Add timing filter if it has not been added manually
    if (!filters*.getClass().any { TimingFilter.class.isAssignableFrom(it) }) {
      filters << new TimingFilter()
    }

    filters << new SendRequestFilter()
    def ctx = newFilterContext(responseSpecification.assertionClosure, filters.iterator(), [:])
    httpClient = httpClientConfig().httpClientInstance()
    def response = ctx.next(this, responseSpecification)
    responseSpecification.assertionClosure.validate(response)
    return response
  }

  private def applyPathParamsAndSendRequest(Method method, String path, Object... unnamedPathParams) {
    applyPathParamsAndSendRequest(notNull(method, Method.class).name(), path, unnamedPathParams)
  }

  void buildUnnamedPathParameterTuples(Object[] unnamedPathParameterValues) {
    if (unnamedPathParameterValues == null || unnamedPathParameterValues.length == 0) {
      this.unnamedPathParamsTuples = new ArrayList<Tuple2<String, String>>();
    } else {
      // Undefined placeholders since named path params have precedence over unnamed
      def keys = getUndefinedPathParamPlaceholders()
      List<Tuple2<String, String>> list = new ArrayList<>()
      for (int i = 0; i < unnamedPathParameterValues.length; i++) {
        def val = serializeIfNeeded(unnamedPathParameterValues[i])
        def key = i < keys.size() ? keys.get(i) : null
        list.add(new Tuple2<String, String>(key, val))
      }
      this.unnamedPathParamsTuples = list
    }
  }

  String partiallyApplyPathParams(String path, boolean encodePath, List<String> unnamedPathParams) {
    def unnamedPathParamSize = unnamedPathParams?.size() ?: 0

    def host = getTargetURI(path)
    def targetPath = getTargetPath(path)

    def pathWithoutQueryParams = substringBefore(targetPath, "?");
    def shouldAppendSlashAfterEncoding = pathWithoutQueryParams.endsWith("/")
    // The last slash is removed later so we may need to add it again
    def queryParams = substringAfter(path, "?")

    int numberOfUnnamedPathParametersUsed = 0;
    def pathParamNameUsageCount = [:].withDefault { 0 }

    def pathTemplate = ~/.*\{\w+\}.*/
    // If a path fragment contains double slash we need to replace it with something else to not mess up the path
    def hasPathParameterWithDoubleSlash = indexOf(pathWithoutQueryParams, DOUBLE_SLASH) != -1

    def tempParams;
    if (hasPathParameterWithDoubleSlash) {
      tempParams = replace(pathWithoutQueryParams, DOUBLE_SLASH, "RA_double_slash__");
    } else {
      tempParams = pathWithoutQueryParams
    }

    def pathParamFiller = { String separator, boolean performEncode, String acc, String subresource ->
      def indexOfStartBracket
      def indexOfEndBracket = 0
      while ((indexOfStartBracket = subresource.indexOf(TEMPLATE_START, indexOfEndBracket)) >= 0) {
        indexOfEndBracket = subresource.indexOf(TEMPLATE_END, indexOfStartBracket)
        // 3 means "{" and "}" and at least one character
        if (indexOfStartBracket >= 0 && indexOfEndBracket >= 0 && subresource.length() >= 3) {
          def pathParamValue
          def pathParamName = subresource.substring(indexOfStartBracket + 1, indexOfEndBracket)
          // Get path parameter name, what's between the "{" and "}"
          def value = findNamedPathParamValue(pathParamName, pathParamNameUsageCount)
          if (value == null && numberOfUnnamedPathParametersUsed < unnamedPathParamSize && unnamedPathParams[numberOfUnnamedPathParametersUsed].toString() != null) {
            pathParamValue = unnamedPathParams[numberOfUnnamedPathParametersUsed].toString()
            numberOfUnnamedPathParametersUsed += 1
          } else {
            // We return the template again if no match found since we might be interested in partially applied path
            pathParamValue = value == null ? TEMPLATE_START + pathParamName + TEMPLATE_END : value
          }

          def pathToPrepend = ""
          // If declared subresource has values before the first bracket then let's find it.
          if (indexOfStartBracket != 0) {
            pathToPrepend = subresource.substring(0, indexOfStartBracket)
          }

          def pathToAppend = ""
          // If declared subresource has values after the first bracket then let's find it.
          if (subresource.length() > indexOfEndBracket) {
            pathToAppend = subresource.substring(indexOfEndBracket + 1, subresource.length())
          }

          // Since the value of the path parameter might be shorter than the template name we need to
          // adjust the "indexOfEndBracket" index in case this subresource contains more templates after
          // this value.
          def lengthOfTemplate = length(pathParamName) + 2 // 2 because "{" and "}"
          def lengthOfValue = length(pathParamValue)
          if (lengthOfTemplate != lengthOfValue) {
            if (lengthOfTemplate > lengthOfValue) {
              indexOfEndBracket -= (lengthOfTemplate - lengthOfValue)
            } else {
              indexOfEndBracket += (lengthOfValue - lengthOfTemplate)
            }
          }

          subresource = pathToPrepend + pathParamValue + pathToAppend
        }
      }
      format("%s${separator}%s", acc, performEncode ? encode(subresource, EncodingTarget.QUERY) : subresource).toString()
    }

    pathWithoutQueryParams = split(tempParams, "/").inject("", pathParamFiller.curry("/", encodePath))

    if (hasPathParameterWithDoubleSlash) {
      // Now get the double slash replacement back to normal double slashes
      pathWithoutQueryParams = replace(pathWithoutQueryParams, "RA_double_slash__", encode(DOUBLE_SLASH, EncodingTarget.QUERY))
    }

    if (shouldAppendSlashAfterEncoding) {
      pathWithoutQueryParams += "/"
    }

    if (queryParams.matches(pathTemplate)) {
      // Note that we do NOT url encode query params here, that happens by UriBuilder at a later stage.
      queryParams = split(queryParams, "&").inject("", pathParamFiller.curry("&", false)).substring(1)
      // 1 means that we remove first & since query parameters starts with ?

    }
    host + (isEmpty(queryParams) ? pathWithoutQueryParams : pathWithoutQueryParams + "?" + queryParams)
  }


  private String findNamedPathParamValue(String pathParamName, pathParamNameUsageCount) {
    def pathParamValues = this.namedPathParameters.get(pathParamName);
    def pathParamValue
    if (pathParamValues instanceof Collection) {
      def pathParamCount = pathParamNameUsageCount[pathParamName]
      pathParamNameUsageCount[pathParamName] = pathParamCount++
      pathParamValue = pathParamValues.get(pathParamCount)
    } else {
      pathParamValue = pathParamValues
    }
    pathParamValue?.toString()
  }

  private String createFormParamBody(Map<String, Object> formParams) {
    final StringBuilder body = new StringBuilder();
    for (Entry<String, Object> entry : formParams.entrySet()) {
      body.append(encode(entry.getKey(), EncodingTarget.BODY));
      if (!(entry.getValue() instanceof NoParameterValue)) {
        body.append("=").append(handleMultiValueParamsIfNeeded(entry));
      }
      body.append("&");
    }
    if (!formParams.isEmpty()) {
      body.deleteCharAt(body.length() - 1); //Delete last &
    }
    return body.toString();
  }


  private String encode(Object string, EncodingTarget encodingType) {
    string = string.toString()
    if (urlEncodingEnabled) {
      def charset
      if (encodingType == EncodingTarget.BODY) {
        charset = encoderConfig().defaultContentCharset()
        def contentType = headers.getValue(CONTENT_TYPE)
        if (contentType instanceof String) {
          def tempCharset = CharsetExtractor.getCharsetFromContentType(contentType as String)
          if (tempCharset != null) {
            charset = tempCharset
          } else if (encoderConfig().hasDefaultCharsetForContentType(contentType as String)) {
            charset = encoderConfig().defaultCharsetForContentType(contentType as String)
          }
        }
      } else { // Query or path parameter
        charset = encoderConfig().defaultQueryParameterCharset()
      }
      return URIBuilder.encode(string, charset)
    } else {
      return string
    }
  }

  private def handleMultiValueParamsIfNeeded(Entry<String, Object> entry) {
    def value = entry.getValue()
    if (value instanceof List) {
      def key = encode(entry.getKey(), EncodingTarget.BODY)
      final StringBuilder multiValueList = new StringBuilder();
      value.eachWithIndex { val, index ->
        multiValueList.append(encode(val.toString(), EncodingTarget.BODY))
        if (index != value.size() - 1) {
          multiValueList.append("&").append(key).append("=")
        }
      }
      value = multiValueList.toString()
    } else {
      value = encode(value, EncodingTarget.BODY)
    }
    return value
  }

  void setResponseSpecification(ResponseSpecification responseSpecification) {
    this.responseSpecification = responseSpecification
  }

  String getBaseUri() {
    return baseUri
  }

  String getBasePath() {
    return basePath
  }

  String getDerivedPath() {
    def uri = partiallyApplyPathParams(path, true, unnamedPathParamsTuples.collect { it.second })
    getDerivedPath(uri)
  }

  String getUserDefinedPath() {
    return PathSupport.getPath(path)
  }

  String getMethod() {
    return method
  }

  String getURI() {
    def uri = partiallyApplyPathParams(path, true, unnamedPathParamsTuples.collect { it.second })
    getURI(uri);
  }

  int getPort() {
    def host = new URL(getTargetURI(path))
    return host.getPort()
  }

  Map<String, String> getFormParams() {
    return Collections.unmodifiableMap(formParameters)
  }

  Map<String, String> getPathParams() {
    def namedPathParams = getNamedPathParams()
    def map = new LinkedHashMap<String, String>(namedPathParams)
    map.putAll(getUnnamedPathParams().findAll { !namedPathParams.keySet().contains(it.key) })
    return Collections.unmodifiableMap(map)
  }

  Map<String, String> getNamedPathParams() {
    return Collections.unmodifiableMap(namedPathParameters)
  }

  Map<String, String> getUnnamedPathParams() {
    // If it.first = null means that it's a placeholder
    def map = unnamedPathParamsTuples.findAll { it.first != null }.inject([:], { m, t ->
      m.putAt(t.first, t.second)
      m
    })
    return Collections.unmodifiableMap(map)
  }

  List<String> getUnnamedPathParamValues() {
    return Collections.unmodifiableList(unnamedPathParamsTuples == null ? Collections.emptyList() : unnamedPathParamsTuples.findAll {
      it.second != null
    }.collect {
      it.second
    })
  }

  Map<String, String> getRequestParams() {
    return Collections.unmodifiableMap(requestParameters)
  }

  Map<String, String> getQueryParams() {
    return Collections.unmodifiableMap(queryParameters)
  }

  List<MultiPartSpecification> getMultiPartParams() {
    return multiParts.collect {
      new MultiPartSpecificationImpl(content: it.content, charset: it.charset, fileName: it.fileName, mimeType: it.mimeType, controlName: it.controlName, headers: it.headers)
    }
  }

  Headers getHeaders() {
    return requestHeaders
  }

  Cookies getCookies() {
    return cookies
  }

  def getBody() {
    requestBody
  }

  List<Filter> getDefinedFilters() {
    return Collections.unmodifiableList(filters)
  }

  RestAssuredConfig getConfig() {
    return restAssuredConfig
  }

  HttpClient getHttpClient() {
    return httpClient
    // @Delegate doesn't work because of http://jira.codehaus.org/browse/GROOVY-4647 (when it's fixed 9619c3b should be used instead)
  }

  ProxySpecification getProxySpecification() {
    return proxySpecification
  }

  FilterableRequestSpecification path(String path) {
    notNull path, "Path"
    this.path = trimToEmpty(path)
    return this
  }

  List<String> getUndefinedPathParamPlaceholders() {
    def uri = partiallyApplyPathParams(path, false, unnamedPathParamsTuples.collect { it.second })
    getPlaceholders(uri)
  }

  List<String> getPathParamPlaceholders() {
    def uri = getTargetPath(contains(path, "://") ? substringAfter(path, "://") : path)
    getPlaceholders(uri)
  }

  String getRequestContentType() {
    return getContentType()
  }

  @Override
  String getContentType() {
    return requestHeaders.getValue(CONTENT_TYPE)
  }

  @Override
  RequestSpecification noFilters() {
    this.filters.clear()
    this
  }

  @Override
  RequestSpecification noFiltersOfType(Class filterType) {
    notNull filterType, "Filter type"
    this.filters.removeAll { filterType.isAssignableFrom(it.getClass()) }
    this
  }

  private class RestAssuredHttpBuilder extends HTTPBuilder {
    def assertionClosure

    RestAssuredHttpBuilder(Object defaultURI, assertionClosure, boolean urlEncodingEnabled, RestAssuredConfig config, AbstractHttpClient client) throws URISyntaxException {
      super(defaultURI, urlEncodingEnabled, config?.getEncoderConfig(), config?.getDecoderConfig(), config?.getOAuthConfig(), client)
      this.assertionClosure = assertionClosure
    }

    /**
     * A copy of HTTP builders doRequest method with two exceptions.
     * <ol>
     *  <li>The exception is that the entity's content is not closed if no body matchers are specified.</li>
     *  <li>If headers contain a list of elements the headers are added and not overridden</li>
     *  </ol>
     */
    protected Object doRequest(HTTPBuilder.RequestConfigDelegate delegate) {
      if (delegate.getRequest() instanceof HttpPost) {
        if (assertionClosure != null) {
          delegate.getResponse().put(
                  Status.FAILURE.toString(), { response, content ->
            assertionClosure.call(response, content)
          });
        }
        delegate.uri.query = queryParameters
      }
      final HttpRequestBase reqMethod = delegate.getRequest()
      Object acceptContentType = delegate.getContentType()
      if (!requestHeaders.hasHeaderWithName("Accept")) {
        String acceptContentTypes = acceptContentType.toString()
        if (acceptContentType instanceof ContentType)
          acceptContentTypes = ((ContentType) acceptContentType).getAcceptHeader()
        reqMethod.setHeader("Accept", acceptContentTypes)
      }
      reqMethod.setURI(delegate.getUri().toURI())
      if (shouldApplyContentTypeFromRestAssuredConfigDelegate(delegate, reqMethod)) {
        def contentTypeToUse = trim(delegate.getRequestContentType())
        reqMethod.setHeader(CONTENT_TYPE, contentTypeToUse);
      }
      if (reqMethod.getURI() == null)
        throw new IllegalStateException("Request URI cannot be null")
      Map<?, ?> headers1 = delegate.getHeaders()
      for (Object key : headers1.keySet()) {
        if (key == null) continue;
        Object val = headers1.get(key);
        if (val == null) {
          reqMethod.removeHeaders(key.toString())
        } else if (!key.toString().equalsIgnoreCase(CONTENT_TYPE) || !val.toString().startsWith(MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH)) {
          // Don't overwrite multipart header because HTTP Client have added boundary
          def keyAsString = key.toString()
          if (val instanceof Collection) {
            val = val.flatten().collect { it?.toString() }
            val.each {
              reqMethod.addHeader(keyAsString, it)
            }
          } else {
            reqMethod.setHeader(keyAsString, val.toString());
          }
        }
      }
      final HttpResponseDecorator resp = new HttpResponseDecorator(
              this.client.execute(reqMethod, delegate.getContext()),
              delegate.getContext(), null)
      try {
        int status = resp.getStatusLine().getStatusCode();
        Closure responseClosure = delegate.findResponseHandler(status);

        Object returnVal;
        Object[] closureArgs = null;
        switch (responseClosure.getMaximumNumberOfParameters()) {
          case 1:
            returnVal = responseClosure.call(resp);
            break;
          case 2: // parse the response entity if the response handler expects it:
            HttpEntity entity = resp.getEntity();
            try {
              if (entity == null || entity.getContentLength() == 0) {
                returnVal = responseClosure.call(resp, EMPTY);
              } else {
                returnVal = responseClosure.call(resp, this.parseResponse(resp, acceptContentType));
              }
            } catch (Exception ex) {
              throw new ResponseParseException(resp, ex);
            }
            break;
          default:
            throw new IllegalArgumentException(
                    "Response closure must accept one or two parameters");
        }
        return returnVal;
      }
      finally {
        if (responseSpecification.hasBodyAssertionsDefined()) {
          HttpEntity entity = resp.getEntity();
          if (entity != null) EntityUtils.consumeQuietly(entity);
        }
        // Close idle connections to the server
        def connectionConfig = connectionConfig()
        if (connectionConfig.shouldCloseIdleConnectionsAfterEachResponse()) {
          def closeConnectionConfig = connectionConfig.closeIdleConnectionConfig()
          client.getConnectionManager().closeIdleConnections(closeConnectionConfig.getIdleTime(), closeConnectionConfig.getTimeUnit());
        }
      }
    }

    /*
     * Is is for
     */

    private boolean shouldApplyContentTypeFromRestAssuredConfigDelegate(delegate, HttpRequestBase reqMethod) {
      def requestContentType = delegate.getRequestContentType()
      requestContentType != null && requestContentType != ANY.toString() &&
              (!reqMethod.hasProperty("entity") || reqMethod.entity?.contentType == null) &&
              !reqMethod.getAllHeaders().any { it.getName().equalsIgnoreCase(CONTENT_TYPE) }
    }

    /**
     * We override this method because ParserRegistry.getContentType(..) called by
     * the super method throws an exception if no content-type is available in the response
     * and then HTTPBuilder for some reason uses the streaming octet parser instead of the
     * defaultParser in the ParserRegistry to parse the response. To fix this we set the
     * content-type of the defaultParser if registered to Rest Assured to the response if no
     * content-type is defined.
     */
    protected Object parseResponse(HttpResponse resp, Object contentType) {
      Parser definedDefaultParser = responseSpecification.rpr.defaultParser
      if (definedDefaultParser != null && ANY.toString().equals(contentType.toString())) {
        try {
          HttpResponseContentTypeFinder.findContentType(resp);
        } catch (IllegalArgumentException ignored) {
          // This means that no content-type is defined the response
          def entity = resp?.entity
          if (entity != null) {
            resp.entity = new HttpEntityWrapper(entity) {

              org.apache.http.Header getContentType() {
                // We don't use CONTENT_TYPE field because of issue 253 (no tests for this!)
                return new BasicHeader("Content-Type", definedDefaultParser.getContentType())
              }
            }
          }
        }
      }
      return super.parseResponse(resp, contentType)
    }
  }

  private def applyProxySettings(RestAssuredHttpBuilder http) {
    // make client aware of JRE proxy settings http://freeside.co/betamax/
    http.client.routePlanner = new RestAssuredProxySelectorRoutePlanner(http.client.connectionManager.schemeRegistry,
            new RestAssuredProxySelector(delegatingProxySelector: ProxySelector.default, proxySpecification: proxySpecification), proxySpecification)
    if (proxySpecification?.hasAuth()) {
      CredentialsProvider credsProvider = new BasicCredentialsProvider();
      def address = new InetSocketAddress(proxySpecification.host, proxySpecification.port)
      // We need to convert the host to an IP since that's what our proxy selector (RestAssuredProxySelector) expects
      def authScope = new AuthScope(address.getAddress().getHostAddress(), proxySpecification.getPort())
      def credentials = new UsernamePasswordCredentials(proxySpecification.username, proxySpecification.password)
      credsProvider.setCredentials(authScope, credentials);
      http.client.setCredentialsProvider(credsProvider);
    }
  }

  private String assembleCompleteTargetPath(requestPath) {
    def targetUri
    def targetPath
    if (isFullyQualified(requestPath)) {
      targetUri = ""
      targetPath = ""
    } else {
      targetUri = getTargetURI(path)
      targetPath = substringBefore(getTargetPath(path), "?")
    }
    return mergeAndRemoveDoubleSlash(mergeAndRemoveDoubleSlash(targetUri, targetPath), requestPath);
  }

  private String findEncoderCharsetOrReturnDefault(String contentType) {
    def charset = CharsetExtractor.getCharsetFromContentType(contentType)
    if (charset == null) {
      final EncoderConfig cfg
      if (config == null) {
        cfg = new EncoderConfig()
      } else {
        cfg = config.getEncoderConfig()
      }

      if (cfg.hasDefaultCharsetForContentType(contentType)) {
        charset = cfg.defaultCharsetForContentType(contentType)
      } else {
        charset = cfg.defaultContentCharset()
      }
    }
    charset
  }

  private ObjectMapperConfig objectMappingConfig() {
    return config == null ? ObjectMapperConfig.objectMapperConfig() : config.getObjectMapperConfig();
  }

  private HttpClientConfig httpClientConfig() {
    return config == null ? HttpClientConfig.httpClientConfig() : config.getHttpClientConfig();
  }

  private ConnectionConfig connectionConfig() {
    return config == null ? ConnectionConfig.connectionConfig() : config.getConnectionConfig();
  }

  private EncoderConfig encoderConfig() {
    return config == null ? EncoderConfig.encoderConfig() : config.getEncoderConfig();
  }

  private SessionConfig sessionConfig() {
    return config == null ? SessionConfig.sessionConfig() : config.getSessionConfig();
  }

  RestAssuredConfig restAssuredConfig() {
    config ?: new RestAssuredConfig()
  }

  private enum EncodingTarget {
    BODY, QUERY
  }

  static List getPlaceholders(String uri) {
    Pattern p = Pattern.compile(Pattern.quote(TEMPLATE_START) + "(.*?)" + Pattern.quote(TEMPLATE_END))
    Matcher m = p.matcher(uri)
    def placeholders = new LinkedHashSet<String>() // Remove duplicates such as if we have get("/{x}/{x}")
    while (m.find()) {
      placeholders << m.group(1)?.trim()
    }
    return Collections.unmodifiableList(new ArrayList(placeholders))
  }

  static String getDerivedPath(String uri) {
    PathSupport.getPath(uri)
  }

  String getURI(String uri) {
    generateRequestUriForLogging(uri, method)
  }

  // Note that it's not possible to both redundant named and unnamed path parameters
  // as a map since redundant unnamed path parameters doesn't necessarily have a placeholder associated with it.
  // For example if we do get("/{x}", "1", "2") then there's no placeholder name for "2"
  Map<String, String> getRedundantNamedPathParams() {
    def placeholders = getPathParamPlaceholders()
    getNamedPathParams().findAll { !placeholders.contains(it.key) }.asImmutable()
  }

  List<String> getRedundantUnnamedPathParamValues() {
    def allPathParams = getPathParams()
    if (getPathParamPlaceholders().minus(allPathParams.keySet()).size() +
            Math.max(getUnnamedPathParamValues().size() - getPathParamPlaceholders().size(), 0) > 0) {
      return (getUnnamedPathParamValues().minus(allPathParams.values())).asImmutable()
    }
    Collections.unmodifiableList(Collections.emptyList())
  }

  void removeUnnamedPathParamAtIndex(int indexOfParamName) {
    unnamedPathParamsTuples.remove(indexOfParamName)
    // We define the a tuple with "null, null" in order to retain path parameter order
    unnamedPathParamsTuples.add(indexOfParamName, new Tuple2<String, String>(null, null))
  }

  public void setMethod(String method) {
    this.method = method == null ? null : method.toUpperCase()
  }

  private static int getFilterOrder(Filter filter) {
    return (filter instanceof OrderedFilter) ? ((OrderedFilter) filter).getOrder()
            : OrderedFilter.DEFAULT_PRECEDENCE;
  }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-08-08 13:20:50.258
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-08-08 13:20:50.259
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-08-08 13:23:19.686
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
/*
 * Copyright 2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.restassured.internal

import io.restassured.RestAssured
import io.restassured.authentication.AuthenticationScheme
import io.restassured.authentication.CertAuthScheme
import io.restassured.authentication.FormAuthScheme
import io.restassured.authentication.NoAuthScheme
import io.restassured.config.*
import io.restassured.filter.Filter
import io.restassured.filter.OrderedFilter
import io.restassured.filter.log.RequestLoggingFilter
import io.restassured.filter.log.ResponseLoggingFilter
import io.restassured.filter.time.TimingFilter
import io.restassured.http.*
import io.restassured.internal.MapCreator.CollisionStrategy
import io.restassured.internal.filter.FilterContextImpl
import io.restassured.internal.filter.FormAuthFilter
import io.restassured.internal.filter.SendRequestFilter
import io.restassured.internal.http.*
import io.restassured.internal.log.LogRepository
import io.restassured.internal.mapping.ObjectMapperSerializationContextImpl
import io.restassured.internal.mapping.ObjectMapping
import io.restassured.internal.multipart.MultiPartInternal
import io.restassured.internal.multipart.MultiPartSpecificationImpl
import io.restassured.internal.multipart.RestAssuredMultiPartEntity
import io.restassured.internal.proxy.RestAssuredProxySelector
import io.restassured.internal.proxy.RestAssuredProxySelectorRoutePlanner
import io.restassured.internal.support.ParameterUpdater
import io.restassured.internal.support.PathSupport
import io.restassured.mapper.ObjectMapper
import io.restassured.mapper.ObjectMapperType
import io.restassured.parsing.Parser
import io.restassured.response.Response
import io.restassured.specification.*
import io.restassured.spi.AuthFilter
import org.apache.http.HttpEntity
import org.apache.http.HttpResponse
import org.apache.http.auth.AuthScope
import org.apache.http.auth.UsernamePasswordCredentials
import org.apache.http.client.CredentialsProvider
import org.apache.http.client.HttpClient
import org.apache.http.client.methods.HttpPost
import org.apache.http.client.methods.HttpRequestBase
import org.apache.http.entity.HttpEntityWrapper
import org.apache.http.entity.mime.FormBodyPartBuilder
import org.apache.http.impl.client.AbstractHttpClient
import org.apache.http.impl.client.BasicCredentialsProvider
import org.apache.http.message.BasicHeader
import org.apache.http.util.EntityUtils

import java.security.KeyStore
import java.util.Map.Entry
import java.util.regex.Matcher
import java.util.regex.Pattern

import static io.restassured.config.ParamConfig.UpdateStrategy.REPLACE
import static io.restassured.http.ContentType.*
import static io.restassured.http.Method.*
import static io.restassured.internal.common.assertion.AssertParameter.notNull
import static io.restassured.internal.serialization.SerializationSupport.isSerializableCandidate
import static io.restassured.internal.support.PathSupport.isFullyQualified
import static io.restassured.internal.support.PathSupport.mergeAndRemoveDoubleSlash
import static java.lang.String.format
import static java.util.Arrays.asList
import static org.apache.commons.lang3.StringUtils.*
import static org.apache.http.client.params.ClientPNames.*

class RequestSpecificationImpl implements FilterableRequestSpecification, GroovyInterceptable {
  private static final int DEFAULT_HTTP_TEST_PORT = 8080
  private static final String CONTENT_TYPE = "Content-Type"
  private static final String DOUBLE_SLASH = "//"
  private static final String LOCALHOST = "localhost"
  private static final String CHARSET = "charset"
  private static final String ACCEPT_HEADER_NAME = "Accept"
  private static final String SSL = "SSL"
  private static final String MULTIPART = "multipart"
  private static final String MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH = MULTIPART + "/"
  private static final String MULTIPART_CONTENT_TYPE_PREFIX_WITH_PLUS = MULTIPART + "+"
  private static final String TEMPLATE_START = "{"
  private static final String TEMPLATE_END = "}"

  private String baseUri
  private String path = ""
  private String method
  private String basePath
  // If first argument is null it means that it's a redundant path param that cannot be mapped to a placeholder
  // If second argument is null it means that the parameter has been removed (but we keep it to retain order)
  private List<Tuple2<String, String>> unnamedPathParamsTuples = new ArrayList<>()
  private AuthenticationScheme defaultAuthScheme
  private int port
  private Map<String, String> requestParameters = new LinkedHashMap()
  private Map<String, String> queryParameters = new LinkedHashMap()
  private Map<String, String> formParameters = new LinkedHashMap()
  private Map<String, String> namedPathParameters = [:]
  private Map<String, String> httpClientParams = [:]
  AuthenticationScheme authenticationScheme = new NoAuthScheme()
  private FilterableResponseSpecification responseSpecification;
  private Headers requestHeaders = new Headers([])
  private Cookies cookies = new Cookies([])
  private Object requestBody;
  private List<Filter> filters = [];
  private boolean urlEncodingEnabled
  private RestAssuredConfig restAssuredConfig;
  private List<MultiPartInternal> multiParts = [];
  private ParameterUpdater parameterUpdater = new ParameterUpdater(new ParameterUpdater.Serializer() {
    String serializeIfNeeded(Object value) {
      return RequestSpecificationImpl.this.serializeIfNeeded(value)
    }
  });
  private ProxySpecification proxySpecification = null

  private LogRepository logRepository

  // This field should be removed once http://jira.codehaus.org/browse/GROOVY-4647 is resolved, merge with sha 9619c3b when it's fixed.
  private AbstractHttpClient httpClient

  public RequestSpecificationImpl(String baseURI, int requestPort, String basePath, AuthenticationScheme defaultAuthScheme, List<Filter> filters,
                                  RequestSpecification defaultSpec, boolean urlEncode, RestAssuredConfig restAssuredConfig, LogRepository logRepository,
                                  ProxySpecification proxySpecification) {
    notNull(baseURI, "baseURI");
    notNull(basePath, "basePath");
    notNull(defaultAuthScheme, "defaultAuthScheme");
    notNull(filters, "Filters")
    notNull(urlEncode, "URL Encode query params option")
    this.baseUri = baseURI
    this.basePath = basePath
    this.defaultAuthScheme = defaultAuthScheme
    this.filters.addAll(filters)
    this.urlEncodingEnabled = urlEncode
    port(requestPort)
    this.restAssuredConfig = restAssuredConfig
    if (defaultSpec != null) {
      spec(defaultSpec)
    }
    this.logRepository = logRepository
    this.proxySpecification = proxySpecification
  }

  RequestSpecification when() {
    return this;
  }

  RequestSpecification given() {
    return this;
  }

  RequestSpecification that() {
    return this;
  }

  ResponseSpecification response() {
    return responseSpecification;
  }

  Response get(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(GET, path, pathParams)
  }

  Response post(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(POST, path, pathParams)
  }

  Response put(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(PUT, path, pathParams)
  }

  Response delete(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(DELETE, path, pathParams)
  }

  Response head(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(HEAD, path, pathParams)
  }

  Response patch(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(PATCH, path, pathParams)
  }

  Response options(String path, Object... pathParams) {
    applyPathParamsAndSendRequest(OPTIONS, path, pathParams)
  }

  Response get(URI uri) {
    get(notNull(uri, "URI").toString())
  }

  Response post(URI uri) {
    post(notNull(uri, "URI").toString())
  }

  Response put(URI uri) {
    put(notNull(uri, "URI").toString())
  }

  Response delete(URI uri) {
    delete(notNull(uri, "URI").toString())
  }

  Response head(URI uri) {
    head(notNull(uri, "URI").toString())
  }

  Response patch(URI uri) {
    patch(notNull(uri, "URI").toString())
  }

  Response options(URI uri) {
    options(notNull(uri, "URI").toString())
  }

  Response get(URL url) {
    get(notNull(url, "URL").toString())
  }

  Response post(URL url) {
    post(notNull(url, "URL").toString())
  }

  Response put(URL url) {
    put(notNull(url, "URL").toString())
  }

  Response delete(URL url) {
    delete(notNull(url, "URL").toString())
  }

  Response head(URL url) {
    head(notNull(url, "URL").toString())
  }

  Response patch(URL url) {
    patch(notNull(url, "URL").toString())
  }

  Response options(URL url) {
    options(notNull(url, "URL").toString())
  }

  Response get() {
    get("")
  }

  Response post() {
    post("")
  }

  Response put() {
    put("")
  }

  Response delete() {
    delete("")
  }

  Response head() {
    head("")
  }

  Response patch() {
    patch("")
  }

  Response options() {
    options("")
  }

  Response request(Method method) {
    request(notNull(method, Method.class).name())
  }

  Response request(String method) {
    request(method, "")
  }

  Response request(Method method, String path, Object... pathParams) {
    return request(notNull(method, Method.class).name(), path, pathParams)
  }

  Response request(String method, String path, Object... pathParams) {
    applyPathParamsAndSendRequest(method, path, pathParams)
  }

  Response request(Method method, URI uri) {
    request(method, notNull(uri, URI.class).toString())
  }

  Response request(Method method, URL url) {
    request(method, notNull(url, URL.class).toString())
  }

  Response request(String method, URI uri) {
    request(method, notNull(uri, URI.class).toString())
  }

  Response request(String method, URL url) {
    request(method, notNull(url, URL.class).toString())
  }

  Response get(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(GET, path)
  }

  Response post(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(POST, path)
  }

  Response put(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(PUT, path)
  }

  Response delete(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(DELETE, path)
  }

  Response head(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(HEAD, path)
  }

  Response patch(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(PATCH, path)
  }

  Response options(String path, Map pathParamsMap) {
    pathParams(pathParamsMap)
    applyPathParamsAndSendRequest(OPTIONS, path)
  }

  RequestSpecification params(String firstParameterName, Object firstParameterValue, Object... parameterNameValuePairs) {
    notNull firstParameterName, "firstParameterName"
    notNull firstParameterValue, "firstParameterValue"
    return params(MapCreator.createMapFromParams(CollisionStrategy.OVERWRITE, firstParameterName, firstParameterValue, parameterNameValuePairs))
  }

  RequestSpecification params(Map parametersMap) {
    notNull parametersMap, "parametersMap"
    parameterUpdater.updateParameters(restAssuredConfig().paramConfig.requestParamsUpdateStrategy(), parametersMap, requestParameters)
    return this
  }

  RequestSpecification param(String parameterName, Object... parameterValues) {
    notNull parameterName, "parameterName"
    parameterUpdater.updateZeroToManyParameters(restAssuredConfig().paramConfig.requestParamsUpdateStrategy(), requestParameters, parameterName, parameterValues)
    return this
  }

  FilterableRequestSpecification removeParam(String parameterName) {
    notNull parameterName, "parameterName"
    requestParameters.remove(parameterName)
    return this
  }

  RequestSpecification param(String parameterName, Collection<?> parameterValues) {
    notNull parameterValues, "parameterValues"
    return param(parameterName, parameterValues.toArray())
  }

  RequestSpecification queryParam(String parameterName, Collection<?> parameterValues) {
    notNull parameterName, "parameterName"
    notNull parameterValues, "parameterValues"
    parameterUpdater.updateCollectionParameter(restAssuredConfig().getParamConfig().queryParamsUpdateStrategy(), queryParameters, parameterName, parameterValues)
    return this
  }

  FilterableRequestSpecification removeQueryParam(String parameterName) {
    notNull parameterName, "parameterName"
    queryParameters.remove(parameterName)
    return this
  }

  FilterableRequestSpecification removeHeader(String headerName) {
    notNull headerName, "headerName"
    def headersLeftAfterRemove = headers.findAll { !headerName.equalsIgnoreCase(it.getName()) }
    this.requestHeaders = new Headers(headersLeftAfterRemove)
    this
  }

  FilterableRequestSpecification removeCookie(String cookieName) {
    notNull cookieName, "cookieName"
    def cookiesLeftAfterRemove = cookies.findAll { !cookieName.equalsIgnoreCase(it.getName()) }
    this.cookies = new Cookies(cookiesLeftAfterRemove)
    this
  }

  FilterableRequestSpecification removeCookie(Cookie cookie) {
    notNull cookie, "cookie"
    removeCookie(cookie.getName())
    this
  }

  FilterableRequestSpecification replaceHeader(String headerName, String newValue) {
    notNull headerName, "headerName"
    removeHeader(headerName)
    def headerList = []
    headerList.addAll(this.requestHeaders.list())
    headerList.add(new Header(headerName, newValue))
    this.requestHeaders = new Headers(headerList)
    this
  }

  FilterableRequestSpecification replaceCookie(String cookieName, String value) {
    notNull cookieName, "cookieName"
    removeCookie(cookieName)
    cookie(cookieName, value)
    this
  }

  FilterableRequestSpecification replaceCookie(Cookie cookie) {
    notNull cookie, "cookie"
    removeCookie(cookie.getName())
    this.cookie(cookie)
    this
  }

  FilterableRequestSpecification replaceHeaders(Headers headers) {
    notNull headers, "headers"
    this.requestHeaders = new Headers(headers.asList())
    this
  }

  FilterableRequestSpecification replaceCookies(Cookies cookies) {
    notNull cookies, "cookies"
    this.cookies = new Cookies(cookies.asList())
    this
  }

  FilterableRequestSpecification removeHeaders() {
    this.requestHeaders = new Headers([])
    this
  }

  FilterableRequestSpecification removeCookies() {
    this.cookies = new Cookies([])
    this
  }


  RequestSpecification queryParams(String firstParameterName, Object firstParameterValue, Object... parameterNameValuePairs) {
    notNull firstParameterName, "firstParameterName"
    notNull firstParameterValue, "firstParameterValue"
    return queryParams(MapCreator.createMapFromParams(CollisionStrategy.OVERWRITE, firstParameterName, firstParameterValue, parameterNameValuePairs))
  }

  RequestSpecification queryParams(Map parametersMap) {
    notNull parametersMap, "parametersMap"
    parameterUpdater.updateParameters(restAssuredConfig().paramConfig.queryParamsUpdateStrategy(), parametersMap, queryParameters)
    return this
  }

  RequestSpecification queryParam(String parameterName, Object... parameterValues) {
    notNull parameterName, "parameterName"
    parameterUpdater.updateZeroToManyParameters(restAssuredConfig().paramConfig.queryParamsUpdateStrategy(), queryParameters, parameterName, parameterValues)
    return this
  }

  RequestSpecification formParam(String parameterName, Collection<?> parameterValues) {
    notNull parameterName, "parameterName"
    notNull parameterValues, "parameterValues"
    parameterUpdater.updateCollectionParameter(restAssuredConfig().paramConfig.formParamsUpdateStrategy(), formParameters, parameterName, parameterValues)
    return this
  }

  FilterableRequestSpecification removeFormParam(String parameterName) {
    notNull parameterName, "parameterName"
    formParameters.remove(parameterName)
    return this
  }

  RequestSpecification formParams(String firstParameterName, Object firstParameterValue, Object... parameterNameValuePairs) {
    notNull firstParameterName, "firstParameterName"
    notNull firstParameterValue, "firstParameterValue"
    return formParams(MapCreator.createMapFromParams(CollisionStrategy.OVERWRITE, firstParameterName, firstParameterValue, parameterNameValuePairs))
  }

  RequestSpecification formParams(Map parametersMap) {
    notNull parametersMap, "parametersMap"
    parameterUpdater.updateParameters(restAssuredConfig().paramConfig.formParamsUpdateStrategy(), parametersMap, formParameters)
    return this
  }

  RequestSpecification formParam(String parameterName, Object... additionalParameterValues) {
    notNull parameterName, "parameterName"
    parameterUpdater.updateZeroToManyParameters(restAssuredConfig().paramConfig.formParamsUpdateStrategy(), formParameters, parameterName, additionalParameterValues)
    return this
  }

  RequestSpecification urlEncodingEnabled(boolean isEnabled) {
    this.urlEncodingEnabled = isEnabled
    return this
  }

  RequestSpecification pathParam(String parameterName, Object parameterValue) {
    notNull parameterName, "parameterName"
    notNull parameterValue, "parameterValue"
    parameterUpdater.updateStandardParameter(REPLACE, namedPathParameters, parameterName, parameterValue)
    return this
  }

  RequestSpecification pathParams(String firstParameterName, Object firstParameterValue, Object... parameterNameValuePairs) {
    notNull firstParameterName, "firstParameterName"
    notNull firstParameterValue, "firstParameterValue"
    return pathParams(MapCreator.createMapFromParams(CollisionStrategy.OVERWRITE, firstParameterName, firstParameterValue, parameterNameValuePairs))
  }

  RequestSpecification pathParams(Map parameterNameValuePairs) {
    notNull parameterNameValuePairs, "parameterNameValuePairs"
    parameterUpdater.updateParameters(REPLACE, parameterNameValuePairs, namedPathParameters)
    return this
  }

  FilterableRequestSpecification removePathParam(String parameterName) {
    notNull parameterName, "parameterName"
    removeNamedPathParam(parameterName)
    removeUnnamedPathParam(parameterName)
    return this
  }

  FilterableRequestSpecification removeNamedPathParam(String parameterName) {
    notNull parameterName, "parameterName"
    namedPathParameters.remove(parameterName)
    this
  }

  FilterableRequestSpecification removeUnnamedPathParam(String parameterName) {
    notNull parameterName, "parameterName"
    def indexOfParamName = unnamedPathParamsTuples.findIndexOf { it.first == parameterName }
    if (indexOfParamName > -1) {
      removeUnnamedPathParamAtIndex(indexOfParamName)
    }
    this
  }

  FilterableRequestSpecification removeUnnamedPathParamByValue(String parameterValue) {
    notNull parameterValue, "parameterValue"
    def indexOfParamValue = unnamedPathParamsTuples.findIndexOf { it.second == parameterValue }
    if (indexOfParamValue > -1) {
      removeUnnamedPathParamAtIndex(indexOfParamValue)
    }
    return this
  }

  RequestSpecification config(RestAssuredConfig config) {
    this.restAssuredConfig = config
    responseSpecification?.config = config
    this
  }

  RequestSpecification keyStore(String pathToJks, String password) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    // Allow all host names in order to be backward compatible
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.keyStore(pathToJks, password).allowAllHostnames())
    this
  }

  RequestSpecification keyStore(File pathToJks, String password) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    // Allow all host names in order to be backward compatible
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.keyStore(pathToJks, password).allowAllHostnames())
    this
  }

  RequestSpecification trustStore(String path, String password) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.trustStore(path, password).allowAllHostnames())
    this
  }

  RequestSpecification trustStore(File path, String password) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.trustStore(path, password).allowAllHostnames())
    this
  }

  RequestSpecification trustStore(KeyStore trustStore) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.trustStore(trustStore))
    this
  }

  RequestSpecification keyStore(KeyStore keyStore) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.keyStore(keyStore))
    this
  }

  RequestSpecification relaxedHTTPSValidation() {
    relaxedHTTPSValidation(SSL)
  }

  RequestSpecification relaxedHTTPSValidation(String protocol) {
    def sslConfig = restAssuredConfig().getSSLConfig()
    restAssuredConfig = restAssuredConfig().sslConfig(sslConfig.relaxedHTTPSValidation(protocol))
    this
  }

  RequestSpecification filter(Filter filter) {
    notNull filter, "Filter"
    filters << filter
    return this
  }

  RequestSpecification filters(List<Filter> filters) {
    notNull filters, "Filters"
    this.filters.addAll(filters)
    return this
  }

  RequestSpecification filters(Filter filter, Filter... additionalFilter) {
    notNull filter, "Filter"
    this.filters.add(filter)
    additionalFilter?.each {
      this.filters.add(it)
    }
    return this
  }

  RequestLogSpecification log() {
    def blacklistedHeaders = restAssuredConfig().logConfig.blacklistedHeaders()
    return new RequestLogSpecificationImpl(requestSpecification: this, logRepository: logRepository, blacklistedHeaders: blacklistedHeaders)
  }

  RequestSpecification and() {
    return this;
  }

  RequestSpecification request() {
    return this;
  }

  RequestSpecification with() {
    return this;
  }

  ResponseSpecification then() {
    return responseSpecification;
  }

  ResponseSpecification expect() {
    return responseSpecification;
  }

  AuthenticationSpecification auth() {
    return new AuthenticationSpecificationImpl(this);
  }

  AuthenticationSpecification authentication() {
    return auth();
  }

  RequestSpecification port(int port) {
    if (port < 1 && port != RestAssured.UNDEFINED_PORT) {
      throw new IllegalArgumentException("Port must be greater than 0")
    }
    this.port = port
    return this
  }

  RequestSpecification body(String body) {
    notNull body, "body"
    this.requestBody = body;
    return this;
  }

  RequestSpecification baseUri(String baseUri) {
    notNull baseUri, "Base URI"
    this.baseUri = baseUri;
    return this;
  }

  RequestSpecification basePath(String basePath) {
    notNull basePath, "Base Path"
    this.basePath = basePath;
    return this;
  }

  RequestSpecification proxy(String host, int port) {
    proxy(ProxySpecification.host(host).withPort(port))
  }

  RequestSpecification proxy(String host) {
    if (UriValidator.isUri(host)) {
      proxy(new URI(host))
    } else {
      proxy(ProxySpecification.host(host))
    }
  }

  RequestSpecification proxy(int port) {
    proxy(ProxySpecification.port(port))
  }

  RequestSpecification proxy(String host, int port, String scheme) {
    proxy(new org.apache.http.client.utils.URIBuilder().setHost(host).setPort(port).setScheme(scheme).build())
  }

  RequestSpecification proxy(URI uri) {
    notNull(uri, URI.class)
    proxy(new ProxySpecification(uri.host, uri.port, uri.scheme));
  }

  RequestSpecification proxy(ProxySpecification proxySpecification) {
    notNull(proxySpecification, ProxySpecification.class)
    this.proxySpecification = proxySpecification
    this
  }

  RequestSpecification body(byte[] body) {
    notNull body, "body"
    this.requestBody = body;
    return this;
  }

  RequestSpecification body(File body) {
    notNull body, "body"
    this.requestBody = body;
    return this;
  }

  RequestSpecification body(InputStream body) {
    notNull body, "body"
    this.requestBody = body;
    return this;
  }

  RequestSpecification body(Object object) {
    notNull object, "object"
    if (!isSerializableCandidate(object)) {
      return body(object.toString());
    }

    this.requestBody = ObjectMapping.serialize(object, requestContentType, findEncoderCharsetOrReturnDefault(requestContentType), null, objectMappingConfig(), restAssuredConfig().getEncoderConfig());
    this
  }

  RequestSpecification body(Object object, ObjectMapper mapper) {
    notNull object, "object"
    notNull mapper, "Object mapper"
    def ctx = new ObjectMapperSerializationContextImpl();
    ctx.setObject(object)
    ctx.setCharset(findEncoderCharsetOrReturnDefault(requestContentType))
    ctx.setContentType(requestContentType)
    this.requestBody = mapper.serialize(ctx);
    this
  }

  RequestSpecification body(Object object, ObjectMapperType mapperType) {
    notNull object, "object"
    notNull mapperType, "Object mapper type"
    this.requestBody = ObjectMapping.serialize(object, requestContentType, findEncoderCharsetOrReturnDefault(requestContentType), mapperType, objectMappingConfig(), restAssuredConfig().getEncoderConfig())
    this
  }

  RequestSpecification contentType(ContentType contentType) {
    notNull contentType, ContentType.class
    header(CONTENT_TYPE, contentType)
  }

  RequestSpecification contentType(String contentType) {
    notNull contentType, "Content-Type header cannot be null"
    header(CONTENT_TYPE, contentType)
  }

  RequestSpecification accept(ContentType contentType) {
    notNull contentType, "Accept header"
    accept(contentType.getAcceptHeader())
  }

  RequestSpecification accept(String mediaTypes) {
    notNull mediaTypes, "Accept header media range"
    header(ACCEPT_HEADER_NAME, mediaTypes)
  }

  RequestSpecification headers(Map headers) {
    notNull headers, "headers"
    def headerList = []
    if (this.requestHeaders.exist()) {
      headerList.addAll(this.requestHeaders.list())
    }
    headers.each {
      if (it.value instanceof List) {
        it.value.each { val ->
          headerList << new Header(it.key, serializeIfNeeded(val))
        }
      } else {
        headerList << new Header(it.key, serializeIfNeeded(it.value))
      }
    }
    headerList = removeMergedHeadersIfNeeded(headerList)
    this.requestHeaders = new Headers(headerList)
    return this;
  }

  RequestSpecification headers(Headers headers) {
    notNull headers, "headers"
    if (headers.exist()) {
      def headerList = []
      if (this.requestHeaders.exist()) {
        headerList.addAll(this.requestHeaders.list())
      }

      headerList.addAll(headers.headers.list())
      headerList = removeMergedHeadersIfNeeded(headerList)
      this.requestHeaders = new Headers(headerList)
    }
    this
  }

  private List removeMergedHeadersIfNeeded(List headerList) {
    def headers = headerList.inject([], { acc, header ->
      def headerConfig = restAssuredConfig().getHeaderConfig()
      String headerName = header.getName()
      if (headerConfig.shouldOverwriteHeaderWithName(headerName)) {
        acc = acc.findAll { !headerName.equalsIgnoreCase(it.getName()) }
      }
      acc.add(header)
      acc
    })
    headers
  }

  RequestSpecification header(String headerName, Object headerValue, Object... additionalHeaderValues) {
    notNull headerName, "Header name"
    notNull headerValue, "Header value"

    def headerList = [new Header(headerName, serializeIfNeeded(headerValue))]
    additionalHeaderValues?.each {
      headerList << new Header(headerName, serializeIfNeeded(it))
    }

    return headers(new Headers(headerList))
  }

  RequestSpecification header(Header header) {
    notNull header, "Header"

    return headers(new Headers(asList(header)));
  }

  RequestSpecification headers(String firstHeaderName, Object firstHeaderValue, Object... headerNameValuePairs) {
    return headers(MapCreator.createMapFromParams(CollisionStrategy.MERGE, firstHeaderName, firstHeaderValue, headerNameValuePairs))
  }

  RequestSpecification cookies(String firstCookieName, Object firstCookieValue, Object... cookieNameValuePairs) {
    return cookies(MapCreator.createMapFromParams(CollisionStrategy.OVERWRITE, firstCookieName, firstCookieValue, cookieNameValuePairs))
  }

  RequestSpecification cookies(Map cookies) {
    notNull cookies, "cookies"
    def cookieList = []
    if (this.cookies.exist()) {
      cookieList.addAll(this.cookies.list())
    }
    cookies.each {
      cookieList << new Cookie.Builder(it.key, it.value).build();
    }
    this.cookies = new Cookies(cookieList)
    return this;
  }

  RequestSpecification cookies(Cookies cookies) {
    notNull cookies, "cookies"
    if (cookies.exist()) {
      def cookieList = []
      if (this.cookies.exist()) {
        cookieList.addAll(this.cookies.list())
      }

      cookieList.addAll(cookies.cookies.list())
      this.cookies = new Cookies(cookieList)
    }
    this
  }

  RequestSpecification cookie(String cookieName, Object value, Object... additionalValues) {
    notNull cookieName, "Cookie name"
    def cookieList = [new Cookie.Builder(cookieName, serializeIfNeeded(value)).build()]
    additionalValues?.each {
      cookieList << new Cookie.Builder(cookieName, serializeIfNeeded(it)).build()
    }

    return cookies(new Cookies(cookieList))
  }

  RequestSpecification cookie(Cookie cookie) {
    notNull cookie, "Cookie"
    return cookies(new Cookies(asList(cookie)));
  }

  RequestSpecification cookie(String cookieName) {
    cookie(cookieName, null)
  }

  RedirectSpecification redirects() {
    new RedirectSpecificationImpl(this, httpClientParams)
  }

  RequestSpecification spec(RequestSpecification requestSpecificationToMerge) {
    SpecificationMerger.merge this, requestSpecificationToMerge
    return this
  }

  RequestSpecification specification(RequestSpecification requestSpecificationToMerge) {
    return spec(requestSpecificationToMerge)
  }

  RequestSpecification sessionId(String sessionIdValue) {
    def sessionIdName = config == null ? SessionConfig.DEFAULT_SESSION_ID_NAME : config.getSessionConfig().sessionIdName()
    sessionId(sessionIdName, sessionIdValue)
  }

  RequestSpecification sessionId(String sessionIdName, String sessionIdValue) {
    notNull(sessionIdName, "Session id name")
    notNull(sessionIdValue, "Session id value")
    if (cookies.hasCookieWithName(sessionIdName)) {
      def allOtherCookies = cookies.findAll { !it.getName().equalsIgnoreCase(sessionIdName) }
      allOtherCookies.add(new Cookie.Builder(sessionIdName, sessionIdValue).build());
      this.cookies = new Cookies(allOtherCookies)
    } else {
      cookie(sessionIdName, sessionIdValue)
    }
    this
  }

  RequestSpecification multiPart(MultiPartSpecification multiPartSpec) {
    notNull multiPartSpec, "Multi-part specification"
    def mimeType = multiPartSpec.mimeType
    def content
    if (multiPartSpec.content instanceof File || multiPartSpec.content instanceof InputStream || multiPartSpec.content instanceof byte[]) {
      content = multiPartSpec.content
    } else {
      // Objects ought to be serialized
      if (mimeType == null) {
        mimeType = ANY.matches(requestContentType) ? JSON.toString() : requestContentType
      }
      content = serializeIfNeeded(multiPartSpec.content, mimeType)
    }

    final String controlName;
    if (multiPartSpec instanceof MultiPartSpecificationImpl && !multiPartSpec.isControlNameSpecifiedExplicitly()) {
      // We use the default control name if it was not explicitly specified in the multi-part spec
      controlName = restAssuredConfig().getMultiPartConfig().defaultControlName()
    } else {
      controlName = multiPartSpec.controlName
    }

    final String fileName;
    if (multiPartSpec instanceof MultiPartSpecificationImpl && !multiPartSpec.isFileNameSpecifiedExplicitly()) {
      // We use the default file name if it was not explicitly specified in the multi-part spec
      fileName = restAssuredConfig().getMultiPartConfig().defaultFileName()
    } else {
      fileName = multiPartSpec.fileName
    }

    def headers = multiPartSpec.headers

    multiParts << new MultiPartInternal(controlName: controlName, content: content, fileName: fileName, charset: multiPartSpec.charset, mimeType: mimeType, headers: headers)
    return this
  }

  RequestSpecification multiPart(String controlName, File file) {
    multiParts << new MultiPartInternal(controlName: controlName, content: file, fileName: file.getName())
    this
  }

  RequestSpecification multiPart(File file) {
    multiParts << new MultiPartInternal(controlName: restAssuredConfig().getMultiPartConfig().defaultControlName(), content: file, fileName: file.getName())
    this
  }

  RequestSpecification multiPart(String controlName, File file, String mimeType) {
    multiParts << new MultiPartInternal(controlName: controlName, content: file, mimeType: mimeType, fileName: file.getName())
    this
  }

  RequestSpecification multiPart(String controlName, Object object) {
    def mimeType = ANY.matches(requestContentType) ? JSON.toString() : requestContentType
    return multiPart(controlName, object, mimeType)
  }

  RequestSpecification multiPart(String controlName, Object object, String mimeType) {
    def possiblySerializedObject = serializeIfNeeded(object, mimeType)
    multiParts << new MultiPartInternal(controlName: controlName, content: possiblySerializedObject, mimeType: mimeType, fileName: restAssuredConfig().getMultiPartConfig().defaultFileName())
    this
  }

  RequestSpecification multiPart(String controlName, String filename, Object object, String mimeType) {
    def possiblySerializedObject = serializeIfNeeded(object, mimeType)
    multiParts << new MultiPartInternal(controlName: controlName, content: possiblySerializedObject, mimeType: mimeType, fileName: filename)
    this
  }

  RequestSpecification multiPart(String name, String fileName, byte[] bytes) {
    multiParts << new MultiPartInternal(controlName: name, content: bytes, fileName: fileName)
    this
  }

  RequestSpecification multiPart(String name, String fileName, byte[] bytes, String mimeType) {
    multiParts << new MultiPartInternal(controlName: name, content: bytes, mimeType: mimeType, fileName: fileName)
    this
  }

  RequestSpecification multiPart(String name, String fileName, InputStream stream) {
    multiParts << new MultiPartInternal(controlName: name, content: stream, fileName: fileName)
    this
  }

  RequestSpecification multiPart(String name, String fileName, InputStream stream, String mimeType) {
    multiParts << new MultiPartInternal(controlName: name, content: stream, mimeType: mimeType, fileName: fileName)
    this
  }

  RequestSpecification multiPart(String name, String contentBody) {
    multiParts << new MultiPartInternal(controlName: name, content: contentBody, fileName: restAssuredConfig().getMultiPartConfig().defaultFileName())
    this
  }

  RequestSpecification multiPart(String name, NoParameterValue contentBody) {
    multiParts << new MultiPartInternal(controlName: name, content: contentBody, fileName: restAssuredConfig().getMultiPartConfig().defaultFileName())
    this
  }

  RequestSpecification multiPart(String name, String contentBody, String mimeType) {
    multiParts << new MultiPartInternal(controlName: name, content: contentBody, mimeType: mimeType, fileName: restAssuredConfig().getMultiPartConfig().defaultFileName())
    this
  }

  def newFilterContext(assertionClosure, filters, properties) {
    if (path?.endsWith("?")) {
      throw new IllegalArgumentException("Request URI cannot end with ?");
    }

    // Set default accept header if undefined
    if (!headers.hasHeaderWithName(ACCEPT_HEADER_NAME)) {
      header(ACCEPT_HEADER_NAME, ANY.getAcceptHeader())
    }

    def tempContentType = defineRequestContentTypeAsString(method)
    if (tempContentType != null) {
      header(CONTENT_TYPE, tempContentType)
    }

    def unnamedPathParamValues = unnamedPathParamsTuples.findAll { it.second != null }.collect { it.second }
    def uri = partiallyApplyPathParams(path, true, unnamedPathParamValues)
    String requestUriForLogging = generateRequestUriForLogging(uri, method)

    new FilterContextImpl(requestUriForLogging, getUserDefinedPath(), getDerivedPath(uri), uri, path, unnamedPathParamValues.toArray(), method, assertionClosure, filters, properties);
  }

  private String generateRequestUriForLogging(uri, method) {
    def targetUri
    def allQueryParams = [:]

    if (uri.contains("?")) {
      def uriToUse
      if (isFullyQualified(uri)) {
        uriToUse = uri
      } else {
        uriToUse = getTargetPath(uri)
      }

      targetUri = substringBefore(uriToUse, "?")
      def queryParamsDefinedInPath = substringAfter(uri, "?")

      // Add query parameters defined in path to the allQueryParams map
      if (!isBlank(queryParamsDefinedInPath)) {
        def splittedQueryParams = split(queryParamsDefinedInPath, "&");
        splittedQueryParams.each { queryNameWithPotentialValue ->
          String[] splitted = split(queryNameWithPotentialValue, "=", 2)
          def queryParamHasValueDefined = splitted.size() > 1 || queryNameWithPotentialValue.contains("=")
          if (queryParamHasValueDefined) {
            // Handles the special case where the query param is defined with an empty value
            def value = splitted.size() == 1 ? "" : splitted[1]
            allQueryParams.put(splitted[0], value)
          } else {
            allQueryParams.put(splitted[0], new NoParameterValue());
          }
        }
      }
    } else {
      targetUri = uri
    }

    def actualUri = URIBuilder.convertToURI(assembleCompleteTargetPath(targetUri))
    def uriBuilder = new URIBuilder(actualUri, this.urlEncodingEnabled, encoderConfig())

    if (!POST.name().equalsIgnoreCase(method) && !requestParameters?.isEmpty()) {
      allQueryParams << requestParameters
    }

    if (!queryParameters?.isEmpty()) {
      allQueryParams << queryParameters
    }

    if (GET.name().equalsIgnoreCase(method) && !formParameters?.isEmpty()) {
      allQueryParams << formParameters
    }

    if (!allQueryParams.isEmpty()) {
      uriBuilder.addQueryParams(allQueryParams)
    }

    def requestUriForLogging = uriBuilder.toString()
    requestUriForLogging
  }

  @SuppressWarnings("GroovyUnusedDeclaration")
  private
  Response sendRequest(path, assertionClosure, FilterableRequestSpecification requestSpecification, Map filterContextProperties) {
    notNull path, "Path"
    path = extractRequestParamsIfNeeded(path);
    def method = requestSpecification.getMethod()
    def targetUri = getTargetURI(path);
    def targetPath = getTargetPath(path)

    assertCorrectNumberOfPathParams()

    if (!requestSpecification.getHttpClient() instanceof AbstractHttpClient) {
      throw new IllegalStateException(format("Unfortunately Rest Assured only supports Http Client instances of type %s.", AbstractHttpClient.class.getName()));
    }

    def http = new RestAssuredHttpBuilder(targetUri, assertionClosure, urlEncodingEnabled, config, requestSpecification.getHttpClient() as AbstractHttpClient);
    applyProxySettings(http)
    applyRestAssuredConfig(http)
    registerRestAssuredEncoders(http);
    setRequestHeadersToHttpBuilder(http)

    if (cookies.exist()) {
      http.getHeaders() << [Cookie: cookies.collect { it.name + "=" + it.value }.join("; ")]
    }

    // Allow returning a the response
    def restAssuredResponse = new RestAssuredResponseImpl(logRepository: logRepository)
    RestAssuredConfig cfg = config ?: new RestAssuredConfig();
    restAssuredResponse.setSessionIdName(cfg.getSessionConfig().sessionIdName())
    restAssuredResponse.setDecoderConfig(cfg.getDecoderConfig())
    restAssuredResponse.setConnectionManager(http.client.connectionManager)
    restAssuredResponse.setConfig(cfg)
    restAssuredResponse.setFilterContextProperties(filterContextProperties)
    responseSpecification.restAssuredResponse = restAssuredResponse
    def acceptContentType = assertionClosure.getResponseContentType()

    if (shouldApplySSLConfig(http, cfg)) {
      def sslConfig = cfg.getSSLConfig();
      new CertAuthScheme(pathToKeyStore: sslConfig.getPathToKeyStore(), keyStorePassword: sslConfig.getKeyStorePassword(),
              keystoreType: sslConfig.getKeyStoreType(), keyStore: sslConfig.getKeyStore(),
              pathToTrustStore: sslConfig.getPathToTrustStore(), trustStorePassword: sslConfig.getTrustStorePassword(),
              trustStoreType: sslConfig.getTrustStoreType(), trustStore: sslConfig.getTrustStore(),
              port: sslConfig.getPort(), sslSocketFactory: sslConfig.getSSLSocketFactory(), x509HostnameVerifier: sslConfig.getX509HostnameVerifier())
              .authenticate(http)
    }

    authenticationScheme.authenticate(http)

    if (mayHaveBody(method)) {
      if (hasFormParams() && requestBody != null) {
        throw new IllegalStateException("You can either send form parameters OR body content in $method, not both!");
      }
      def bodyContent = createFormParamBodyContent(assembleBodyContent(method))
      if (POST.name().equalsIgnoreCase(method)) {
        http.post(path: targetPath, body: bodyContent,
                requestContentType: requestHeaders.getValue(CONTENT_TYPE),
                contentType: acceptContentType) { response, content ->
          if (assertionClosure != null) {
            assertionClosure.call(response, content)
          }
        }
      } else if (PATCH.name().equalsIgnoreCase(method)) {
        http.patch(path: targetPath, body: bodyContent,
                requestContentType: requestHeaders.getValue(CONTENT_TYPE),
                contentType: acceptContentType) { response, content ->
          if (assertionClosure != null) {
            assertionClosure.call(response, content)
          }
        }
      } else {
        requestBody = bodyContent
        sendHttpRequest(http, method, acceptContentType, targetPath, assertionClosure)
      }
    } else {
      sendHttpRequest(http, method, acceptContentType, targetPath, assertionClosure)
    }
    return restAssuredResponse
  }

  void assertCorrectNumberOfPathParams() {
    // Path param size is named - (unnamed - named) since named path params may override unnamed if they target the same placeholder
    if (!getRedundantNamedPathParams().isEmpty() || !getRedundantUnnamedPathParamValues().isEmpty() || !getUndefinedPathParamPlaceholders().isEmpty()) {
      def pathParamPlaceholderSize = getPathParamPlaceholders().size()
      def namedPathParams = getNamedPathParams()
      def pathParamSize = namedPathParams.size() + unnamedPathParamsTuples.findAll { it.second != null }.findAll {
        !namedPathParams.containsKey(it.second)
      }.size()

      def redundantNamedPathParams = getRedundantNamedPathParams()
      def redundantUnnamedPathParamValues = getRedundantUnnamedPathParamValues()
      def hasRedundantNamedPathParams = redundantNamedPathParams.size() > 0
      def hasRedundantUnnamedPathParamValues = redundantUnnamedPathParamValues.size() > 0

      final String message
      if (pathParamPlaceholderSize != pathParamSize) {
        message = "Invalid number of path parameters. Expected ${pathParamPlaceholderSize}, was ${pathParamSize}."
      } else {
        message = "Path parameters were not correctly defined."
      }

      String redundantMessage = ""
      if (hasRedundantNamedPathParams || hasRedundantUnnamedPathParamValues) {
        redundantMessage = " Redundant path parameters are: "

        if (hasRedundantNamedPathParams) {
          redundantMessage += "${redundantNamedPathParams.entrySet().join(", ")}"
        }
        if (hasRedundantNamedPathParams && hasRedundantUnnamedPathParamValues) {
          redundantMessage += " and "
        } else if (hasRedundantNamedPathParams && !hasRedundantUnnamedPathParamValues) {
          redundantMessage += "."
        }
        if (hasRedundantUnnamedPathParamValues) {
          redundantMessage += "${redundantUnnamedPathParamValues.join(", ")}."
        }
      }

      String undefinedMessage = ""
      if (!getUndefinedPathParamPlaceholders().isEmpty()) {
        undefinedMessage = " Undefined path parameters are: ${getUndefinedPathParamPlaceholders().join(", ")}."
      }

      throw new IllegalArgumentException("${message}${redundantMessage}${undefinedMessage}")
    }
  }

  boolean shouldApplySSLConfig(http, RestAssuredConfig cfg) {
    URI uri = ((URIBuilder) http.getUri()).toURI();
    if (uri == null) throw new IllegalStateException("a default URI must be set");
    uri.getScheme()?.toLowerCase() == "https" && cfg.getSSLConfig().isUserConfigured() && !(authenticationScheme instanceof CertAuthScheme)
  }

  def applyRestAssuredConfig(HTTPBuilder http) {
    // Decoder config should always be applied regardless if restAssuredConfig is null or not because
    // by default we should support GZIP and DEFLATE decoding.
    applyContentDecoders(http, (restAssuredConfig?.getDecoderConfig() ?: new DecoderConfig()).contentDecoders());
    if (restAssuredConfig != null) {
      applyRedirectConfig(restAssuredConfig.getRedirectConfig())
      applyHttpClientConfig(restAssuredConfig.getHttpClientConfig())
      applyEncoderConfig(http, restAssuredConfig.getEncoderConfig())
      applySessionConfig(restAssuredConfig.getSessionConfig())
    }
    if (!httpClientParams.isEmpty()) {
      def p = http.client.getParams();

      httpClientParams.each { key, value ->
        p.setParameter(key, value)
      }
    }
  }

  private def applyContentDecoders(HTTPBuilder httpBuilder, List<DecoderConfig.ContentDecoder> contentDecoders) {
    def httpBuilderContentEncoders = contentDecoders.collect { contentDecoder -> ContentEncoding.Type.valueOf(contentDecoder.toString()) }.toArray()
    httpBuilder.setContentEncoding(httpBuilderContentEncoders)
  }

  def applySessionConfig(SessionConfig sessionConfig) {
    if (sessionConfig.isSessionIdValueDefined() && !cookies.hasCookieWithName(sessionConfig.sessionIdName())) {
      cookie(sessionConfig.sessionIdName(), sessionConfig.sessionIdValue())
    }
  }

  def applyEncoderConfig(HTTPBuilder httpBuilder, EncoderConfig encoderConfig) {
    httpBuilder.encoders.setEncoderConfig(encoderConfig)
  }

  def applyHttpClientConfig(HttpClientConfig httpClientConfig) {
    ([:].plus(httpClientConfig.params())).each { key, value ->
      putIfAbsent(httpClientParams, key, value)
    }
  }

  def applyRedirectConfig(RedirectConfig redirectConfig) {
    putIfAbsent(httpClientParams, ALLOW_CIRCULAR_REDIRECTS, redirectConfig.allowsCircularRedirects())
    putIfAbsent(httpClientParams, HANDLE_REDIRECTS, redirectConfig.followsRedirects())
    putIfAbsent(httpClientParams, MAX_REDIRECTS, redirectConfig.maxRedirects())
    putIfAbsent(httpClientParams, REJECT_RELATIVE_REDIRECT, redirectConfig.rejectRelativeRedirects())
  }

  private def putIfAbsent(Map map, key, value) {
    if (!map.containsKey(key)) {
      map.put(key, value)
    }
  }

  def assembleBodyContent(httpMethod) {
    if (hasFormParams() && !GET.name().equalsIgnoreCase(httpMethod)) {
      if (POST.name().equalsIgnoreCase(httpMethod)) {
        mergeMapsAndRetainOrder(requestParameters, formParameters)
      } else {
        formParameters
      }
    } else if (multiParts.isEmpty()) {
      requestBody
    } else {
      new byte[0]
    }
  }

  def mergeMapsAndRetainOrder(Map<String, Object> map1, Map<String, Object> map2) {
    def newMap = new LinkedHashMap()
    newMap.putAll(map1)
    newMap.putAll(map2)
    newMap
  }

  def setRequestHeadersToHttpBuilder(HTTPBuilder http) {
    def httpHeaders = http.getHeaders();
    requestHeaders.each { header ->
      def headerName = header.getName()
      def headerValue = header.getValue()
      if (httpHeaders.containsKey(headerName)) {
        def values = [httpHeaders.get(headerName)];
        values << headerValue
        def headerVal = values.flatten()
        httpHeaders.put(headerName, headerVal)
      } else {
        httpHeaders.put(headerName, headerValue)
      }
    }
  }

  private def createFormParamBodyContent(bodyContent) {
    return bodyContent instanceof Map ? createFormParamBody(bodyContent) : bodyContent
  }

  private String getTargetPath(String path) {
    if (isFullyQualified(path)) {
      return new URL(path).getPath()
    }

    def baseUriPath = ""
    if (!(baseUri == null || baseUri == "")) {
      def uri = new URI(baseUri)
      baseUriPath = uri.getPath()
    }
    return mergeAndRemoveDoubleSlash(mergeAndRemoveDoubleSlash(baseUriPath, basePath), path)
  }

  private def registerRestAssuredEncoders(HTTPBuilder http) {
    // Multipart form-data
    if (multiParts.isEmpty()) {
      return;
    }

    if (hasFormParams()) {
      convertFormParamsToMultiPartParams()
    }

    def contentTypeAsString = headers.getValue(CONTENT_TYPE)
    def ct = ContentTypeExtractor.getContentTypeWithoutCharset(contentTypeAsString)
    def subType;
    if (ct?.toLowerCase()?.startsWith(MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH)) {
      subType = substringAfter(ct, MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH)
    } else if (ct?.toLowerCase()?.contains(MULTIPART_CONTENT_TYPE_PREFIX_WITH_PLUS)) {
      subType = substringBefore(substringAfter(ct, MULTIPART_CONTENT_TYPE_PREFIX_WITH_PLUS), "+")
    } else {
      throw new IllegalArgumentException("Content-Type $ct is not valid when using multiparts, it must start with \"$MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH\" or contain \"$MULTIPART_CONTENT_TYPE_PREFIX_WITH_PLUS\".");
    }

    def charsetFromContentType = CharsetExtractor.getCharsetFromContentType(contentTypeAsString)
    def charsetToUse = isBlank(charsetFromContentType) ? restAssuredConfig().getMultiPartConfig().defaultCharset() : charsetFromContentType
    def boundaryFromContentType = BoundaryExtractor.getBoundaryFromContentType(contentTypeAsString)
    String boundaryToUse = boundaryFromContentType ?: restAssuredConfig().getMultiPartConfig().defaultBoundary()
    boundaryToUse = boundaryToUse ?: generateBoundary()
    if (!boundaryFromContentType) {
      removeHeader(CONTENT_TYPE) // there should only be one
      contentType(contentTypeAsString + "; boundary=\"" + boundaryToUse + "\"")
    }

    def multipartMode = httpClientConfig().httpMultipartMode()
    // For "defaultCharset" to be taken into account we need to 

    http.encoders.putAt ct, { contentType, content ->
      RestAssuredMultiPartEntity entity = new RestAssuredMultiPartEntity(subType, charsetToUse, multipartMode, boundaryToUse);

      multiParts.each {
        def body = it.contentBody
        def controlName = it.controlName
        def headers = it.headers
        if (headers.isEmpty()) {
          entity.addPart(controlName, body);
        } else {
          def builder = FormBodyPartBuilder.create(controlName, body)
          headers.each { name, value ->
            builder.addField(name, value)
          }
          entity.addPart(builder.build())
        }
      }

      entity;
    }
  }

  private static String generateBoundary() {
    def alphabet = (('a'..'z') + ('A'..'Z') + ('0'..'9') + '-' + '_').join()
    def rand = new Random()
    def length = rand.nextInt(11) + 30
    (1..length).collect {
      alphabet[rand.nextInt(alphabet.length())]
    }.join()
  }

  private def convertFormParamsToMultiPartParams() {
    def allFormParams = mergeMapsAndRetainOrder(requestParameters, formParameters)
    allFormParams.each {
      if (it.value instanceof List) {
        it.value.each { val ->
          multiPart(it.key, val)
        }
      } else {
        multiPart(it.key, it.value)
      }
    }
    requestParameters.clear()
    formParameters.clear()
  }

  private def sendHttpRequest(HTTPBuilder http, String method, responseContentType, targetPath, assertionClosure) {
    def allQueryParams = mergeMapsAndRetainOrder(requestParameters, queryParameters)
    if (method.equals(GET.name())) {
      allQueryParams = mergeMapsAndRetainOrder(allQueryParams, formParameters)
    }
    def hasBody = (requestBody != null)
    http.request(method, responseContentType, hasBody) {
      uri.path = targetPath

      setRequestContentType(defineRequestContentTypeAsString(method))

      if (hasBody) {
        body = requestBody
      }

      uri.query = allQueryParams

      Closure closure = assertionClosure.getClosure()
      // response handler for a success response code:
      response.success = closure

      // handler for any failure status code:
      response.failure = closure
    }
  }

  private boolean hasFormParams() {
    return !(requestParameters.isEmpty() && formParameters.isEmpty())
  }

  private boolean mayHaveBody(method) {
    return POST.name().equals(method) || formParameters.size() > 0 || multiParts.size() > 0
  }

  private String extractRequestParamsIfNeeded(String path) {
    if (path.contains("?")) {
      def indexOfQuestionMark = path.indexOf("?")
      String allParamAsString = path.substring(indexOfQuestionMark + 1);
      def keyValueParams = allParamAsString.split("&");
      keyValueParams.each {
        def keyValue = split(it, "=", 2)
        def theKey;
        def theValue;
        if (keyValue.length < 1 || keyValue.length > 2) {
          throw new IllegalArgumentException("Illegal parameters passed to REST Assured. Parameters was: $keyValueParams")
        } else if (keyValue.length == 1) {
          theKey = keyValue[0]
          theValue = it.contains("=") ? "" : new NoParameterValue();
        } else {
          theKey = keyValue[0]
          theValue = keyValue[1]
        }
        queryParam(theKey, theValue)
      };
      path = path.substring(0, indexOfQuestionMark);
    }
    return path;
  }

  private def defineRequestContentTypeAsString(String method) {
    return defineRequestContentType(method)?.toString()
  }

  private def defineRequestContentType(String method) {
    def contentType = headers.getValue(CONTENT_TYPE)
    if (contentType == null) {
      if (multiParts.size() > 0) {
        contentType = MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH + restAssuredConfig().getMultiPartConfig().defaultSubtype()
      } else if (GET.name().equals(method) && !formParameters.isEmpty()) {
        contentType = URLENC
      } else if (requestBody == null) {
        contentType = mayHaveBody(method) ? URLENC : null
      } else if (requestBody instanceof byte[]) {
        contentType = BINARY
      } else {
        contentType = TEXT
      }
    }

    if (shouldAppendCharsetToContentType(contentType)) {
      def charset = findEncoderCharsetOrReturnDefault(contentType.toString())
      if (contentType instanceof String) {
        contentType = contentType + "; " + CHARSET + "=" + charset
      } else {
        contentType = contentType.withCharset(charset)
      }
    }
    contentType
  }

  private boolean shouldAppendCharsetToContentType(contentType) {
    contentType != null && !(startsWith(contentType.toString(), MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH) || contains(contentType.toString(), MULTIPART_CONTENT_TYPE_PREFIX_WITH_PLUS)) && restAssuredConfig().encoderConfig.shouldAppendDefaultContentCharsetToContentTypeIfUndefined() && !containsIgnoreCase(contentType.toString(), CHARSET)
  }

  private String getTargetURI(String path) {
    def uri
    def pathHasScheme = isFullyQualified(path)
    if (pathHasScheme) {
      def url = new URL(path)
      uri = getTargetUriFromUrl(url)
    } else if (isFullyQualified(baseUri)) {
      def baseUriAsUrl = new URL(baseUri)
      uri = getTargetUriFromUrl(baseUriAsUrl)
    } else if (port != RestAssured.UNDEFINED_PORT) {
      uri = "$baseUri:$port"
    } else {
      uri = "$baseUri"
    }
    return uri
  }

  private String getTargetUriFromUrl(URL url) {
    def protocol = url.getProtocol()
    boolean useDefaultHttps = false
    if (this.@port == RestAssured.UNDEFINED_PORT && protocol.equalsIgnoreCase("https")) {
      useDefaultHttps = true
    }

    def builder = new StringBuilder(protocol)
            .append("://")
            .append(url.getAuthority())

    def hasSpecifiedPortExplicitly = this.@port != RestAssured.UNDEFINED_PORT
    if (!hasPortDefined(url) && !useDefaultHttps) {
      if (hasSpecifiedPortExplicitly) {
        builder.append(":")
        builder.append(this.@port)
      } else if (!isFullyQualified(url.toString()) || hasAuthorityEqualToLocalhost(url)) {
        builder.append(":")
        builder.append(DEFAULT_HTTP_TEST_PORT)
      }
    }
    return builder.toString()
  }

  private boolean hasAuthorityEqualToLocalhost(uri) {
    uri.getAuthority().trim().equalsIgnoreCase(LOCALHOST)
  }

  private boolean hasPortDefined(uri) {
    return uri.getPort() != -1;
  }


  private def serializeIfNeeded(Object object) {
    serializeIfNeeded(object, requestContentType)
  }

  private def serializeIfNeeded(Object object, contentType) {
    isSerializableCandidate(object) ? ObjectMapping.serialize(object, contentType, findEncoderCharsetOrReturnDefault(contentType), null, objectMappingConfig(), restAssuredConfig().getEncoderConfig()) : object.toString()
  }

  private def applyPathParamsAndSendRequest(String method, String path, Object... unnamedPathParams) {
    notNull path, "path"
    notNull trimToNull(method), "Method"
    notNull unnamedPathParams, "Path params"
    this.method = method.trim().toUpperCase();
    this.path = path;
    if (unnamedPathParams != null) {
      def nullParamIndices = []
      for (int i = 0; i < unnamedPathParams.length; i++) {
        if (unnamedPathParams[i] == null) {
          nullParamIndices << i
        }
      }
      if (!nullParamIndices.isEmpty()) {
        def sizeOne = nullParamIndices.size() == 1
        throw new IllegalArgumentException("Unnamed path parameter cannot be null (path parameter${sizeOne ? "" : "s"} at ${sizeOne ? "index" : "indices"} ${nullParamIndices.join(",")} ${sizeOne ? "is" : "are"} null)");
      }

      buildUnnamedPathParameterTuples(unnamedPathParams)
    }
    if (authenticationScheme instanceof NoAuthScheme && !(defaultAuthScheme instanceof NoAuthScheme)) {
      // Use default auth scheme
      authenticationScheme = defaultAuthScheme
    }

    if (authenticationScheme instanceof FormAuthScheme) {
      // Form auth scheme is handled a bit differently than other auth schemes since it's implemented by a filter.
      def formAuthScheme = authenticationScheme as FormAuthScheme
      filters.removeAll { AuthFilter.class.isAssignableFrom(it.getClass()) }
      filters.add(0, new FormAuthFilter(userName: formAuthScheme.userName, password: formAuthScheme.password, formAuthConfig: formAuthScheme.config, sessionConfig: sessionConfig()))
    }
    def logConfig = restAssuredConfig().getLogConfig()
    if (logConfig.isLoggingOfRequestAndResponseIfValidationFailsEnabled()) {
      if (!filters.any { RequestLoggingFilter.class.isAssignableFrom(it.getClass()) }) {
        log().ifValidationFails(logConfig.logDetailOfRequestAndResponseIfValidationFails(), logConfig.isPrettyPrintingEnabled())
      }
      if (!filters.any { ResponseLoggingFilter.class.isAssignableFrom(it.getClass()) }) {
        responseSpecification.log().ifValidationFails(logConfig.logDetailOfRequestAndResponseIfValidationFails(), logConfig.isPrettyPrintingEnabled())
      }
    }
    restAssuredConfig = config ?: new RestAssuredConfig()

    if (!filters.any { ResponseLoggingFilter.class.isAssignableFrom(it.getClass()) } && responseSpecification?.getLogDetail()) {
      filters.add(new ResponseLoggingFilter(responseSpecification.getLogDetail(),
              logConfig.isPrettyPrintingEnabled(), logConfig.defaultStream()))
    }

    // Sort filters by order
    filters = filters.toSorted { f1, f2 -> getFilterOrder(f1) <=> getFilterOrder(f2) }

    // Add timing filter if it has not been added manually
    if (!filters*.getClass().any { TimingFilter.class.isAssignableFrom(it) }) {
      filters << new TimingFilter()
    }

    filters << new SendRequestFilter()
    def ctx = newFilterContext(responseSpecification.assertionClosure, filters.iterator(), [:])
    httpClient = httpClientConfig().httpClientInstance()
    def response = ctx.next(this, responseSpecification)
    responseSpecification.assertionClosure.validate(response)
    return response
  }

  private def applyPathParamsAndSendRequest(Method method, String path, Object... unnamedPathParams) {
    applyPathParamsAndSendRequest(notNull(method, Method.class).name(), path, unnamedPathParams)
  }

  void buildUnnamedPathParameterTuples(Object[] unnamedPathParameterValues) {
    if (unnamedPathParameterValues == null || unnamedPathParameterValues.length == 0) {
      this.unnamedPathParamsTuples = new ArrayList<Tuple2<String, String>>();
    } else {
      // Undefined placeholders since named path params have precedence over unnamed
      def keys = getUndefinedPathParamPlaceholders()
      List<Tuple2<String, String>> list = new ArrayList<>()
      for (int i = 0; i < unnamedPathParameterValues.length; i++) {
        def val = serializeIfNeeded(unnamedPathParameterValues[i])
        def key = i < keys.size() ? keys.get(i) : null
        list.add(new Tuple2<String, String>(key, val))
      }
      this.unnamedPathParamsTuples = list
    }
  }

  String partiallyApplyPathParams(String path, boolean encodePath, List<String> unnamedPathParams) {
    def unnamedPathParamSize = unnamedPathParams?.size() ?: 0

    def host = getTargetURI(path)
    def targetPath = getTargetPath(path)

    def pathWithoutQueryParams = substringBefore(targetPath, "?");
    def shouldAppendSlashAfterEncoding = pathWithoutQueryParams.endsWith("/")
    // The last slash is removed later so we may need to add it again
    def queryParams = substringAfter(path, "?")

    int numberOfUnnamedPathParametersUsed = 0;
    def pathParamNameUsageCount = [:].withDefault { 0 }

    def pathTemplate = ~/.*\{\w+\}.*/
    // If a path fragment contains double slash we need to replace it with something else to not mess up the path
    def hasPathParameterWithDoubleSlash = indexOf(pathWithoutQueryParams, DOUBLE_SLASH) != -1

    def tempParams;
    if (hasPathParameterWithDoubleSlash) {
      tempParams = replace(pathWithoutQueryParams, DOUBLE_SLASH, "RA_double_slash__");
    } else {
      tempParams = pathWithoutQueryParams
    }

    def pathParamFiller = { String separator, boolean performEncode, String acc, String subresource ->
      def indexOfStartBracket
      def indexOfEndBracket = 0
      while ((indexOfStartBracket = subresource.indexOf(TEMPLATE_START, indexOfEndBracket)) >= 0) {
        indexOfEndBracket = subresource.indexOf(TEMPLATE_END, indexOfStartBracket)
        // 3 means "{" and "}" and at least one character
        if (indexOfStartBracket >= 0 && indexOfEndBracket >= 0 && subresource.length() >= 3) {
          def pathParamValue
          def pathParamName = subresource.substring(indexOfStartBracket + 1, indexOfEndBracket)
          // Get path parameter name, what's between the "{" and "}"
          def value = findNamedPathParamValue(pathParamName, pathParamNameUsageCount)
          if (value == null && numberOfUnnamedPathParametersUsed < unnamedPathParamSize && unnamedPathParams[numberOfUnnamedPathParametersUsed].toString() != null) {
            pathParamValue = unnamedPathParams[numberOfUnnamedPathParametersUsed].toString()
            numberOfUnnamedPathParametersUsed += 1
          } else {
            // We return the template again if no match found since we might be interested in partially applied path
            pathParamValue = value == null ? TEMPLATE_START + pathParamName + TEMPLATE_END : value
          }

          def pathToPrepend = ""
          // If declared subresource has values before the first bracket then let's find it.
          if (indexOfStartBracket != 0) {
            pathToPrepend = subresource.substring(0, indexOfStartBracket)
          }

          def pathToAppend = ""
          // If declared subresource has values after the first bracket then let's find it.
          if (subresource.length() > indexOfEndBracket) {
            pathToAppend = subresource.substring(indexOfEndBracket + 1, subresource.length())
          }

          // Since the value of the path parameter might be shorter than the template name we need to
          // adjust the "indexOfEndBracket" index in case this subresource contains more templates after
          // this value.
          def lengthOfTemplate = length(pathParamName) + 2 // 2 because "{" and "}"
          def lengthOfValue = length(pathParamValue)
          if (lengthOfTemplate != lengthOfValue) {
            if (lengthOfTemplate > lengthOfValue) {
              indexOfEndBracket -= (lengthOfTemplate - lengthOfValue)
            } else {
              indexOfEndBracket += (lengthOfValue - lengthOfTemplate)
            }
          }

          subresource = pathToPrepend + pathParamValue + pathToAppend
        }
      }
      format("%s${separator}%s", acc, performEncode ? encode(subresource, EncodingTarget.QUERY) : subresource).toString()
    }

    pathWithoutQueryParams = split(tempParams, "/").inject("", pathParamFiller.curry("/", encodePath))

    if (hasPathParameterWithDoubleSlash) {
      // Now get the double slash replacement back to normal double slashes
      pathWithoutQueryParams = replace(pathWithoutQueryParams, "RA_double_slash__", encode(DOUBLE_SLASH, EncodingTarget.QUERY))
    }

    if (shouldAppendSlashAfterEncoding) {
      pathWithoutQueryParams += "/"
    }

    if (queryParams.matches(pathTemplate)) {
      // Note that we do NOT url encode query params here, that happens by UriBuilder at a later stage.
      queryParams = split(queryParams, "&").inject("", pathParamFiller.curry("&", false)).substring(1)
      // 1 means that we remove first & since query parameters starts with ?

    }
    host + (isEmpty(queryParams) ? pathWithoutQueryParams : pathWithoutQueryParams + "?" + queryParams)
  }


  private String findNamedPathParamValue(String pathParamName, pathParamNameUsageCount) {
    def pathParamValues = this.namedPathParameters.get(pathParamName);
    def pathParamValue
    if (pathParamValues instanceof Collection) {
      def pathParamCount = pathParamNameUsageCount[pathParamName]
      pathParamNameUsageCount[pathParamName] = pathParamCount++
      pathParamValue = pathParamValues.get(pathParamCount)
    } else {
      pathParamValue = pathParamValues
    }
    pathParamValue?.toString()
  }

  private String createFormParamBody(Map<String, Object> formParams) {
    final StringBuilder body = new StringBuilder();
    for (Entry<String, Object> entry : formParams.entrySet()) {
      body.append(encode(entry.getKey(), EncodingTarget.BODY));
      if (!(entry.getValue() instanceof NoParameterValue)) {
        body.append("=").append(handleMultiValueParamsIfNeeded(entry));
      }
      body.append("&");
    }
    if (!formParams.isEmpty()) {
      body.deleteCharAt(body.length() - 1); //Delete last &
    }
    return body.toString();
  }


  private String encode(Object string, EncodingTarget encodingType) {
    string = string.toString()
    if (urlEncodingEnabled) {
      def charset
      if (encodingType == EncodingTarget.BODY) {
        charset = encoderConfig().defaultContentCharset()
        def contentType = headers.getValue(CONTENT_TYPE)
        if (contentType instanceof String) {
          def tempCharset = CharsetExtractor.getCharsetFromContentType(contentType as String)
          if (tempCharset != null) {
            charset = tempCharset
          } else if (encoderConfig().hasDefaultCharsetForContentType(contentType as String)) {
            charset = encoderConfig().defaultCharsetForContentType(contentType as String)
          }
        }
      } else { // Query or path parameter
        charset = encoderConfig().defaultQueryParameterCharset()
      }
      return URIBuilder.encode(string, charset)
    } else {
      return string
    }
  }

  private def handleMultiValueParamsIfNeeded(Entry<String, Object> entry) {
    def value = entry.getValue()
    if (value instanceof List) {
      def key = encode(entry.getKey(), EncodingTarget.BODY)
      final StringBuilder multiValueList = new StringBuilder();
      value.eachWithIndex { val, index ->
        multiValueList.append(encode(val.toString(), EncodingTarget.BODY))
        if (index != value.size() - 1) {
          multiValueList.append("&").append(key).append("=")
        }
      }
      value = multiValueList.toString()
    } else {
      value = encode(value, EncodingTarget.BODY)
    }
    return value
  }

  void setResponseSpecification(ResponseSpecification responseSpecification) {
    this.responseSpecification = responseSpecification
  }

  String getBaseUri() {
    return baseUri
  }

  String getBasePath() {
    return basePath
  }

  String getDerivedPath() {
    def uri = partiallyApplyPathParams(path, true, unnamedPathParamsTuples.collect { it.second })
    getDerivedPath(uri)
  }

  String getUserDefinedPath() {
    return PathSupport.getPath(path)
  }

  String getMethod() {
    return method
  }

  String getURI() {
    def uri = partiallyApplyPathParams(path, true, unnamedPathParamsTuples.collect { it.second })
    getURI(uri);
  }

  int getPort() {
    def host = new URL(getTargetURI(path))
    return host.getPort()
  }

  Map<String, String> getFormParams() {
    return Collections.unmodifiableMap(formParameters)
  }

  Map<String, String> getPathParams() {
    def namedPathParams = getNamedPathParams()
    def map = new LinkedHashMap<String, String>(namedPathParams)
    map.putAll(getUnnamedPathParams().findAll { !namedPathParams.keySet().contains(it.key) })
    return Collections.unmodifiableMap(map)
  }

  Map<String, String> getNamedPathParams() {
    return Collections.unmodifiableMap(namedPathParameters)
  }

  Map<String, String> getUnnamedPathParams() {
    // If it.first = null means that it's a placeholder
    def map = unnamedPathParamsTuples.findAll { it.first != null }.inject([:], { m, t ->
      m.putAt(t.first, t.second)
      m
    })
    return Collections.unmodifiableMap(map)
  }

  List<String> getUnnamedPathParamValues() {
    return Collections.unmodifiableList(unnamedPathParamsTuples == null ? Collections.emptyList() : unnamedPathParamsTuples.findAll {
      it.second != null
    }.collect {
      it.second
    })
  }

  Map<String, String> getRequestParams() {
    return Collections.unmodifiableMap(requestParameters)
  }

  Map<String, String> getQueryParams() {
    return Collections.unmodifiableMap(queryParameters)
  }

  List<MultiPartSpecification> getMultiPartParams() {
    return multiParts.collect {
      new MultiPartSpecificationImpl(content: it.content, charset: it.charset, fileName: it.fileName, mimeType: it.mimeType, controlName: it.controlName, headers: it.headers)
    }
  }

  Headers getHeaders() {
    return requestHeaders
  }

  Cookies getCookies() {
    return cookies
  }

  def getBody() {
    requestBody
  }

  List<Filter> getDefinedFilters() {
    return Collections.unmodifiableList(filters)
  }

  RestAssuredConfig getConfig() {
    return restAssuredConfig
  }

  HttpClient getHttpClient() {
    return httpClient
    // @Delegate doesn't work because of http://jira.codehaus.org/browse/GROOVY-4647 (when it's fixed 9619c3b should be used instead)
  }

  ProxySpecification getProxySpecification() {
    return proxySpecification
  }

  FilterableRequestSpecification path(String path) {
    notNull path, "Path"
    this.path = trimToEmpty(path)
    return this
  }

  List<String> getUndefinedPathParamPlaceholders() {
    def uri = partiallyApplyPathParams(path, false, unnamedPathParamsTuples.collect { it.second })
    getPlaceholders(uri)
  }

  List<String> getPathParamPlaceholders() {
    def uri = getTargetPath(contains(path, "://") ? substringAfter(path, "://") : path)
    getPlaceholders(uri)
  }

  String getRequestContentType() {
    return getContentType()
  }

  @Override
  String getContentType() {
    return requestHeaders.getValue(CONTENT_TYPE)
  }

  @Override
  RequestSpecification noFilters() {
    this.filters.clear()
    this
  }

  @Override
  RequestSpecification noFiltersOfType(Class filterType) {
    notNull filterType, "Filter type"
    this.filters.removeAll { filterType.isAssignableFrom(it.getClass()) }
    this
  }

  private class RestAssuredHttpBuilder extends HTTPBuilder {
    def assertionClosure

    RestAssuredHttpBuilder(Object defaultURI, assertionClosure, boolean urlEncodingEnabled, RestAssuredConfig config, AbstractHttpClient client) throws URISyntaxException {
      super(defaultURI, urlEncodingEnabled, config?.getEncoderConfig(), config?.getDecoderConfig(), config?.getOAuthConfig(), client)
      this.assertionClosure = assertionClosure
    }

    /**
     * A copy of HTTP builders doRequest method with two exceptions.
     * <ol>
     *  <li>The exception is that the entity's content is not closed if no body matchers are specified.</li>
     *  <li>If headers contain a list of elements the headers are added and not overridden</li>
     *  </ol>
     */
    protected Object doRequest(HTTPBuilder.RequestConfigDelegate delegate) {
      if (delegate.getRequest() instanceof HttpPost) {
        if (assertionClosure != null) {
          delegate.getResponse().put(
                  Status.FAILURE.toString(), { response, content ->
            assertionClosure.call(response, content)
          });
        }
        delegate.uri.query = queryParameters
      }
      final HttpRequestBase reqMethod = delegate.getRequest()
      Object acceptContentType = delegate.getContentType()
      if (!requestHeaders.hasHeaderWithName("Accept")) {
        String acceptContentTypes = acceptContentType.toString()
        if (acceptContentType instanceof ContentType)
          acceptContentTypes = ((ContentType) acceptContentType).getAcceptHeader()
        reqMethod.setHeader("Accept", acceptContentTypes)
      }
      reqMethod.setURI(delegate.getUri().toURI())
      if (shouldApplyContentTypeFromRestAssuredConfigDelegate(delegate, reqMethod)) {
        def contentTypeToUse = trim(delegate.getRequestContentType())
        reqMethod.setHeader(CONTENT_TYPE, contentTypeToUse);
      }
      if (reqMethod.getURI() == null)
        throw new IllegalStateException("Request URI cannot be null")
      Map<?, ?> headers1 = delegate.getHeaders()
      for (Object key : headers1.keySet()) {
        if (key == null) continue;
        Object val = headers1.get(key);
        if (val == null) {
          reqMethod.removeHeaders(key.toString())
        } else if (!key.toString().equalsIgnoreCase(CONTENT_TYPE) || !val.toString().startsWith(MULTIPART_CONTENT_TYPE_PREFIX_WITH_SLASH)) {
          // Don't overwrite multipart header because HTTP Client have added boundary
          def keyAsString = key.toString()
          if (val instanceof Collection) {
            val = val.flatten().collect { it?.toString() }
            val.each {
              reqMethod.addHeader(keyAsString, it)
            }
          } else {
            reqMethod.setHeader(keyAsString, val.toString());
          }
        }
      }
      final HttpResponseDecorator resp = new HttpResponseDecorator(
              this.client.execute(reqMethod, delegate.getContext()),
              delegate.getContext(), null)
      try {
        int status = resp.getStatusLine().getStatusCode();
        Closure responseClosure = delegate.findResponseHandler(status);

        Object returnVal;
        Object[] closureArgs = null;
        switch (responseClosure.getMaximumNumberOfParameters()) {
          case 1:
            returnVal = responseClosure.call(resp);
            break;
          case 2: // parse the response entity if the response handler expects it:
            HttpEntity entity = resp.getEntity();
            try {
              if (entity == null || entity.getContentLength() == 0) {
                returnVal = responseClosure.call(resp, EMPTY);
              } else {
                returnVal = responseClosure.call(resp, this.parseResponse(resp, acceptContentType));
              }
            } catch (Exception ex) {
              throw new ResponseParseException(resp, ex);
            }
            break;
          default:
            throw new IllegalArgumentException(
                    "Response closure must accept one or two parameters");
        }
        return returnVal;
      }
      finally {
        if (responseSpecification.hasBodyAssertionsDefined()) {
          HttpEntity entity = resp.getEntity();
          if (entity != null) EntityUtils.consumeQuietly(entity);
        }
        // Close idle connections to the server
        def connectionConfig = connectionConfig()
        if (connectionConfig.shouldCloseIdleConnectionsAfterEachResponse()) {
          def closeConnectionConfig = connectionConfig.closeIdleConnectionConfig()
          client.getConnectionManager().closeIdleConnections(closeConnectionConfig.getIdleTime(), closeConnectionConfig.getTimeUnit());
        }
      }
    }

    /*
     * Is is for
     */

    private boolean shouldApplyContentTypeFromRestAssuredConfigDelegate(delegate, HttpRequestBase reqMethod) {
      def requestContentType = delegate.getRequestContentType()
      requestContentType != null && requestContentType != ANY.toString() &&
              (!reqMethod.hasProperty("entity") || reqMethod.entity?.contentType == null) &&
              !reqMethod.getAllHeaders().any { it.getName().equalsIgnoreCase(CONTENT_TYPE) }
    }

    /**
     * We override this method because ParserRegistry.getContentType(..) called by
     * the super method throws an exception if no content-type is available in the response
     * and then HTTPBuilder for some reason uses the streaming octet parser instead of the
     * defaultParser in the ParserRegistry to parse the response. To fix this we set the
     * content-type of the defaultParser if registered to Rest Assured to the response if no
     * content-type is defined.
     */
    protected Object parseResponse(HttpResponse resp, Object contentType) {
      Parser definedDefaultParser = responseSpecification.rpr.defaultParser
      if (definedDefaultParser != null && ANY.toString().equals(contentType.toString())) {
        try {
          HttpResponseContentTypeFinder.findContentType(resp);
        } catch (IllegalArgumentException ignored) {
          // This means that no content-type is defined the response
          def entity = resp?.entity
          if (entity != null) {
            resp.entity = new HttpEntityWrapper(entity) {

              org.apache.http.Header getContentType() {
                // We don't use CONTENT_TYPE field because of issue 253 (no tests for this!)
                return new BasicHeader("Content-Type", definedDefaultParser.getContentType())
              }
            }
          }
        }
      }
      return super.parseResponse(resp, contentType)
    }
  }

  private def applyProxySettings(RestAssuredHttpBuilder http) {
    // make client aware of JRE proxy settings http://freeside.co/betamax/
    http.client.routePlanner = new RestAssuredProxySelectorRoutePlanner(http.client.connectionManager.schemeRegistry,
            new RestAssuredProxySelector(delegatingProxySelector: ProxySelector.default, proxySpecification: proxySpecification), proxySpecification)
    if (proxySpecification?.hasAuth()) {
      CredentialsProvider credsProvider = new BasicCredentialsProvider();
      def address = new InetSocketAddress(proxySpecification.host, proxySpecification.port)
      // We need to convert the host to an IP since that's what our proxy selector (RestAssuredProxySelector) expects
      def authScope = new AuthScope(address.getAddress().getHostAddress(), proxySpecification.getPort())
      def credentials = new UsernamePasswordCredentials(proxySpecification.username, proxySpecification.password)
      credsProvider.setCredentials(authScope, credentials);
      http.client.setCredentialsProvider(credsProvider);
    }
  }

  private String assembleCompleteTargetPath(requestPath) {
    def targetUri
    def targetPath
    if (isFullyQualified(requestPath)) {
      targetUri = ""
      targetPath = ""
    } else {
      targetUri = getTargetURI(path)
      targetPath = substringBefore(getTargetPath(path), "?")
    }
    return mergeAndRemoveDoubleSlash(mergeAndRemoveDoubleSlash(targetUri, targetPath), requestPath);
  }

  private String findEncoderCharsetOrReturnDefault(String contentType) {
    def charset = CharsetExtractor.getCharsetFromContentType(contentType)
    if (charset == null) {
      final EncoderConfig cfg
      if (config == null) {
        cfg = new EncoderConfig()
      } else {
        cfg = config.getEncoderConfig()
      }

      if (cfg.hasDefaultCharsetForContentType(contentType)) {
        charset = cfg.defaultCharsetForContentType(contentType)
      } else {
        charset = cfg.defaultContentCharset()
      }
    }
    charset
  }

  private ObjectMapperConfig objectMappingConfig() {
    return config == null ? ObjectMapperConfig.objectMapperConfig() : config.getObjectMapperConfig();
  }

  private HttpClientConfig httpClientConfig() {
    return config == null ? HttpClientConfig.httpClientConfig() : config.getHttpClientConfig();
  }

  private ConnectionConfig connectionConfig() {
    return config == null ? ConnectionConfig.connectionConfig() : config.getConnectionConfig();
  }

  private EncoderConfig encoderConfig() {
    return config == null ? EncoderConfig.encoderConfig() : config.getEncoderConfig();
  }

  private SessionConfig sessionConfig() {
    return config == null ? SessionConfig.sessionConfig() : config.getSessionConfig();
  }

  RestAssuredConfig restAssuredConfig() {
    config ?: new RestAssuredConfig()
  }

  private enum EncodingTarget {
    BODY, QUERY
  }

  static List getPlaceholders(String uri) {
    Pattern p = Pattern.compile(Pattern.quote(TEMPLATE_START) + "(.*?)" + Pattern.quote(TEMPLATE_END))
    Matcher m = p.matcher(uri)
    def placeholders = new LinkedHashSet<String>() // Remove duplicates such as if we have get("/{x}/{x}")
    while (m.find()) {
      placeholders << m.group(1)?.trim()
    }
    return Collections.unmodifiableList(new ArrayList(placeholders))
  }

  static String getDerivedPath(String uri) {
    PathSupport.getPath(uri)
  }

  String getURI(String uri) {
    generateRequestUriForLogging(uri, method)
  }

  // Note that it's not possible to both redundant named and unnamed path parameters
  // as a map since redundant unnamed path parameters doesn't necessarily have a placeholder associated with it.
  // For example if we do get("/{x}", "1", "2") then there's no placeholder name for "2"
  Map<String, String> getRedundantNamedPathParams() {
    def placeholders = getPathParamPlaceholders()
    getNamedPathParams().findAll { !placeholders.contains(it.key) }.asImmutable()
  }

  List<String> getRedundantUnnamedPathParamValues() {
    def allPathParams = getPathParams()
    if (getPathParamPlaceholders().minus(allPathParams.keySet()).size() +
            Math.max(getUnnamedPathParamValues().size() - getPathParamPlaceholders().size(), 0) > 0) {
      return (getUnnamedPathParamValues().minus(allPathParams.values())).asImmutable()
    }
    Collections.unmodifiableList(Collections.emptyList())
  }

  void removeUnnamedPathParamAtIndex(int indexOfParamName) {
    unnamedPathParamsTuples.remove(indexOfParamName)
    // We define the a tuple with "null, null" in order to retain path parameter order
    unnamedPathParamsTuples.add(indexOfParamName, new Tuple2<String, String>(null, null))
  }

  public void setMethod(String method) {
    this.method = method == null ? null : method.toUpperCase()
  }

  private static int getFilterOrder(Filter filter) {
    return (filter instanceof OrderedFilter) ? ((OrderedFilter) filter).getOrder()
            : OrderedFilter.DEFAULT_PRECEDENCE;
  }
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-08-08 13:23:19.689
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-08-08 13:23:19.691
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1287)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2033)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3797)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1945)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1976)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3054)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3349)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1526)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1279)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:23:52.865
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 61896 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--1144664762\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 61896 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--1144664762\testng-customsuite.xml

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:24:13.110
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 61906 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-986120620\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 61906 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-986120620\testng-customsuite.xml

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:24:34.384
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:24:34.391
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.ui.ide 4 4 2022-08-08 13:24:34.710
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:683)
	at org.eclipse.jface.resource.URLImageDescriptor.createImage(URLImageDescriptor.java:274)
	at org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:287)
	at org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:265)
	at org.testng.eclipse.ui.AbstractTab.initImages(AbstractTab.java:499)
	at org.testng.eclipse.ui.AbstractTab.createTabControl(AbstractTab.java:166)
	at org.testng.eclipse.ui.TestRunnerViewPart.createTabControl(TestRunnerViewPart.java:724)
	at org.testng.eclipse.ui.TestRunnerViewPart.loadTestRunTabs(TestRunnerViewPart.java:715)
	at org.testng.eclipse.ui.TestRunnerViewPart.createTestRunTabs(TestRunnerViewPart.java:675)
	at org.testng.eclipse.ui.TestRunnerViewPart.createPartControl(TestRunnerViewPart.java:801)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.createPartControl(CompatibilityPart.java:158)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityView.createPartControl(CompatibilityView.java:155)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:365)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:995)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:960)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalInject(InjectorImpl.java:140)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:403)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:330)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:202)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:91)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:60)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:42)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:132)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:994)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$1.run(PartRenderingEngine.java:543)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:527)
	at org.eclipse.e4.ui.workbench.renderers.swt.ElementReferenceRenderer.createWidget(ElementReferenceRenderer.java:73)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:994)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:762)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:727)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:711)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.subscribeTopicToBeRendered(PartRenderingEngine.java:161)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.di.internal.extensions.EventObjectSupplier$DIEventHandler.handleEvent(EventObjectSupplier.java:92)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:228)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.e4.ui.model.application.ui.impl.UIElementImpl.setToBeRendered(UIElementImpl.java:314)
	at org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.showElementInWindow(ModelServiceImpl.java:655)
	at org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.bringToTop(ModelServiceImpl.java:624)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.delegateBringToTop(PartServiceImpl.java:786)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:757)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:679)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:674)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.showPart(PartServiceImpl.java:1251)
	at org.eclipse.ui.internal.WorkbenchPage.showPart(WorkbenchPage.java:1252)
	at org.eclipse.ui.internal.WorkbenchPage.busyShowView(WorkbenchPage.java:1240)
	at org.eclipse.ui.internal.WorkbenchPage.lambda$11(WorkbenchPage.java:4249)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.ui.internal.WorkbenchPage.showView(WorkbenchPage.java:4247)
	at org.eclipse.ui.internal.WorkbenchPage.showView(WorkbenchPage.java:4229)
	at org.testng.eclipse.TestNGPlugin.showTestRunnerViewPartInActivePage(TestNGPlugin.java:254)
	at org.testng.eclipse.TestNGPlugin.connectTestRunner(TestNGPlugin.java:227)
	at org.testng.eclipse.TestNGPlugin$2.run(TestNGPlugin.java:218)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui.ide 4 4 2022-08-08 13:24:34.712
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:683)
	at org.eclipse.jface.resource.URLImageDescriptor.createImage(URLImageDescriptor.java:274)
	at org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:287)
	at org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:265)
	at org.testng.eclipse.ui.AbstractTab.initImages(AbstractTab.java:499)
	at org.testng.eclipse.ui.AbstractTab.createTabControl(AbstractTab.java:166)
	at org.testng.eclipse.ui.TestRunnerViewPart.createTabControl(TestRunnerViewPart.java:724)
	at org.testng.eclipse.ui.TestRunnerViewPart.loadTestRunTabs(TestRunnerViewPart.java:715)
	at org.testng.eclipse.ui.TestRunnerViewPart.createTestRunTabs(TestRunnerViewPart.java:675)
	at org.testng.eclipse.ui.TestRunnerViewPart.createPartControl(TestRunnerViewPart.java:801)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.createPartControl(CompatibilityPart.java:158)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityView.createPartControl(CompatibilityView.java:155)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:365)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:995)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:960)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalInject(InjectorImpl.java:140)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:403)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:330)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:202)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:91)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:60)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:42)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:132)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:994)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$1.run(PartRenderingEngine.java:543)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:527)
	at org.eclipse.e4.ui.workbench.renderers.swt.ElementReferenceRenderer.createWidget(ElementReferenceRenderer.java:73)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:994)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:762)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:727)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:711)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.subscribeTopicToBeRendered(PartRenderingEngine.java:161)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.di.internal.extensions.EventObjectSupplier$DIEventHandler.handleEvent(EventObjectSupplier.java:92)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:228)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.e4.ui.model.application.ui.impl.UIElementImpl.setToBeRendered(UIElementImpl.java:314)
	at org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.showElementInWindow(ModelServiceImpl.java:655)
	at org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.bringToTop(ModelServiceImpl.java:624)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.delegateBringToTop(PartServiceImpl.java:786)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:757)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:679)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:674)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.showPart(PartServiceImpl.java:1251)
	at org.eclipse.ui.internal.WorkbenchPage.showPart(WorkbenchPage.java:1252)
	at org.eclipse.ui.internal.WorkbenchPage.busyShowView(WorkbenchPage.java:1240)
	at org.eclipse.ui.internal.WorkbenchPage.lambda$11(WorkbenchPage.java:4249)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.ui.internal.WorkbenchPage.showView(WorkbenchPage.java:4247)
	at org.eclipse.ui.internal.WorkbenchPage.showView(WorkbenchPage.java:4229)
	at org.testng.eclipse.TestNGPlugin.showTestRunnerViewPartInActivePage(TestNGPlugin.java:254)
	at org.testng.eclipse.TestNGPlugin.connectTestRunner(TestNGPlugin.java:227)
	at org.testng.eclipse.TestNGPlugin$2.run(TestNGPlugin.java:218)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui.ide 4 4 2022-08-08 13:24:34.713
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:683)
	at org.eclipse.jface.resource.URLImageDescriptor.createImage(URLImageDescriptor.java:274)
	at org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:287)
	at org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:265)
	at org.testng.eclipse.ui.AbstractTab.initImages(AbstractTab.java:499)
	at org.testng.eclipse.ui.AbstractTab.createTabControl(AbstractTab.java:166)
	at org.testng.eclipse.ui.TestRunnerViewPart.createTabControl(TestRunnerViewPart.java:724)
	at org.testng.eclipse.ui.TestRunnerViewPart.loadTestRunTabs(TestRunnerViewPart.java:715)
	at org.testng.eclipse.ui.TestRunnerViewPart.createTestRunTabs(TestRunnerViewPart.java:675)
	at org.testng.eclipse.ui.TestRunnerViewPart.createPartControl(TestRunnerViewPart.java:801)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.createPartControl(CompatibilityPart.java:158)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityView.createPartControl(CompatibilityView.java:155)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:365)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:995)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:960)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalInject(InjectorImpl.java:140)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:403)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:330)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:202)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:91)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:60)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:42)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:132)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:994)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$1.run(PartRenderingEngine.java:543)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:527)
	at org.eclipse.e4.ui.workbench.renderers.swt.ElementReferenceRenderer.createWidget(ElementReferenceRenderer.java:73)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:994)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:762)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:727)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:711)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.lambda$0(PartServiceImpl.java:109)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.lambda$0(UIEventHandler.java:38)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:236)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4770)
	at org.eclipse.e4.ui.workbench.swt.DisplayUISynchronize.syncExec(DisplayUISynchronize.java:34)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.handleEvent(UIEventHandler.java:38)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:228)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElementGen(ElementContainerImpl.java:170)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElement(ElementContainerImpl.java:188)
	at org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.showElementInWindow(ModelServiceImpl.java:660)
	at org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.bringToTop(ModelServiceImpl.java:624)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.delegateBringToTop(PartServiceImpl.java:786)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:757)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:679)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:674)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.showPart(PartServiceImpl.java:1251)
	at org.eclipse.ui.internal.WorkbenchPage.showPart(WorkbenchPage.java:1252)
	at org.eclipse.ui.internal.WorkbenchPage.busyShowView(WorkbenchPage.java:1240)
	at org.eclipse.ui.internal.WorkbenchPage.lambda$11(WorkbenchPage.java:4249)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.ui.internal.WorkbenchPage.showView(WorkbenchPage.java:4247)
	at org.eclipse.ui.internal.WorkbenchPage.showView(WorkbenchPage.java:4229)
	at org.testng.eclipse.TestNGPlugin.showTestRunnerViewPartInActivePage(TestNGPlugin.java:254)
	at org.testng.eclipse.TestNGPlugin.connectTestRunner(TestNGPlugin.java:227)
	at org.testng.eclipse.TestNGPlugin$2.run(TestNGPlugin.java:218)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui.ide 4 4 2022-08-08 13:24:34.715
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:683)
	at org.eclipse.jface.resource.URLImageDescriptor.createImage(URLImageDescriptor.java:274)
	at org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:287)
	at org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:265)
	at org.testng.eclipse.ui.AbstractTab.initImages(AbstractTab.java:499)
	at org.testng.eclipse.ui.AbstractTab.createTabControl(AbstractTab.java:166)
	at org.testng.eclipse.ui.TestRunnerViewPart.createTabControl(TestRunnerViewPart.java:724)
	at org.testng.eclipse.ui.TestRunnerViewPart.loadTestRunTabs(TestRunnerViewPart.java:715)
	at org.testng.eclipse.ui.TestRunnerViewPart.createTestRunTabs(TestRunnerViewPart.java:675)
	at org.testng.eclipse.ui.TestRunnerViewPart.createPartControl(TestRunnerViewPart.java:801)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.createPartControl(CompatibilityPart.java:158)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityView.createPartControl(CompatibilityView.java:155)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:365)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:995)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:960)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalInject(InjectorImpl.java:140)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:403)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:330)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:202)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:91)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:60)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:42)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:132)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:994)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$1.run(PartRenderingEngine.java:543)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:527)
	at org.eclipse.e4.ui.workbench.renderers.swt.ElementReferenceRenderer.createWidget(ElementReferenceRenderer.java:73)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:994)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:762)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:727)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:711)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.lambda$0(PartServiceImpl.java:109)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.lambda$0(UIEventHandler.java:38)
	at org.eclipse.swt.widgets.Synchronizer.syncExec(Synchronizer.java:236)
	at org.eclipse.ui.internal.UISynchronizer.syncExec(UISynchronizer.java:133)
	at org.eclipse.swt.widgets.Display.syncExec(Display.java:4770)
	at org.eclipse.e4.ui.workbench.swt.DisplayUISynchronize.syncExec(DisplayUISynchronize.java:34)
	at org.eclipse.e4.ui.services.internal.events.UIEventHandler.handleEvent(UIEventHandler.java:38)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:228)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElementGen(ElementContainerImpl.java:170)
	at org.eclipse.e4.ui.model.application.ui.impl.ElementContainerImpl.setSelectedElement(ElementContainerImpl.java:188)
	at org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.showElementInWindow(ModelServiceImpl.java:660)
	at org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.bringToTop(ModelServiceImpl.java:624)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.delegateBringToTop(PartServiceImpl.java:786)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:757)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:679)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:674)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.showPart(PartServiceImpl.java:1251)
	at org.eclipse.ui.internal.WorkbenchPage.showPart(WorkbenchPage.java:1252)
	at org.eclipse.ui.internal.WorkbenchPage.busyShowView(WorkbenchPage.java:1240)
	at org.eclipse.ui.internal.WorkbenchPage.lambda$11(WorkbenchPage.java:4249)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.ui.internal.WorkbenchPage.showView(WorkbenchPage.java:4247)
	at org.eclipse.ui.internal.WorkbenchPage.showView(WorkbenchPage.java:4229)
	at org.testng.eclipse.TestNGPlugin.showTestRunnerViewPartInActivePage(TestNGPlugin.java:254)
	at org.testng.eclipse.TestNGPlugin.connectTestRunner(TestNGPlugin.java:227)
	at org.testng.eclipse.TestNGPlugin$2.run(TestNGPlugin.java:218)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:24:42.456
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 61914 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1250089014\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 61914 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1250089014\testng-customsuite.xml

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:27:23.223
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:27:23.226
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:27:28.649
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 59778 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-308237386\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 59778 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-308237386\testng-customsuite.xml

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:28:48.937
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:28:48.940
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:28:54.461
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 59793 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1581325524\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 59793 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1581325524\testng-customsuite.xml

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:29:42.065
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 59806 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--758070382\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 59806 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--758070382\testng-customsuite.xml

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:32:33.623
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:32:33.626
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:32:39.581
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 59843 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--448318514\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 59843 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--448318514\testng-customsuite.xml

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:34:12.663
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:34:12.667
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:34:18.668
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 59864 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--1284408522\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 59864 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--1284408522\testng-customsuite.xml

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:35:04.125
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:35:04.128
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:35:09.496
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 59881 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--355347198\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 59881 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--355347198\testng-customsuite.xml

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:35:58.205
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:35:58.209
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:36:04.602
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 52697 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--1306036539\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 52697 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--1306036539\testng-customsuite.xml

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:36:46.106
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 52713 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--513377184\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 52713 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--513377184\testng-customsuite.xml

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:40:35.489
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 52762 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1403378896\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 52762 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1403378896\testng-customsuite.xml

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:43:05.198
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 56560 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--1182302279\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 56560 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--1182302279\testng-customsuite.xml

!ENTRY org.eclipse.ui.ide 4 4 2022-08-08 13:53:20.715
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:683)
	at org.eclipse.jface.resource.URLImageDescriptor.createImage(URLImageDescriptor.java:274)
	at org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:287)
	at org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:265)
	at org.testng.eclipse.ui.AbstractTab.initImages(AbstractTab.java:499)
	at org.testng.eclipse.ui.AbstractTab.createTabControl(AbstractTab.java:166)
	at org.testng.eclipse.ui.TestRunnerViewPart.createTabControl(TestRunnerViewPart.java:724)
	at org.testng.eclipse.ui.TestRunnerViewPart.loadTestRunTabs(TestRunnerViewPart.java:715)
	at org.testng.eclipse.ui.TestRunnerViewPart.createTestRunTabs(TestRunnerViewPart.java:675)
	at org.testng.eclipse.ui.TestRunnerViewPart.createPartControl(TestRunnerViewPart.java:801)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.createPartControl(CompatibilityPart.java:158)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityView.createPartControl(CompatibilityView.java:155)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:365)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:995)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:960)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalInject(InjectorImpl.java:140)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:403)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:330)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:202)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:91)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:60)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:42)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:132)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:994)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$1.run(PartRenderingEngine.java:543)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:527)
	at org.eclipse.e4.ui.workbench.renderers.swt.ElementReferenceRenderer.createWidget(ElementReferenceRenderer.java:73)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:994)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:762)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:727)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:711)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.subscribeTopicToBeRendered(PartRenderingEngine.java:161)
	at jdk.internal.reflect.GeneratedMethodAccessor79.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.di.internal.extensions.EventObjectSupplier$DIEventHandler.handleEvent(EventObjectSupplier.java:92)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:228)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.e4.ui.model.application.ui.impl.UIElementImpl.setToBeRendered(UIElementImpl.java:314)
	at org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.showElementInWindow(ModelServiceImpl.java:655)
	at org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.bringToTop(ModelServiceImpl.java:624)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.delegateBringToTop(PartServiceImpl.java:786)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:757)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:679)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:674)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.showPart(PartServiceImpl.java:1251)
	at org.eclipse.ui.internal.WorkbenchPage.showPart(WorkbenchPage.java:1252)
	at org.eclipse.ui.internal.WorkbenchPage.busyShowView(WorkbenchPage.java:1240)
	at org.eclipse.ui.internal.WorkbenchPage.lambda$11(WorkbenchPage.java:4249)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.ui.internal.WorkbenchPage.showView(WorkbenchPage.java:4247)
	at org.eclipse.ui.internal.WorkbenchPage.showView(WorkbenchPage.java:4229)
	at org.testng.eclipse.TestNGPlugin.showTestRunnerViewPartInActivePage(TestNGPlugin.java:254)
	at org.testng.eclipse.TestNGPlugin.connectTestRunner(TestNGPlugin.java:227)
	at org.testng.eclipse.TestNGPlugin$2.run(TestNGPlugin.java:218)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui.ide 4 4 2022-08-08 13:53:20.735
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:683)
	at org.eclipse.jface.resource.URLImageDescriptor.createImage(URLImageDescriptor.java:274)
	at org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:287)
	at org.eclipse.jface.resource.ImageDescriptor.createImage(ImageDescriptor.java:265)
	at org.testng.eclipse.ui.AbstractTab.initImages(AbstractTab.java:499)
	at org.testng.eclipse.ui.AbstractTab.createTabControl(AbstractTab.java:166)
	at org.testng.eclipse.ui.TestRunnerViewPart.createTabControl(TestRunnerViewPart.java:724)
	at org.testng.eclipse.ui.TestRunnerViewPart.loadTestRunTabs(TestRunnerViewPart.java:715)
	at org.testng.eclipse.ui.TestRunnerViewPart.createTestRunTabs(TestRunnerViewPart.java:675)
	at org.testng.eclipse.ui.TestRunnerViewPart.createPartControl(TestRunnerViewPart.java:801)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.createPartControl(CompatibilityPart.java:158)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityView.createPartControl(CompatibilityView.java:155)
	at org.eclipse.ui.internal.e4.compatibility.CompatibilityPart.create(CompatibilityPart.java:365)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:995)
	at org.eclipse.e4.core.internal.di.InjectorImpl.processAnnotated(InjectorImpl.java:960)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalInject(InjectorImpl.java:140)
	at org.eclipse.e4.core.internal.di.InjectorImpl.internalMake(InjectorImpl.java:403)
	at org.eclipse.e4.core.internal.di.InjectorImpl.make(InjectorImpl.java:330)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.make(ContextInjectionFactory.java:202)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.createFromBundle(ReflectionContributionFactory.java:91)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.doCreate(ReflectionContributionFactory.java:60)
	at org.eclipse.e4.ui.internal.workbench.ReflectionContributionFactory.create(ReflectionContributionFactory.java:42)
	at org.eclipse.e4.ui.workbench.renderers.swt.ContributedPartRenderer.createWidget(ContributedPartRenderer.java:132)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:994)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$1.run(PartRenderingEngine.java:543)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:527)
	at org.eclipse.e4.ui.workbench.renderers.swt.ElementReferenceRenderer.createWidget(ElementReferenceRenderer.java:73)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createWidget(PartRenderingEngine.java:994)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeCreateGui(PartRenderingEngine.java:762)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$2.run(PartRenderingEngine.java:727)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.createGui(PartRenderingEngine.java:711)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.subscribeTopicToBeRendered(PartRenderingEngine.java:161)
	at jdk.internal.reflect.GeneratedMethodAccessor79.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.di.internal.extensions.EventObjectSupplier$DIEventHandler.handleEvent(EventObjectSupplier.java:92)
	at org.eclipse.equinox.internal.event.EventHandlerWrapper.handleEvent(EventHandlerWrapper.java:205)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:203)
	at org.eclipse.equinox.internal.event.EventHandlerTracker.dispatchEvent(EventHandlerTracker.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:228)
	at org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:151)
	at org.eclipse.equinox.internal.event.EventAdminImpl.dispatchEvent(EventAdminImpl.java:133)
	at org.eclipse.equinox.internal.event.EventAdminImpl.sendEvent(EventAdminImpl.java:75)
	at org.eclipse.equinox.internal.event.EventComponent.sendEvent(EventComponent.java:44)
	at org.eclipse.e4.ui.services.internal.events.EventBroker.send(EventBroker.java:55)
	at org.eclipse.e4.ui.internal.workbench.UIEventPublisher.notifyChanged(UIEventPublisher.java:63)
	at org.eclipse.emf.common.notify.impl.BasicNotifierImpl.eNotify(BasicNotifierImpl.java:424)
	at org.eclipse.e4.ui.model.application.ui.impl.UIElementImpl.setToBeRendered(UIElementImpl.java:314)
	at org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.showElementInWindow(ModelServiceImpl.java:655)
	at org.eclipse.e4.ui.internal.workbench.ModelServiceImpl.bringToTop(ModelServiceImpl.java:624)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.delegateBringToTop(PartServiceImpl.java:786)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:757)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:679)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.activate(PartServiceImpl.java:674)
	at org.eclipse.e4.ui.internal.workbench.PartServiceImpl.showPart(PartServiceImpl.java:1251)
	at org.eclipse.ui.internal.WorkbenchPage.showPart(WorkbenchPage.java:1252)
	at org.eclipse.ui.internal.WorkbenchPage.busyShowView(WorkbenchPage.java:1240)
	at org.eclipse.ui.internal.WorkbenchPage.lambda$11(WorkbenchPage.java:4249)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:74)
	at org.eclipse.ui.internal.WorkbenchPage.showView(WorkbenchPage.java:4247)
	at org.eclipse.ui.internal.WorkbenchPage.showView(WorkbenchPage.java:4229)
	at org.testng.eclipse.TestNGPlugin.showTestRunnerViewPartInActivePage(TestNGPlugin.java:254)
	at org.testng.eclipse.TestNGPlugin.connectTestRunner(TestNGPlugin.java:227)
	at org.testng.eclipse.TestNGPlugin$2.run(TestNGPlugin.java:218)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4029)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1150)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1041)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:53:22.103
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:53:22.106
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:53:26.189
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 50400 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1910568770\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 50400 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse-1910568770\testng-customsuite.xml

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:55:36.849
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:55:36.852
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:55:47.141
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-08-08 13:55:47.144
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.testng.eclipse 1 0 2022-08-08 13:55:54.619
!MESSAGE [TestNGLaunchConfigurationDelegate] Launching:
  Classpath: C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes D:\Automação\Getnet\apiTesteComRestAssured\target\classes C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar
  VMArgs:    -ea
  Class:     org.testng.remote.RemoteTestNG
  Args:      -serport 50427 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--1639677897\testng-customsuite.xml
java -ea -classpath C:\Users\Jean Moreira\eclipse\jee-2021-09\eclipse\configuration\org.eclipse.osgi\938\0\.cp\lib\testng-remote.jar:D:\Automação\Getnet\apiTesteComRestAssured\target\test-classes:D:\Automação\Getnet\apiTesteComRestAssured\target\classes:C:\Users\Jean Moreira\.p2\pool\plugins\org.junit_4.13.0.v20200204-1500.jar:C:\Users\Jean Moreira\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured\4.2.0\rest-assured-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy\2.5.8\groovy-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-xml\2.5.8\groovy-xml-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpclient\4.5.3\httpclient-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpcore\4.4.6\httpcore-4.4.6.jar:C:\Users\Jean Moreira\.m2\repository\commons-logging\commons-logging\1.2\commons-logging-1.2.jar:C:\Users\Jean Moreira\.m2\repository\commons-codec\commons-codec\1.9\commons-codec-1.9.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\httpcomponents\httpmime\4.5.3\httpmime-4.5.3.jar:C:\Users\Jean Moreira\.m2\repository\org\hamcrest\hamcrest\2.1\hamcrest-2.1.jar:C:\Users\Jean Moreira\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\json-path\4.2.0\json-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\codehaus\groovy\groovy-json\2.5.8\groovy-json-2.5.8.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\rest-assured-common\4.2.0\rest-assured-common-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\io\rest-assured\xml-path\4.2.0\xml-path-4.2.0.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\commons\commons-lang3\3.4\commons-lang3-3.4.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\2.3.2\jakarta.xml.bind-api-2.3.2.jar:C:\Users\Jean Moreira\.m2\repository\jakarta\activation\jakarta.activation-api\1.2.1\jakarta.activation-api-1.2.1.jar:C:\Users\Jean Moreira\.m2\repository\com\sun\xml\bind\jaxb-osgi\2.3.0.1\jaxb-osgi-2.3.0.1.jar:C:\Users\Jean Moreira\.m2\repository\org\apache\sling\org.apache.sling.javax.activation\0.1.0\org.apache.sling.javax.activation-0.1.0.jar:C:\Users\Jean Moreira\.m2\repository\javax\activation\activation\1.1.1\activation-1.1.1.jar:C:\Users\Jean Moreira\.m2\repository\org\testng\testng\7.1.0\testng-7.1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\beust\jcommander\1.72\jcommander-1.72.jar:C:\Users\Jean Moreira\.m2\repository\com\google\inject\guice\4.1.0\guice-4.1.0-no_aop.jar:C:\Users\Jean Moreira\.m2\repository\javax\inject\javax.inject\1\javax.inject-1.jar:C:\Users\Jean Moreira\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar:C:\Users\Jean Moreira\.m2\repository\com\google\guava\guava\19.0\guava-19.0.jar:C:\Users\Jean Moreira\.m2\repository\org\yaml\snakeyaml\1.21\snakeyaml-1.21.jar org.testng.remote.RemoteTestNG -serport 50427 -protocol json -d D:\Automação\Getnet\apiTesteComRestAssured\test-output C:\Users\JEANMO~1\AppData\Local\Temp\testng-eclipse--1639677897\testng-customsuite.xml
